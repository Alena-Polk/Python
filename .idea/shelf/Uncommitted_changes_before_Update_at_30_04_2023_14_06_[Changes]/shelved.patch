Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># name_new = \"Elena\"  # создание переменной\r\n# age = 20\r\n# print(\"Hello,\", name_new)\r\n# print(type(age))\r\n\r\n# a = b = c = 1\r\n# print(a, b, c)\r\n#\r\n# a, b, c = \"Hello\", 5, False\r\n# print(a, b, c)\r\n#\r\n# PI = 3.14\r\n# print(PI)\r\n# PI = 2\r\n# print(PI)\r\n\r\n# a = \"Hello\"\r\n# print(a)\r\n# print(type(a))\r\n# a = 5\r\n# print(type(a))\r\n\r\n# name = \"Ольга\"\r\n# age = 21\r\n# print(\"Меня зовут \" + name + \". Мне \" + str(age))\r\n\r\n# a = 1\r\n# b = 2\r\n# print(\"a:\", a)\r\n# print(\"b:\", b)\r\n# # a, b = b, a\r\n# c = a\r\n# a = b\r\n# b = c\r\n# print(\"a:\", a)\r\n# print(\"b:\", b)\r\n\r\n# print(\"строка \\\r\n#         символов\")\r\n# print('строка '\r\n#       'символов')\r\n\r\n# print(\"Документ \\\"file.py\\\" \\t\\t\\t\\tнаходится           по заданному пути \\nD:\\\\Python\\\\file.py\")\r\n\r\n# s1 = \"Hello\"\r\n# s2 = \"Python\"\r\n# s3 = s1 + \", \" + s2 + \"!\\t\\t\"\r\n# print(s3)\r\n# print(s3 * 5)\r\n\r\n# print(45446454654563465345645645634)\r\n# print(4.5446454654563465345645645634)\r\n\r\n# print(6 + 2)\r\n# print(6 - 2)\r\n# print(6 * 2)\r\n# print(6 / 5)  # 3.0\r\n# print(6 // 5)  # 3\r\n# print(6 ** 2)\r\n# print(7 % 2)\r\n\r\n\r\n# a, b, c = 5, 7, 3\r\n# summa = a + b + c\r\n# proizv = a * b * c\r\n# sredn = summa / 3\r\n# print(\"Сумма:\", summa)\r\n# print(\"Произведение:\", proizv)\r\n# print(\"Среднее арифметическое:\", sredn)\r\n\r\n# number = 6 + 4 * 5 ** 2 + 7\r\n# print(number)\r\n#\r\n# number = (6 + 4) * (5 ** 2 + 7)\r\n# print(number)\r\n\r\n# num = 10\r\n# num += 5  # num = num + 5\r\n# print(num)  # 15\r\n#\r\n# num -= 3  # num = num - 3\r\n# print(num)  # 12\r\n#\r\n# num *= 4  # num = num * 4\r\n# print(num)  # 48\r\n\r\n# num = 4321\r\n# a = num % 10\r\n# # print(a)\r\n# num = num // 10\r\n# # print(num)\r\n# b = num % 10\r\n# # print(b)\r\n# num = num // 10\r\n# # print(num)\r\n# c = num % 10\r\n# # print(c)\r\n# num = num // 10\r\n# # print(num)\r\n# d = num % 10\r\n# print(d)\r\n# print(a * 1000 + b * 100 + c * 10 + d)\r\n\r\n# num = 4321\r\n# res = num % 10 * 1000\r\n# num //= 10\r\n# res += num % 10 * 100\r\n# num //= 10\r\n# res += num % 10 * 10\r\n# num //= 10\r\n# res += num % 10\r\n# print(res)\r\n\r\n# Функции явного преобразования типов\r\n# int()\r\n# str()\r\n# float()\r\n# bool()\r\n\r\n# num1 = \"2\"\r\n# num2 = 3\r\n# res = int(num1) + num2\r\n# print(res)\r\n#\r\n# print(int(3.8))\r\n# a = 3.8\r\n# print(type(round(a)))\r\n#\r\n# print(round(3.491, 1))\r\n\r\n# print(6 / 2)\r\n\r\n# num1 = \"2.5\"\r\n# num2 = 3\r\n# res = float(num1) + num2\r\n# print(res)\r\n\r\n# a = 1\r\n# b = 2\r\n# print(\"a:\", a, \"\\nb:\", b)\r\n\r\n# name = \"Виктор\"\r\n# age = 28\r\n# print(\"Меня зовут\", name, \". Мне\", age, \"лет.\")\r\n# print(\"Меня зовут \" + name + \". Мне \" + str(age) + \" лет.\")\r\n# print(\"Меня зовут\", name, \". Мне\", age, \"лет.\", end=\"\", sep=\"__\")\r\n# print(\"Я учу Python.\")\r\n\r\n# name = input(\"Введите имя: \")\r\n# print(\"Hello\", name)\r\n\r\n# num = int(input(\"Введите число: \"))\r\n# # print(type(num))\r\n# power = int(input(\"Введите степень: \"))\r\n# # num = int(num)\r\n# # power = int(power)\r\n# res = num ** power\r\n# print(\"Число\", num, \"в степени\", power, \"равно:\", res)\r\n\r\n# num1 = int(input(\"Введите любое число: \"))\r\n# num2 = int(input(\"Введите любое число: \"))\r\n# num3 = int(input(\"Введите любое число: \"))\r\n# num4 = int(input(\"Введите любое число: \"))\r\n# # sum1 = num1 + num2\r\n# # sum2 = num3 + num4\r\n# # itog = sum1 / sum2\r\n# # print(round(itog, 2))\r\n#\r\n# print(\"Ответ:\", round((num1+num2)/(num3 + num4), 2))\r\n\r\n# b1 = True  # 1\r\n# b2 = False  # 0\r\n# print(b1 + 5)  # 1 + 5 = 6\r\n# print(b2 + 5)  # 0 + 5 = 5\r\n\r\n\r\n# print(bool(\"python\"))\r\n# print(bool(\"\"))  # False\r\n# print(bool(\" \"))\r\n# print(bool(5))\r\n# print(bool(0))  # False\r\n# print(bool(False))  # False\r\n# print(bool(None))  # False\r\n#\r\n# test = None\r\n# print(test)\r\n# test = 5\r\n# print(test)\r\n\r\n# print(7 == 7)\r\n# print(2 + 5 != 7)\r\n# print(\"привет\" == \"Привет\")\r\n\r\n# print(2 < 4 < 9)  # True && True  => True\r\n# print(2 * 5 > 7 >= 4 + 3)  # True && True  => True\r\n# print(3 * 3 <= 7 >= 2)  # False && True => False\r\n\r\n# a = 10\r\n# b = 5\r\n# c = a == b\r\n# print(a, b, c)\r\n\r\n# print(5 - 3 == 2 and 1 + 3 == 4)  # True (True and True)\r\n# print(5 - 3 == 2 and 1 + 3 < 4)  # False (True and False)\r\n\r\n# print(5 - 3 == 2 or 1 + 3 == 4)  # True (True and True)\r\n# print(5 - 3 == 2 or 1 + 3 < 4)  # True (True and False)\r\n\r\n# print(not 9 - 5)\r\n# print(not 7 - 7)\r\n\r\n# cnt = 15\r\n# if cnt < 10:\r\n#     cnt += 1\r\n#     print(cnt)\r\n\r\n# age = int(input(\"Введите свой возраст: \"))\r\n# if age >= 18:\r\n#     print(\"Доступ на сайт разрешен\")\r\n# else:\r\n#     print(\"Доступ запрещен\")\r\n\r\n# a = 35\r\n# b = 35\r\n# if a > b:\r\n#     print(\"a > b\")\r\n# elif a < b:\r\n#     print(\"b > a\")\r\n# else:\r\n#     print(\"a == b\")\r\n\r\n# a = input(\"Введите первую сторону: \")\r\n# b = input(\"Введите вторую сторону: \")\r\n# c = input(\"Введите третью сторону: \")\r\n# if a == b == c:\r\n#     print(\"Это равносторонний треугольник\")\r\n# elif a == b or a == c or c == b:\r\n#     print(\"Это равнобедренный треугольник\")\r\n# else:\r\n#     print(\"Это разносторонний треугольник\")\r\n\r\n# day = int(input(\"Введите день недели (цифрой): \"))\r\n# if 1 <= day <= 5:  # (day >= 1) and (day <= 5)\r\n#     print(\"Рабочий день - \", end=\"\")\r\n#     if day == 1:\r\n#         print(\"понедельник\")\r\n#     if day == 2:\r\n#         print(\"вторник\")\r\n#     if day == 3:\r\n#         print(\"среда\")\r\n#     if day == 4:\r\n#         print(\"четверг\")\r\n#     if day == 5:\r\n#         print(\"пятница\")\r\n# elif day == 6 or day == 7:\r\n#     print(\"Выходной день - \", end=\"\")\r\n#     if day == 6:\r\n#         print(\"суббота\")\r\n#     if day == 7:\r\n#         print(\"воскресенье\")\r\n# else:\r\n#     print(\"Такого дня недели не существует\")\r\n\r\n# month = int(input(\"Введите номер месяца: \"))\r\n# if month == 1 or month == 2 or month == 12:\r\n#     print(\"Зима\")\r\n# elif 3 <= month <= 5:\r\n#     print(\"Весна\")\r\n# elif 6 <= month <= 8:\r\n#     print(\"Лето\")\r\n# elif 9 <= month <= 11:\r\n#     print(\"Осень\")\r\n# else:\r\n#     print(\"Нет такого месяца\")\r\n\r\n# month = int(input(\"Введите номер месяца: \"))\r\n# if 1 <= month <= 12:\r\n#     print(\"Время года: \", end=\"\")\r\n#     if month == 1 or month == 2 or month == 12:\r\n#         print(\"Зима\")\r\n#     if 3 <= month <= 5:\r\n#         print(\"Весна\")\r\n#     if 6 <= month <= 8:\r\n#         print(\"Лето\")\r\n#     if 9 <= month <= 11:\r\n#         print(\"Осень\")\r\n# else:\r\n#     print(\"Нет такого месяца\")\r\n\r\n\r\n# n = int(input(\"Введите количество ворон: \"))\r\n# if 0 <= n <= 9:\r\n#     print(\"На ветке\", n, end=\" \")\r\n#     if n == 1:\r\n#         print(\"ворона\")\r\n#     if 2 <= n <= 4:\r\n#         print(\"вороны\")\r\n#     if 5 <= n <= 9 or n == 0:\r\n#         print(\"ворон\")\r\n# else:\r\n#     print(\"Ошибка ввода данных\")\r\n#\r\n#\r\n# c = int(input(\"Ввести количество ворон: \"))\r\n# if 0 <= c <= 9:\r\n#     print(\"На ветке\", c, end=\"\")\r\n#     if c == 1:\r\n#         print(\"ворона\")\r\n#     elif 2 <= c <= 4:\r\n#         print(\"вороны\")\r\n#     else:\r\n#         print(\"ворон\")\r\n# else:\r\n#     print(\"не корректно\")\r\n\r\n# a, b = 30, 20\r\n# minim = a if a < b else b\r\n# print(minim)\r\n\r\n# a, b = 10, 5\r\n# minim = \"a == b\" if a == b else \"a > b\" if a > b else \"b > a\"\r\n# print(minim)\r\n\r\n# a, b = 10, 0\r\n# c = a / b if b != 0 else \"На ноль делить нельзя\"\r\n# print(c)\r\n\r\n\r\n# Исключения\r\n\r\n# a = 0\r\n# b = \"2a\"\r\n# print(a + int(b))\r\n\r\n# a = 5\r\n# b = 0\r\n# print(a / b)\r\n\r\n# try:\r\n#     n = int(input(\"Введите целое число: \"))\r\n#     print(n * 2)\r\n# except ValueError:\r\n#     print(\"Что-то пошло не так\")\r\n\r\n\r\n# try:\r\n#     n = int(input(\"Введите делимое: \"))\r\n#     m = int(input(\"Введите делитель: \"))\r\n#     print(n / m)\r\n# except ValueError:\r\n#     print(\"Что-то пошло не так\")\r\n# except ZeroDivisionError:\r\n#     print(\"Нельзя делить на ноль\")\r\n\r\n# try:\r\n#     n = int(input(\"Введите делимое: \"))\r\n#     m = int(input(\"Введите делитель: \"))\r\n#     print(n / m)\r\n# except (ValueError, ZeroDivisionError):\r\n#     print(\"Нельзя вводить строки или делить на 0\")\r\n# else:\r\n#     print(\"Все нормально. Вы ввели\", n, \"и\", m)  # когда в блоке try не возникло исключение\r\n# finally:\r\n#     print(\"Конец программы\")  # выполняется в любом случае\r\n\r\n# n = input(\"Введите первое число: \")\r\n# m = input(\"Введите второе число: \")\r\n#\r\n# try:\r\n#     n = int(n)\r\n#     m = int(m)\r\n# except ValueError:\r\n#     n = str(n)\r\n# finally:\r\n#     print(n + m)\r\n\r\n\r\n# Цикл while\r\n\r\n# while уловить:\r\n#     тело цикла\r\n\r\n# i = 0\r\n# while i < 5:\r\n#     print(\"i =\", i)\r\n#     i += 1  # i = i + 1\r\n\r\n\r\n# i = 10\r\n# while i > 0:\r\n#     print(\"i =\", i)\r\n#     i -= 1\r\n\r\n# i = 1\r\n# while i < 21:\r\n#     if i % 2 == 0:\r\n#         print(\"i =\", i)\r\n#     i += 1\r\n\r\n# i = 1\r\n# while i < 21:\r\n#     print(i + 1)\r\n#     i += 2\r\n\r\n# n = int(input(\"Укажите количество символов: \"))\r\n# i = 0\r\n# while i < n:\r\n#     print(\"*\", end=\"\")\r\n#     i += 1\r\n\r\n# n = int(input(\"Укажите количество символов: \"))\r\n# while n > 0:\r\n#     print(\"*\", end=\"\")\r\n#     n -= 1\r\n\r\n# start = int(input('Start: '))\r\n# end = int(input('End: '))\r\n# i = start\r\n# sum_ = 0\r\n# while i <= end:\r\n#     if i % 2:\r\n#         sum_ += i\r\n#     i += 1\r\n# print('Summa:', sum_)\r\n\r\n# n = input(\"Введите целое число: \")\r\n#\r\n# while type(n) != int:\r\n#     try:\r\n#         n = int(n)\r\n#     except ValueError:\r\n#         print(\"Число не целое!\")\r\n#         n = input(\"Введите целое число: \")\r\n#\r\n# if n % 2 == 0:\r\n#     print(\"Четное число\")\r\n# else:\r\n#     print(\"Нечетное число\")\r\n\r\n# i = 0\r\n# while i < 10:\r\n#     print(i, end=\" \")\r\n#     if i == 5:\r\n#         break\r\n#     i += 1\r\n# print(\"\\nЦикл завершен!\")\r\n\r\n# i = 0\r\n# while i < 10:\r\n#     if i == 5:\r\n#         i += 1\r\n#         continue\r\n#     print(i, end=\" \")\r\n#     i += 1\r\n# print(\"\\nЦикл завершен!\")\r\n\r\n# i = 0\r\n# while True:\r\n#     print(i)\r\n#     if i == 5:\r\n#         break\r\n#     i += 1\r\n\r\n# while True:\r\n#     n = int(input(\"Введите положительное число: \"))\r\n#     if n < 0:\r\n#         break\r\n# print(\"Цикл завершен\")\r\n\r\n\r\n# mult = 1\r\n# while True:\r\n#     n = int(input(\"Введите число: \"))\r\n#     if n == 0:\r\n#         break\r\n#     mult *= n\r\n#\r\n# print(\"Произведение:\", mult)\r\n\r\n# i = 0\r\n# while i < 10:\r\n#     if i == 5:\r\n#         break\r\n#     print(i)\r\n#     i += 1\r\n# else:\r\n#     print(\"Цикл окончен, i =\", i)\r\n\r\n\r\n# kol = int(input(\"Введите количество чисел последовательности: \"))\r\n# i = 1\r\n# ch = float(input(\"Введите число: \"))\r\n# min_ch = ch\r\n# max_ch = ch\r\n# sum_ch = ch\r\n# while i < kol:\r\n#     ch = float(input(\"Введите число: \"))\r\n#     sum_ch += ch\r\n#     if ch < min_ch:\r\n#         min_ch = ch\r\n#     if ch > max_ch:\r\n#         max_ch = ch\r\n#     i += 1\r\n#\r\n# print(\"Количество чисел: \", kol)\r\n# print(\"Минимальное число:\", min_ch)\r\n# print(\"Максимальное число:\", max_ch)\r\n# print(\"Среднее арифметическое:\", sum_ch / kol)\r\n\r\n# i = 1\r\n# while i < 5:\r\n#     print(\"Внешний цикл: i =\", i)\r\n#     j = 1\r\n#     while j < 4:\r\n#         print(\"\\tВнутренний цикл: j =\", j)\r\n#         j += 1\r\n#     i += 1\r\n\r\n# i = 1\r\n# while i < 10:\r\n#     j = 1\r\n#     while j < 10:\r\n#         print(i, \"*\", j, \"=\", i * j, \"\\t\\t\", end=\"\")\r\n#         j += 1\r\n#     print()\r\n#     i += 1\r\n\r\n# for element in collection:\r\n#     тело цикла\r\n\r\n# for i in 'Hello':\r\n#     print(i)\r\n\r\n# for color in 'red', 'orange', 'yellow', 'green', 1, 20, 0.3:\r\n#     print(\"color:\", color)\r\n\r\n# range(start, stop, step)\r\n\r\n# print(range(1, 3))\r\n\r\n# for i in range(100, 0, -10):\r\n#     print(i, end=\" \")\r\n\r\n# print()\r\n# i = 11\r\n# while i > 2:\r\n#     print(i, end=\" \")\r\n#     i -= 2\r\n\r\n# a = int(input(\"Введите целое число: \"))  # 36\r\n# for i in range(1, a + 1):\r\n#     if a % i == 0:\r\n#         print(i, end=\" \")\r\n\r\n# for i in range(10, 100):  # 12  => 2 == 1\r\n#     if i % 10 == i // 10:\r\n#         print(i, end=\" \")\r\n\r\n# for i in range(11, 100, 11):\r\n#     print(i, end=\" \")\r\n\r\n# for i in range(1, 100):\r\n#     if i % 11 == 0:\r\n#         print(i, end=\" \")\r\n\r\n\r\n# for i in range(3):\r\n#     if i == 1:\r\n#         break\r\n#     print(i)\r\n# else:\r\n#     print('done')\r\n\r\n\r\n# for i in range(3):\r\n#     print(\"+++\", i)\r\n#     for j in range(2):\r\n#         print(\"-----\", j)\r\n\r\n# w = int(input(\"Введите длину прямоугольника: \"))\r\n# h = int(input(\"Введите высоту прямоугольника: \"))\r\n#\r\n# for i in range(h):\r\n#     for j in range(w):\r\n#         if i == 0 or i == h - 1 or j == 0 or j == w - 1:\r\n#             print(\"*\", end=\"\")\r\n#         else:\r\n#             print(\" \", end=\"\")\r\n#     print()\r\n\r\n\r\n# letter = [i for i in \"Hello\"]\r\n# print(letter)\r\n#\r\n#\r\n# for i in 'Hello':\r\n#     print(i)\r\n\r\n# num = [i for i in range(30) if i % 2 == 0]\r\n# print(num)\r\n\r\n\r\n# Списки (list)\r\n# nums = [8, 3, 9, 4, 1]\r\n# print(nums)\r\n# print(id(nums[1]))\r\n# print(type(nums))\r\n# print(nums[0])\r\n# print(nums[2])\r\n# print(nums[-1])\r\n# nums[1] = 256\r\n# print(nums)\r\n# print(id(nums[1]))\r\n# nums[3] += 100\r\n# print(nums)\r\n\r\n# nums = [8, 3, 9, 4, 1]\r\n# print(nums)\r\n# print(\"Длина списка:\", len(nums))\r\n\r\n\r\n# s = []\r\n# print(s)\r\n#\r\n# s1 = list()\r\n# print(s1)\r\n#\r\n# s2 = list(\"Hello\")\r\n# print(s2)\r\n\r\n\r\n# s = [1, 3, 5]\r\n# print(s)\r\n# n = s * 6\r\n# print(n)\r\n\r\n# n = list(range(2, 10, 3))\r\n# print(n)\r\n\r\n# n = 5\r\n# a = [i ** 2 for i in range(1, n + 1)]\r\n# print(a)\r\n\r\n# c = [i * 3 for i in \"list\"]\r\n# print(c)\r\n\r\n\r\n# a = [1, 2, 3]\r\n# b = [4, 5]\r\n# c = a + b\r\n# print(c)\r\n# d = a * 2\r\n# print(d)\r\n\r\n# a = [0] * int(input(\"Введите количество элементов списка: \"))\r\n# print(a)\r\n# for i in range(len(a)):\r\n#     a[i] = input(\"-> \")\r\n# print(a)\r\n\r\n# a = [int(input(\"-> \")) for i in range(int(input(\"n = \")))]\r\n# print(a)\r\n\r\n# a = [8, 4, 2, 9, 1]\r\n#\r\n# for i in range(len(a)):  # 0 1 2 3 4\r\n#     print(a[i], end=\" \")\r\n#\r\n# print()\r\n#\r\n# for elem in a:  # 8, 4, 2, 9, 1\r\n#     print(elem, end=\" \")\r\n\r\n# a = [int(input(\"-> \")) for i in range(int(input(\"n = \")))]\r\n# print(a)\r\n# s = 0\r\n# # for i in range(len(a)):\r\n# #     if a[i] < 0:\r\n# #         s += a[i]\r\n# for i in a:\r\n#     if i < 0:\r\n#         s += i\r\n# print(\"Сумма отрицательных элементов:\", s)\r\n\r\n# sp = [i for i in range(21, 41)]  # list(range(21, 41))\r\n# print(sp)\r\n# ch = 0\r\n# nech = 0\r\n# for i in sp:\r\n#     if i % 2 == 0:\r\n#         ch += 1\r\n#     else:\r\n#         nech += i\r\n# print(\"Количество четных элементов списка:\", ch)\r\n# print(\"Сумма нечетных элементов:\", nech)\r\n\r\n# a = [int(input(\"-> \")) for i in range(int(input(\"n: \")))]\r\n# n = 0\r\n# summa = 0\r\n# for i in a:\r\n#     summa += i\r\n#     if i != 0:\r\n#         n += 1\r\n# print(\"Среднее арифметическое:\", summa/n)\r\n#\r\n# sp = [int(input(\"-> \")) for i in range(int(input(\"n: \")))]\r\n# s = 0\r\n# j = 0\r\n# for i in sp:\r\n#     if i > 0:\r\n#         s += i\r\n#         j += 1\r\n# print(\"Среднее арифметическое:\", s/j)\r\n\r\n\r\n# a = [int(input(\"-> \")) for i in range(int(input(\"n: \")))]\r\n# print(a)\r\n# for i in range(1, len(a)):\r\n#     if a[i] > a[i - 1]:\r\n#         print(a[i], end=\" \")\r\n\r\n# a = [7, 8, 2, 1, 17]\r\n# print(a)\r\n# a[0], a[-1] = a[-1], a[0]\r\n# print(a)\r\n\r\n# список[start:stop:step]\r\n\r\n# a = [7, 8, 2, 1, 17, 9]\r\n# print(a[1:4])\r\n# print(a[::2])\r\n# print(a[::-1])\r\n# print(a[-2:2:-1])\r\n# print(a[1:4:-1])\r\n# print(a[10:20])\r\n\r\n# [1, 2, 3, 4, 5, 6, 7]\r\n# s = list(range(1, 8))\r\n# print(s)\r\n# print(s[::-1])\r\n# print(s[::2])\r\n# print(s[1::2])\r\n# print(s[:1])\r\n# print(s[-1:])\r\n# print(s[3:4])\r\n# print(s[4:])\r\n# print(s[-3:])\r\n# print(s[-3:1:-1])\r\n# print(s[2:5])\r\n\r\n# a = [7, 8, 2, 1, 17, 9]\r\n# a[1:3] = [0, 0, 0, 0]\r\n# print(a)\r\n# a[1:2] = [20]\r\n# print(a)\r\n# a[2] = 50\r\n# print(a)\r\n# del a[2]\r\n# print(a)\r\n# del a[2:4]\r\n# print(a)\r\n# del a[:]\r\n# print(a)\r\n\r\n# Методы списков\r\n# print(dir(list))\r\n\r\n# s = [7, 8, 2, 1, 17, 9]\r\n# print(s)\r\n# s.append(99)  # добавляет один элемент в конец списка\r\n# print(s)\r\n# s.extend([1, 2, 3])  # добавляет список элементов в конец первоначального списка\r\n# print(s)\r\n# s.extend('add')\r\n# print(s)\r\n# s.insert(2, 100)  # добавляет элемент в список. Первый параметр - это индекс, второй параметр - добавляемое значение\r\n# print(s)\r\n\r\n# [int(input(\"-> \")) for i in range(int(input(\"n: \")))]\r\n\r\n# a = [1, 2, 3]\r\n# n = int(input(\"n = \"))\r\n# for i in range(n):\r\n#     # x = int(input(\"-> \"))\r\n#     # a.append(x)\r\n#\r\n#     a.append(int(input(\"-> \")))\r\n# print(a)\r\n\r\n# [a.append(int(input(\"-> \"))) for i in range(int(input(\"n = \")))]\r\n# print(a)\r\n\r\n# n = int(input('Кол-во элементов списка: '))\r\n# lst = []\r\n#\r\n# for i in range(n):\r\n#     d = int(input('Введите число кратное 3: '))\r\n#     lst.append(d) if not d % 3 else print(f'Число {d} не делится на 3 без остатка')\r\n#\r\n# print(lst)\r\n\r\n# a = []\r\n# n = int(input(\"Кол-во элементов списка: \"))\r\n# for i in range(n):\r\n#     x = int(input(\"Введите число кратное 3: \"))\r\n#     if x % 3 == 0:\r\n#         a.append(x)\r\n#     else:\r\n#         print(x, \"не делится на 3 без остатка\")\r\n# print(a)\r\n\r\n# a = [5, 9, 2, 1, 4, 3, 2, 4]\r\n# b = [4, 2, 1, 3, 7]\r\n# c = []\r\n# for i in a:\r\n#     for j in b:\r\n#         if i in c:\r\n#             continue\r\n#         if i == j:  # 2 == 2\r\n#             c.append(i)\r\n#             break\r\n# print(c)\r\n\r\n# print(\"1 - унарный минус\")\r\n# print(\"2 - максимальное из двух чисел\")\r\n# num = int(input(\"Выбор варианта: \"))\r\n# if num == 1:\r\n#     a = int(input(\"Введите число: \"))\r\n#     a = -a\r\n#     print(a)\r\n# elif num == 2:\r\n#     a = int(input(\"Введите первое число: \"))\r\n#     b = int(input(\"Введите второе число: \"))\r\n#     if a > b:\r\n#         print(\"Максимальное число:\", a)\r\n#     elif b > a:\r\n#         print(\"Максимальное число:\", b)\r\n#     else:\r\n#         print(\"Числа равны\")\r\n# else:\r\n#     print(\"Такого варианта нет\")\r\n\r\n\r\n# a = [1, 2, 3, 4, 2, 55, 99]\r\n# b = [11, 22, 33, 14]\r\n# c = []\r\n# print(\"a =\", a)\r\n# print(\"b =\", b)\r\n#\r\n# if len(b) > len(a):\r\n#     for i in range(len(a)):\r\n#         c.append(a[i])\r\n#         c.append(b[i])\r\n#     for i in range(len(a), len(b)):  # range(3, 5)\r\n#         c.append(b[i])\r\n# else:\r\n#     for i in range(len(b)):\r\n#         c.append(a[i])\r\n#         c.append(b[i])\r\n#     for i in range(len(b), len(a)):  # range(3, 5)\r\n#         c.append(a[i])\r\n# print(c)\r\n\r\n# a = [1, 2, 3, 4, 2, 55, 99]\r\n# print(a)\r\n# a.remove(2)  # удаляет из списка указанный элемент по значению. Если элементов несколько, то удалится только первый\r\n# print(a)\r\n# last = a.pop()  # удаляет последний элемент из списка и возвращает удаляемое значение\r\n# print(last)\r\n# print(a)\r\n# last = a.pop(0)  # удаляет элемент по индексу\r\n# print(last)\r\n# print(a)\r\n# a.clear()  # удаляет из списка все элементы\r\n# print(a)\r\n\r\n# a = [int(input(\"-> \")) for i in range(int(input(\"Введите элементы списка: \")))]\r\n# k = int(input(\"Введите индекс: \"))\r\n# a.pop(k)\r\n# print(a)\r\n\r\n# a = []\r\n# [a.append(input(\"->\")) for i in range(int(input(\"n = \")))]\r\n# print(a)\r\n# while True:\r\n#     if len(a) == 0:\r\n#         break\r\n#     k = int(input(\"Введите индекс: \\nk = \"))\r\n#     a.pop(k)\r\n#     print(a)\r\n\r\n# a = [5, 9, 7, 6]\r\n#\r\n# s = 0\r\n# for i in a:\r\n#     s += i\r\n#\r\n# print(s)\r\n\r\n\r\n# a = [5, 9, 7, 6, 9, 4, 9, 0, 9]\r\n# print(a)\r\n# num = a.count(9)  # количество заданных значений в списке\r\n# print(num)\r\n# ind = a.index(7)  # возвращает индекс первого вхождения заданного значения. Если значение не найдено, исключение\r\n# # ValueError\r\n# print(ind)\r\n# ch = 7\r\n# if ch in a:\r\n#     ind = a.index(ch)\r\n#     print(ind)\r\n\r\n# a = [5, 9, 7]\r\n# b = a\r\n# print(\"a =\", a)\r\n# print(\"b =\", b)\r\n# b.append(120)\r\n# print(\"a =\", a)\r\n# print(\"b =\", b)\r\n# print(id(a))\r\n# print(id(b))\r\n\r\n# a = [5, 9, 7]\r\n# b = a.copy()  # создает копию списка\r\n# print(\"a =\", a)\r\n# print(\"b =\", b)\r\n# b.append(120)\r\n# print(\"a =\", a)\r\n# print(\"b =\", b)\r\n# print(id(a))\r\n# print(id(b))\r\n\r\n\r\n# a = [5, 9, 7, 6, 9, 4, 9, 0, 9]\r\n# print(a)\r\n# a.reverse()  # переместили элементы списка в обратном порядке\r\n# print(a)\r\n# # a.sort()  # сортирует элементы списка по возрастанию\r\n# # print(a)\r\n# a.sort(reverse=True)  # сортирует элементы списка по убыванию\r\n# print(a)\r\n#\r\n# b = sorted(a, reverse=True)\r\n# print(\"b =\", b)\r\n# print(\"a =\", a)\r\n# # s = ['Виталий', 'Сергей', 'Александр', 'Анна']\r\n# print(s)\r\n# s.sort(key=len, reverse=True)\r\n# print(s)\r\n\r\n# Генерация случайных данных\r\n\r\n# import random\r\n#\r\n# print(random.random())\r\n# print(random.randint(1, 9))  # от 1 по 9 (9 - включительно)\r\n# print(random.randrange(9))  # от 0 до 9 (9 - не включительно)\r\n#\r\n# print(random.randrange(0, 10, 2))\r\n\r\n\r\n# from random import randint, randrange\r\n#\r\n# print(randint(1, 9))\r\n# print(randrange(9))\r\n\r\n# from random import *\r\n#\r\n# print(randint(1, 9))\r\n# print(randrange(9))\r\n\r\n\r\nimport random as r\r\n\r\n# print(r.randint(1, 9))\r\n# print(r.randrange(9))\r\n# print(r.uniform(10.5, 25.5))\r\n\r\n# city = ['Москва', 'Новосибирск', 'Воронеж', 'Сочи', 'Екатеринбург']\r\n# print(r.choice(city))\r\n# print(r.choices(city, k=3))\r\n# r.shuffle(city)\r\n# print(city)\r\n\r\n\r\n# city = [3, 5, 9, 8, 7, 6]\r\n# print(r.choice(city))\r\n# print(r.choices(city, k=3))\r\n# r.shuffle(city)\r\n# print(city)\r\n\r\n\r\n# mas = [r.randint(1, 20) for i in range(5)]\r\n# print(mas)\r\n\r\n# lst = [4, 6, 8, 9, 1]\r\n# print(min(lst))\r\n# print(max(lst))\r\n# print(sum(lst))\r\n\r\n\r\n# mas = [r.randint(1, 20) for i in range(10)]\r\n# print(mas)\r\n# b = max(mas)\r\n# print(b)\r\n# mas.remove(b)\r\n# mas.insert(0, b)\r\n# print(mas)\r\n\r\n# a = [r.randint(-20, 20) for i in range(10)]\r\n# print(a)\r\n# a.sort(reverse=True)\r\n# print(a)\r\n\r\n# list_ = [r.randint(0, 100) for _ in range(10)]\r\n# print(list_)\r\n# min_ = min(list_)\r\n# print('Min:', min_)\r\n# index_min = list_.index(min_)\r\n# print('Index min:', index_min)\r\n# # list_ = list_[index_min:]\r\n# del list_[:index_min]\r\n# print(list_)\r\n\r\n# x = list('1a2b3c4d')\r\n# print(x)\r\n# print('a' not in x)\r\n# print('e' not in x)\r\n\r\n# lst = []\r\n# # if len(lst) == 0:\r\n# #     print(\"Список пустой\")\r\n#\r\n# if not lst:\r\n#     print(\"Список пустой\")\r\n\r\n# n1 = int(input(\"Введите размер первого списка: \"))\r\n# n2 = int(input(\"Введите размер второго списка: \"))\r\n# a = [r.randint(0, 10) for _ in range(n1)]\r\n# b = [r.randint(0, 10) for _ in range(n2)]\r\n# print(\"Первый список:\", a)\r\n# print(\"Второй список:\", b)\r\n# c = a + b\r\n# print(\"Третий список:\", c)\r\n#\r\n# c = []\r\n# for i in range(len(a)):\r\n#     if a[i] not in c:\r\n#         c.append(a[i])\r\n# for i in range(len(b)):\r\n#     if b[i] not in c:\r\n#         c.append(b[i])\r\n# print(\"Элементы обоих списков без повторений: \", c)\r\n#\r\n#\r\n# c = []\r\n#\r\n# for i in a:\r\n#     if i in b and i not in c:\r\n#         c.append(i)\r\n# print(\"Элементы общие для двух списков\", c)\r\n#\r\n# c = [min(a), min(b), max(a), max(b)]\r\n# print(c)\r\n\r\n\r\n# m = [\r\n#     [1, 2, 3, 4],\r\n#     [5, 6, 7, 8],\r\n#     [9, 10, 11, 12]\r\n# ]\r\n# print(m)\r\n# print(len(m))\r\n# print(m[1][2])\r\n# for row in range(len(m)):\r\n#     # print(m[row])\r\n#     for col in range(len(m[row])):\r\n#         print(m[row][col], end=\"\\t\")\r\n#     print()\r\n# print()\r\n# for row in m:\r\n#     for x in row:\r\n#         print(x, end=\"\\t\\t\")\r\n#     print()\r\n# print()\r\n\r\n# for row in m:\r\n#     for x in row:\r\n#         print(x ** 2, end=\"\\t\\t\")\r\n#     print()\r\n\r\n# w, h = 10, 10\r\n# matrix = [[x*y for x in range(1, w)] for y in range(1, h)]\r\n# # matrix = []\r\n# # for y in range(h):\r\n# #     new_row = []\r\n# #     for x in range(w):\r\n# #         new_row.append(0)\r\n# #     matrix.append(new_row)\r\n# print(matrix)\r\n# for h in matrix:\r\n#     for w in h:\r\n#         print(w, end=\"\\t\\t\")\r\n#     print()\r\n# print()\r\n\r\n# for x, y in [[1, 2], [3, 4], [5, 6], [7, 8]]:\r\n#     print(x, \"+\", y, \"=\", x + y)\r\n# import random\r\n#\r\n# n = int(input(\"Размерность матрицы: \"))\r\n# mas = []\r\n# for i in range(n):\r\n#     mas.append([])\r\n#     for j in range(n):\r\n#         mas[i].append(random.randint(1, 100))\r\n# print(mas)\r\n# for row in mas:\r\n#     for x in row:\r\n#         print(x, end=\"\\t\")\r\n#     print()\r\n# print()\r\n# m = 101\r\n# lst = []\r\n# for k in range(n):\r\n#     if m > mas[k][k]:\r\n#         lst.append(mas[k][k])\r\n# print(lst, end=\"\\t\")\r\n# print(\"\\n\", max(lst))\r\n\r\n\r\n# import geometry as m\r\n# #\r\n# # num1 = geometry.ceil(3.2)\r\n# num2 = m.floor(3.8)\r\n# # num3 = geometry.sqrt(2)\r\n# # print(num1)\r\n# print(num2)\r\n# # print(num3)\r\n# # print(geometry.pi)\r\n\r\n# from geometry import pi\r\n#\r\n# # num1 = ceil(3.2)\r\n# # print(num1)\r\n#\r\n# r = int(input(\"Введите радус окружности: \"))\r\n# print(\"Длина окружности:\", round(2 * pi * r, 2))\r\n\r\nimport time\r\n\r\n# second = time.time()\r\n# print(second)\r\n# a = 571522089\r\n# local_time = time.ctime(a)\r\n# print(local_time)\r\n# res = time.localtime()\r\n# print(res)\r\n# print(res.tm_mon, res.tm_year)\r\n# print(time.strftime(\"Today is %B %d, %Y\"))\r\n# print(time.strftime(\"%d/%m/%Y, %H:%M:%S\", time.localtime(a)))\r\n\r\n# pause = 2\r\n# print(\"Запуск программы\")\r\n# time.sleep(pause)\r\n# print(pause, \"сек.\")\r\n\r\n# text = input(\"Название напоминания: \")\r\n# locale_time = float(input(\"Через сколько минут: \"))\r\n# locale_time = locale_time * 60\r\n# time.sleep(locale_time)\r\n# print(text)\r\n\r\n# start = time.time()\r\n# time.sleep(5)\r\n# finish = time.time()\r\n# res = finish - start\r\n# print(res)\r\n\r\n# start = time.monotonic()\r\n# time.sleep(5)\r\n# finish = time.monotonic()\r\n# res = finish - start\r\n# print(res)\r\n\r\n# import locale\r\n#\r\n# locale.setlocale(locale.LC_ALL, \"ru\")\r\n#\r\n# print(time.strftime(\"Сегодня %B %d, %Y\"))\r\n\r\n# Функции\r\n# a = 20\r\n#\r\n#\r\n# def hello(age, name):\r\n#     print(\"Hello, \", name, \". I am \", age, sep=\"\")\r\n#\r\n#\r\n# hello(20, \"Irina\")\r\n# hello(26, \"Ivan\")\r\n\r\n# def get_sum(a, b):\r\n#     print(a + b)\r\n#\r\n#\r\n# x = 2\r\n# y = 5\r\n# get_sum(x, y)\r\n# get_sum('abc', 'hello')\r\n# get_sum(2.5, 4.3)\r\n\r\n# def func(n, a, b):\r\n#     [print(b, end='') if i % 2 else print(a, end='') for i in range(n)]\r\n#     print()\r\n#\r\n#\r\n# func(9, \"+\", \"-\")\r\n# func(7, \"X\", \"0\")\r\n#\r\n#\r\n# def func(n, a, b):\r\n#     for i in range(n):\r\n#         if i % 2:\r\n#             print(b, end='')\r\n#         else:\r\n#             print(a, end='')\r\n#     print()\r\n#\r\n#\r\n# func(9, \"+\", \"-\")\r\n# func(7, \"X\", \"0\")\r\n#\r\n#\r\n# def symbol(count, a, b):\r\n#     for i in range(count):\r\n#         print(a, end=\"\")\r\n#         a, b = b, a\r\n#     print()\r\n#\r\n#\r\n# symbol(9, \"+\", \"-\")\r\n# symbol(7, \"X\", \"0\")\r\n\r\n\r\n# def get_sum(a, b):\r\n#     if a > b:\r\n#         return True\r\n#     else:\r\n#         return False\r\n#\r\n#\r\n# x = 35\r\n# y = 24\r\n# if get_sum(x, y):\r\n#     print(x, \"больше\", y)\r\n# else:\r\n#     print(y, \"больше\", x)\r\n\r\n\r\n# def razn(a, b):\r\n#     if a > b:\r\n#         return a - b\r\n#     else:\r\n#         return a + b\r\n#\r\n#\r\n# a, b = int(input(\"a = \")), int(input(\"b = \"))\r\n# print(razn(a, b))\r\n\r\n# def cube(a):\r\n#     return a * a * a\r\n#\r\n#\r\n# for i in range(1, 11):\r\n#     print(i, \"в кубе =\", cube(i))\r\n\r\n# def change(lst):\r\n#     # lst[-1], lst[0] = lst[0], lst[-1]\r\n#     n = lst.pop()\r\n#     m = lst.pop(0)\r\n#     lst.insert(0, n)\r\n#     lst.append(m)\r\n#\r\n#     return lst\r\n#\r\n#\r\n# print(change([1, 2, 3]))\r\n# print(change([9, 12, 33, 54, 105]))\r\n# print(change([\"с\", \"л\", \"о\", \"н\"]))\r\n\r\n# def check_password(password):\r\n#     has_upper = False\r\n#     has_lower = False\r\n#     has_num = False\r\n#\r\n#     for ch in password:\r\n#         if \"A\" <= ch <= \"Z\":\r\n#             has_upper = True\r\n#         if 'a' <= ch <= \"z\":\r\n#             has_lower = True\r\n#         if '0' <= ch <= \"9\":\r\n#             has_num = True\r\n#\r\n#     if len(password) >= 8 and has_upper and has_lower and has_num:\r\n#         return True\r\n#     return False\r\n#\r\n#\r\n# p = input(\"Введите пароль: \")\r\n# if check_password(p):\r\n#     print(\"Это надежный пароль\")\r\n# else:\r\n#     print(\"Это ненадежный пароль\")\r\n\r\n\r\n# w, h = 3, 4\r\n# m = [[r.randint(0, 4) for x in range(w)] for y in range(h)]\r\n# pr = 1\r\n# for h in m:\r\n#     for w in h:\r\n#         print(w, end=\"\\t\\t\")\r\n#         if w > 0:\r\n#             pr *= w\r\n#     print()\r\n#\r\n# print(pr)\r\n\r\n# def get_sum(a, b, c=0, d=1):\r\n#     return a + b + c + d\r\n#\r\n#\r\n# print(get_sum(1, 5, 2, 7))\r\n# print(get_sum(1, 5, 2))\r\n# print(get_sum(1, 5))\r\n# print(get_sum(1, 5, d=2))\r\n\r\n# def set_param(c=20, s=\"-\"):\r\n#     for i in range(c):\r\n#         print(s, end=\"\")\r\n#     print()\r\n#\r\n#\r\n# set_param(10, s=\"+\")\r\n# set_param(5, \"*\")\r\n# set_param(7)\r\n\r\n\r\n# def digits_sum(n, even=True):\r\n#     s = 0\r\n#     while n > 0:\r\n#         num = n % 10\r\n#         if even and num % 2 == 0:\r\n#             s += num\r\n#         if not even and num % 2 != 0:\r\n#             s += num\r\n#         n //= 10\r\n#     return s\r\n#\r\n#\r\n# print(\"Сумма четных цифр:\")\r\n# print(digits_sum(9874023))\r\n# print(digits_sum(38271))\r\n# print(digits_sum(123456789))\r\n#\r\n# print(\"Сумма нечетных цифр:\")\r\n# print(digits_sum(9874023, even=False))\r\n# print(digits_sum(38271, even=False))\r\n# print(digits_sum(123456789, even=False))\r\n\r\n# def display_info(name, age):\r\n#     print(\"Name:\", name, \"\\nAge:\", age)\r\n#\r\n#\r\n# display_info(\"Ira\", 23)\r\n# display_info(23, \"Ira\")\r\n# display_info(age=23, name=\"Ira\")\r\n# display_info(\"Igor\", age=23, name=\"Ira\")\r\n\r\n# lt1 = [1, 2, 3]\r\n# lt2 = [1, 2, 3]\r\n# print(id(lt1))\r\n# print(id(lt2))\r\n#\r\n# print(lt1 == lt2)\r\n# print(lt1 is lt2)\r\n#\r\n# a = True  # 'Hello', 3, 3.2, True\r\n# b = True  # 'Hello', 3, 3.2, True\r\n# print(id(a))\r\n# print(id(b))\r\n#\r\n# print(a == b)\r\n# print(a is b)\r\n\r\n# s = \"Hello\"\r\n# print(s, id(s))\r\n# s = s + \"World\"\r\n# print(s, id(s))\r\n#\r\n# a = 5\r\n# print(a, id(a))\r\n# a += 1\r\n# print(a, id(a))\r\n\r\n# s = \"Hello\"\r\n# print(s, id(s))\r\n# s = s[1:-1]\r\n# print(s, id(s))\r\n\r\n# def add_number(n):\r\n#     print(\"Внутри функции:\", n, id(n))\r\n#     n = n + 1  # n += 1\r\n#     print(\"Измененное значение:\", n, id(n))\r\n#     # return n\r\n#\r\n#\r\n# x = 1\r\n# print(\"До функции:\", x, id(x))\r\n# add_number(x)\r\n# print(\"После функции:\", x, id(x))\r\n# print()\r\n#\r\n#\r\n# def add_number(n):\r\n#     print(\"Внутри функции:\", n, id(n))\r\n#     n += [4]  # n = n + [4]\r\n#     print(\"Измененное значение:\", n, id(n))\r\n#\r\n#\r\n# x = [1, 2, 3]\r\n# print(\"До функции:\", x, id(x))\r\n# add_number(x)\r\n# print(\"После функции:\", x, id(x))\r\n\r\n\r\n# Кортеж (tuple)\r\n# lst = [10, 20, 30]\r\n# tpl = (10, 20, 30)\r\n# print(lst)\r\n# print(tpl)\r\n# print(lst.__sizeof__())\r\n# print(tpl.__sizeof__())\r\n\r\n# a = (1, 2, 3, 4, 5)\r\n# print(a, type(a))\r\n# c = 1, 2, 3, 4, 5\r\n# print(type(c))\r\n# b = tuple(c)\r\n# print(b, type(b))\r\n#\r\n# t = (2,)\r\n# print(type(t))\r\n\r\n# a = (1, 2, 3, 4, 5)\r\n# print(a)\r\n# print(a[3])\r\n# print(a[1:3])\r\n# # a[3] = 55\r\n# print(a)\r\n\r\n# s = tuple(int(input(\"-> \")) for i in range(3))\r\n# print(s)\r\n# from random import randint\r\n\r\n# s = tuple(randint(1, 20) for i in range(6))\r\n# print(s)\r\n\r\n# s = tuple(2 ** i for i in range(1, 13))\r\n# print(s)\r\n\r\n# t1 = tuple(\"hello\")\r\n# t2 = tuple(\"world\")\r\n# t3 = t1 + t2\r\n# print(t3)\r\n# # print(len(t3))\r\n# # print(t3.count('l'))\r\n# # print(t3.count('a'))\r\n# # print(t3.index('l', 4))\r\n# #\r\n# # if 'w' in t3:\r\n# #     print(t3.index('w'))\r\n# # else:\r\n# #     print(\"Такого символа нет\")\r\n#\r\n# for i in range(len(t3)):\r\n#     # t3[i] = t3[i] * 2\r\n#     print(t3[i] * 2, end=\" \")\r\n# print(\"\\n\", t3)\r\n\r\n# def slicer(tpl, el):\r\n#     if el in tpl:\r\n#         if tpl.count(el) > 1:\r\n#             # return tpl[tpl.index(el):tpl.index(el, tpl.index(el) + 1) + 1]\r\n#             start = tpl.index(el)\r\n#             second = tpl.index(el, tpl.index(el) + 1)\r\n#             return tpl[start:second + 1]\r\n#         else:\r\n#             return tpl[tpl.index(el):]\r\n#     else:\r\n#         return ()\r\n#\r\n#\r\n# print(slicer((1, 2, 3), 8))\r\n# print(slicer((1, 8, 3, 4, 8, 8, 9, 2), 8))\r\n# print(slicer((1, 2, 8, 5, 1, 2, 9), 8))\r\n\r\n# from random import randint\r\n#\r\n#\r\n# def tuple_func(start, end):\r\n#     return tuple(randint(start, end) for _ in range(10))\r\n#\r\n#\r\n# tuple_1 = tuple_func(0, 5)\r\n# tuple_2 = tuple_func(-5, 0)\r\n# tuple_3 = tuple_1 + tuple_2\r\n# count_0 = tuple_3.count(0)\r\n#\r\n# print(tuple_1)\r\n# print(tuple_2)\r\n# print(tuple_3)\r\n# print('Count 0:', count_0)\r\n\r\n\r\n# t = (10, \"Hello\", [1, 2, 3], (4, 5, 6), [\"hello\", \"world\"])\r\n# print(t, id(t))\r\n# t[-1][0] = 'new'\r\n# print(t, id(t))\r\n# t[4].append('hi')\r\n# print(t, id(t))\r\n\r\n# t = (1, 2, 3)\r\n# # x = t[0]\r\n# # y = t[1]\r\n# # z = t[2]\r\n# x, y, z = t  # распаковка кортежа\r\n# print(x, y, z)\r\n\r\n# def get_user():\r\n#     name = \"Tom\"\r\n#     age = 22\r\n#     is_married = False\r\n#     return name, age, is_married\r\n\r\n\r\n# user = get_user()\r\n# # print(user)\r\n# name1, age1, is_married1 = user\r\n# # print(user[0])\r\n# # print(user[1])\r\n# # print(user[2])\r\n# print(name1, age1, is_married1)\r\n\r\n\r\n# name2, age2, is_married2 = get_user()\r\n# print(name2, age2, is_married2)\r\n\r\n# t = (1, 2, 3)\r\n# # del t\r\n# # print(t)\r\n# print(t)\r\n# t = list(t)\r\n# print(t)\r\n# t.append(4)\r\n# print(t)\r\n# t = tuple(t)\r\n# print(t)\r\n\r\n\r\n# countries = (\r\n#     (\"Германия\", 80.2, ((\"Берлин\", 3.326), (\"Гамбург\", 1.718))),\r\n#     (\"Франция\", 66, ((\"Париж\", 2.2), (\"Марсель\", 1.6)))\r\n# )\r\n#\r\n# for country in countries:\r\n#     countryName, countryPopulation, cities = country\r\n#     print(\"\\nСтрана:\", countryName, \"население =\", countryPopulation)\r\n#     for city in cities:\r\n#         cityName, cityPopulation = city\r\n#         print(\"\\tГород:\", cityName, \"население =\", cityPopulation)\r\n\r\n\r\n# Множество (set)\r\n#\r\n# s = {\"banana\", \"apple\", \"orange\", \"apple\"}\r\n# print(type(s))\r\n# print(len(s))\r\n# print(s)\r\n# b = ['Hello', 'Hi']\r\n# a = set(b)\r\n# print(type(a))\r\n# print(a)\r\n\r\n# s = {x * x for x in range(10)}\r\n# print(s)\r\n\r\n\r\n# numbers = [1, 2, 2, 2, 3, 3, 4, 4, 5, 6]\r\n# # num = {i for i in numbers if i % 2 == 0}\r\n# num = list(set(numbers))\r\n# print(num)\r\n\r\n# def to_set(s):\r\n#     st = set(s)\r\n#     return st, len(st)\r\n#\r\n#\r\n# print(to_set('я обычная строка'))\r\n# print(to_set([4, 5, 4, 6, 2, 9, 11, 3, 4, 2]))\r\n\r\n# t = {'red', 'green', 'blue'}\r\n# # print('green' not in t)\r\n#\r\n# # pr = {2, 5, 3, 7, 11}\r\n# for i in t:\r\n#     print(i, end=\" \")\r\n\r\n# s = ['ab_1', 'ac_2', 'bc_1', 'bc_2']\r\n# a = {'A' + i[1:] if i[0] == 'a' else 'B' + i[1:] for i in s if i[1] == 'c'}\r\n# # a = {'A' + i[1:] if i[0] == 'a' else 'B' + i[1:] for i in s}\r\n# # a = {i for i in s if 'a' not in i}\r\n# print(a)\r\n\r\n# a = {0, 1, 2, 3}\r\n# a.add(4)  # добавление элемента\r\n# print(a)\r\n# if 1 in a:\r\n#     a.remove(1)  # удаление элемента\r\n# print(a)\r\n# a.discard(5)  # удаление элемента, без генерации исключения\r\n# print(a)\r\n# a.pop()  # удаление первого элемента, генерация исключения будет при попытке удаления из пустого множества\r\n# print(a)\r\n# a.clear()\r\n# print(a)  # очистка множества\r\n\r\n# a = {0, 1, 2, 3, 4}\r\n# b = {3, 2, 1}\r\n# c = a.union(b)\r\n# c = a | b\r\n# a |= b\r\n# c = a & b\r\n# a &= b\r\n# c = a - b\r\n# c = a ^ b\r\n# a ^= b\r\n# a -= b\r\n# c = a > b\r\n# # print(a)\r\n# print(c)\r\n\r\n# s1 = {1, 2}\r\n# s2 = {3}\r\n# s3 = {4, 5}\r\n# s4 = {3, 2, 6}\r\n# s5 = {6}\r\n# s6 = {7, 8}\r\n# s7 = {9, 8}\r\n#\r\n# # s = s1 | s2 | s3 | s4 | s5 | s6 | s7\r\n# s = s1.union(s2, s3, s4, s5, s6, s7)\r\n# print(s)\r\n# print(len(s))\r\n# print(\"Max =\", max(s))\r\n# print(\"Min =\", min(s))\r\n\r\n# s1 = \"Hello\"\r\n# s2 = \"How are you\"\r\n# s = set(s1) & set(s2)\r\n# print(s)\r\n# for i in s:\r\n#     print(i, end=\" \")\r\n\r\n# str1 = \"Python\"\r\n# str2 = \"Programming language\"\r\n# s = set(str1) - set(str2)\r\n# print(s)\r\n# for i in s:\r\n#     print(i, end=\" \")\r\n\r\n# drawing = {\"Марина\", \"Женя\", \"Света\"}\r\n# music = {\"Женя\", \"Илья\"}\r\n#\r\n# only_one_hobby = drawing ^ music\r\n# print(\"Только одно хобби:\", only_one_hobby)\r\n#\r\n# both_hobbies = drawing & music\r\n# print(\"Два хобби:\", both_hobbies)\r\n#\r\n# drawing = drawing - both_hobbies\r\n# print(drawing)\r\n\r\n# frozenset\r\n\r\n# s = frozenset({1, 2, 3, 4, 5})\r\n# print(s)\r\n# print(type(s))\r\n\r\n# Словарь (dict)\r\n\r\n# s = [1, 2]\r\n# d = {'one': 1, 'two': 2, 'ten': 10}\r\n#\r\n# print(d)\r\n\r\n# d = {\"one\": \"один\", \"two\": \"два\"}\r\n# print(d)\r\n# # print(type(d))\r\n# #\r\n# # d[\"one\"] = \"один\"\r\n# # d[\"two\"] = \"два\"\r\n# # print(d)\r\n#\r\n# d1 = dict(one=\"один\", two=\"два\")\r\n# print(d1)\r\n\r\n# d = {0: \"text1\", \"one\": 45, (1, 2.3): 'кортеж', 42: [2, 3, 6, 7], True: 1}\r\n# print(d)\r\n# d[\"one\"] = 100\r\n# d[42][1] += 100 * 2\r\n# print(d)\r\n\r\n# d = {a: a ** 2 for a in range(2, 7)}\r\n# print(d)\r\n\r\n# d = [1, 2, 3]\r\n# print(d)\r\n# print(dict(d))\r\n\r\n\r\n# users = [\r\n#     ['igor@gmail.com', 'Igor'],\r\n#     ['irina@gmail.com', 'Irina'],\r\n#     ['anna@gmail.com', 'Anna'],\r\n# ]\r\n#\r\n# print(users)\r\n# d_users = dict(users)\r\n# print(d_users)\r\n# print()\r\n# user = (\r\n#     ('igor@gmail.com', 'Igor'),\r\n#     ('irina@gmail.com', 'Irina'),\r\n#     ('anna@gmail.com', 'Anna'),\r\n# )\r\n#\r\n# print(user)\r\n# d_user = dict(user)\r\n# print(d_user)\r\n#\r\n# # print('irina@gmail.com' in d_user)\r\n#\r\n# for key in d_user:\r\n#     print(key, \"->\", d_user[key])\r\n\r\n# lst1 = [1, 2, 3, 3, 2]\r\n# lst2 = [2, 1, 3, 1, 2, 5, 5, 9, 2, 0, 0]\r\n#\r\n#\r\n# def lst_reverse(lst):\r\n#     lst.reverse()\r\n#     unique = []\r\n#     for i in lst:  # [::-1]\r\n#         if i not in unique:\r\n#             unique.append(i)\r\n#     return tuple(unique)\r\n#\r\n#\r\n# print(lst_reverse(lst1))\r\n# print(lst_reverse(lst2))\r\n\r\n# d = {'one': 1, 'two': 2, 'three': 3}\r\n# key = 'two1'\r\n#\r\n# # if key in d:\r\n# #     del d[key]\r\n#\r\n# try:\r\n#     del d[key]\r\n# except KeyError:\r\n#     print(\"Элемента с ключом\", key, \"нет в словаре\")\r\n# print(d)\r\n\r\n# d = {'x1': 3, 'x2': 7, 'x3': 5, 'x4': -1}\r\n# mult = 1\r\n# for key in d:\r\n#     mult *= d[key]\r\n#\r\n# print(mult)\r\n\r\n# d = dict()\r\n# d[1] = input(\"-> \")\r\n# d[2] = input(\"-> \")\r\n# d[3] = input(\"-> \")\r\n# d[4] = input(\"-> \")\r\n# d = {i: input(\"-> \") for i in range(1, 5)}\r\n# print(d)\r\n# dislike = int(input(\"Исключить: \"))\r\n# del d[dislike]\r\n# print(d)\r\n\r\n\r\n# d = {'one': 1, 'two': 2, 'three': 3}\r\n# print(len(d))\r\n\r\n# goods = {\r\n#     \"1\": [\"Core-i-4330\", 9, 4500],\r\n#     \"2\": [\"Core i5-4670K\", 3, 8500],\r\n#     \"3\": [\"AMD FX-6300\", 6, 3700],\r\n#     \"4\": [\"Pentium G3220\", 8, 2100],\r\n#     \"5\": [\"Core i5-4350\", 5, 6400]\r\n# }\r\n#\r\n# for i in goods:\r\n#     print(i, \") \", goods[i][0], \" - \", goods[i][1], \" шт. по \", goods[i][2], \"руб\", sep=\"\")\r\n#\r\n# while True:\r\n#     n = input(\"№: \")\r\n#     if n != \"0\":\r\n#         m = int(input(\"Количество: \"))\r\n#         goods[n][1] = m\r\n#     else:\r\n#         break\r\n#\r\n# for i in goods:\r\n#     print(i, \") \", goods[i][0], \" - \", goods[i][1], \" шт. по \", goods[i][2], \"руб\", sep=\"\")\r\n\r\n# Методы словарей\r\n\r\n# d = {'one': 1, 'two': 2, 'three': 3}\r\n# print(d[\"two\"])\r\n# value = d.get(\"two\", \"Ключа нет\")  # получаем элемент из словаря по заданному ключу, второй параметр возвращает значение по умолчанию, если ключа нет\r\n# print(value)\r\n# print(d.keys())  # список ключей словаря\r\n# print(d.items())  # список ключей и значений словаря в виде кортежа\r\n# print(d.values())  # список значений словаря\r\n#\r\n# for key, value in d.items():\r\n#     print(key, \"=>\", value)\r\n#\r\n# d.clear()  # очистить словарь\r\n# d = {'one': 1, 'two': 2, 'three': 3}\r\n# d2 = d.copy()  # копия словаря\r\n# print(\"D =\", d)\r\n# print(\"D2 =\", d2)\r\n#\r\n# d[\"four\"] = 4\r\n# d2[\"five\"] = 5\r\n# print(\"D =\", d)\r\n# print(\"D2 =\", d2)\r\n\r\n\r\n# d = {'one': 1, 'two': 2, 'three': 3}\r\n\r\n# item = d.pop('two')  # удаляет элемент по ключу, возвращает удаляемое значение (не ключ)\r\n# item = d.pop('two', \"Ключа нет\")\r\n# item = d.setdefault(\"four\", 4)  # добавляет ключ и значение в словарь по умолчанию, если ключа нет\r\n# item = d.popitem()  # удаляет последнюю (произвольную) пару ключ и значение, возвращает удаляемое значение в виде\r\n# # кортежа\r\n# print(item)\r\n# print(d)\r\n\r\n# d.update({'four': 4, 'five': 5})\r\n# d.update([('four', 4), ('three', 5)])\r\n# print(d)\r\n\r\n# x = {'a': 1, 'b': 2}\r\n# y = {'b': 3, 'c': 4}\r\n# # z = x.copy()\r\n# # z.update(y)\r\n# # z = x | y  # объединение словарей с сохранением в новый словарь\r\n# z = {i: d[i] for d in [x, y] for i in d}\r\n# print(z)\r\n\r\n# d = {'name': 'Kelly', 'age': 25, 'salary': 8000, 'city': 'New York'}\r\n# # new_d = dict()\r\n# # new_d['name'] = d.pop('name')\r\n# # new_d['salary'] = d.pop('salary')\r\n# # new_d.update({'name': d.pop('name'), 'salary': d.pop('salary')})\r\n# # new_d = {'name': d.pop('name'), 'salary': d.pop('salary')}\r\n# d['location'] = d.pop('city')\r\n# print(d)\r\n# # print(new_d)\r\n\r\n# a = {\r\n#     'first': {\r\n#         1: 'one',\r\n#         2: 'two',\r\n#         3: 'three'\r\n#     },\r\n#     'second': {\r\n#         4: 'four',\r\n#         5: 'five'\r\n#     },\r\n# }\r\n# print(a)\r\n# for x in a:\r\n#     print(x)\r\n#     for y in a[x]:\r\n#         print(\"\\t\", y, \": \", a[x][y], sep=\"\")\r\n\r\n# sales = {\r\n#     \"John\": {\"N\": 3056, \"S\": 8463, \"E\": 8441, \"W\": 2694},\r\n#     \"Tom\": {\"N\": 4832, \"S\": 6786, \"E\": 4737, \"W\": 3612},\r\n#     \"Anne\": {\"N\": 5239, \"S\": 4802, \"E\": 5820, \"W\": 1859},\r\n#     \"Fiona\": {\"N\": 3904, \"S\": 3645, \"E\": 8821, \"W\": 2451},\r\n# }\r\n#\r\n# for x in sales:\r\n#     print(x)\r\n#     for y in sales[x]:\r\n#         print(\"\\t\", y, \": \", sales[x][y], sep=\"\")\r\n#\r\n# person = input(\"Имя: \")\r\n# region = input(\"Регион: \")\r\n# print(sales[person][region])\r\n# new_data = int(input(\"Новое значение: \"))\r\n# sales[person][region] = new_data\r\n# print(sales[person])\r\n\r\n# d = {'three': 3, 'one': 1, 'two': 2, 'four': 4}\r\n# new_d = {k: v for k, v in d.items() if v == 1 or v == 2}\r\n# print(new_d)\r\n\r\n# s = \"Hello\"\r\n# d = {i: i * 3 for i in s}\r\n# print(d)\r\n#\r\n# lt = [1, 2, 3, 4]\r\n# value = input(\"-> \")\r\n# d = {i: value for i in lt}\r\n# print(d)\r\n\r\n# d = {'three': 3, 'one': 1, 'two': 2, 'four': 4}\r\n# # value = list(d)\r\n# # value = list(d.values())\r\n# value = list(d.items())\r\n# print(value)\r\n\r\n# a = ['one', 1, 2, 3, 'two', 10, 20, 'three', 15, 36, 60, 'four', -20]\r\n#\r\n# d = dict()\r\n# s = None\r\n#\r\n# for i in a:\r\n#     if type(i) == str:\r\n#         d[i] = []\r\n#         s = i  # s = 'two'\r\n#     else:\r\n#         d[s].append(i)  # d['two'].append(10)\r\n# print(d)\r\n\r\n# zip()\r\n\r\n# d = dict(zip([1, 2, 3], ['one', 'two', 'three']))\r\n# print(d)\r\n#\r\n# a = [1, 2, 3]\r\n# b = ['one', 'two', 'three']\r\n# f = {k: v for k, v in zip(b, a)}\r\n# print(f)\r\n\r\n# d = dict(zip('one', 'two'))\r\n# print(d)\r\n\r\n# a = [1, 2, 3]\r\n# print(list(zip(a)))\r\n\r\n# print(list(zip(range(5), range(95, 100))))\r\n\r\n# a = [1, 2, 3]\r\n# b = {'one', 'two', 'three'}\r\n# c = (4.0, 5.4, 6.7)\r\n# print(tuple(zip(a, b, c)))\r\n\r\n# stud = {}\r\n# n = int(input(\"Количество студентов: \"))\r\n# s = 0\r\n# for i in range(n):\r\n#     sname = input(str(i+1) + \"- й студент: \")\r\n#     point = int(input(\"Балл: \"))\r\n#     stud[sname] = point\r\n#     s += point\r\n#\r\n# avrg = s / n\r\n# print(stud)\r\n# print(round(avrg, 2))\r\n#\r\n# for i in stud:\r\n#     if stud[i] > avrg:\r\n#         print(i)\r\n\r\n\r\n# dict_one = {'name': 'Igor', 'last_name': 'Doe', 'job': 'Consultant'}\r\n# dict_two = {'name': 'Irina', 'last_name': 'Smith', 'job': 'Manager'}\r\n#\r\n# for (k1, v1), (k2, v2) in zip(dict_one.items(), dict_two.items()):\r\n#     print(k1, v1)\r\n#     print(k2, v2)\r\n\r\n# pairs = [(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')]\r\n# # print(dict(pairs))\r\n# a, b = zip(*pairs)\r\n# print(a)\r\n# print(b)\r\n\r\n\r\n# letters = ['b', 'a', 'd', 'c']\r\n# numbers = [3, 1, 2, 4]\r\n# data = list(zip(letters, numbers))\r\n# print(data)\r\n# data.sort()\r\n# print(data)\r\n# data1 = list(zip(numbers, letters))\r\n# data1.sort()\r\n# print(data1)\r\n# data2 = dict(data1)\r\n# print(data2)\r\n# data3 = sorted(data2.items())\r\n# print(data3)\r\n\r\n\r\n# one = {'apple': 0.4, 'orange': 0.35, 'pepper': 0.5}\r\n# two = {'pepper': 0.2, 'onion': 0.55}\r\n#\r\n# print({**two, **one})  # распаковка словаря\r\n#\r\n# for k, v in {**two, **one}.items():\r\n#     print(k, \"->\", v)\r\n\r\n# {\r\n#   'apple': 0.4, 'orange': 0.35,\r\n#   'pepper': 0.2, 'onion': 0.55\r\n# }\r\n\r\n\r\n# data = [2, 5, 3, 4, 1, 5]\r\n# for i in data:\r\n#     print(i, end=\" \")\r\n# print()\r\n# for i in range(6):\r\n#     print(i, end=\" \")\r\n# print()\r\n# colors = ['red', 'green', 'blue']\r\n# i = 1\r\n# for color in colors:\r\n#     print(i, \") \", color, sep=\"\")\r\n#     i += 1\r\n\r\n\r\n# colors = ['red', 'green', 'blue']\r\n# for num, val in enumerate(colors, 1):\r\n#     print(num, \") \", val, sep=\"\")\r\n\r\n\r\n# n = {i: i + 1 for i in range(10, 18)}\r\n# print(n)\r\n#\r\n# for i, (j, v) in enumerate(n.items(), 100):\r\n#     print(i, \": \", j, \" -> \", v, sep=\"\")\r\n\r\n# a = [1, 2, 3]\r\n# b = [*a, 4, 5, 6]\r\n# print(b)\r\n\r\n\r\n# def func(*args):\r\n#     res = 0\r\n#     for i in args:\r\n#         res += i\r\n#     return res\r\n#\r\n#\r\n# print(func(2, 3, 4, 5, 1))\r\n# print(func(2, 4, 7))\r\n# print(func())\r\n\r\n\r\n# def to_dict(*lst):\r\n#     return {i: i for i in lst}\r\n#\r\n#\r\n# print(to_dict(1, 2, 3, 4))\r\n# print(to_dict('gray', (2, 17), 3.11, -4))\r\n\r\n\r\n# def ch(*args):\r\n#     res = []\r\n#     sr = sum(args) / len(args)\r\n#     print(sr)\r\n#\r\n#     for num in args:\r\n#         if num < sr:\r\n#             res.append(num)\r\n#     return res\r\n#\r\n#\r\n# print(ch(1, 2, 3, 4, 5, 6, 7, 8, 9))\r\n# print(ch(3, 6, 1, 9, 5))\r\n\r\n# def func(a, *args):\r\n#     return a, args\r\n#\r\n#\r\n# print(func(1))\r\n# print(func(1, 2, 3, 'abc'))\r\n\r\n# def print_scores(student, *scores):\r\n#     print(\"Student Name:\", student)\r\n#     for score in scores:\r\n#         print(score)\r\n#\r\n#\r\n# print_scores(\"Джонатан\", 100, 95, 88, 92, 99)\r\n# print_scores(\"Роман\", 96, 20, 33)\r\n\r\n\r\n# def func(**kwargs):\r\n#     return kwargs\r\n#\r\n#\r\n# print(func(a=1, b=2, c=3))\r\n# print(func())\r\n# print(func(d=\"python\"))\r\n\r\n\r\n# def db(**data):\r\n#     my_dict.update(data)\r\n#\r\n#\r\n# my_dict = {'one': 'first'}\r\n# db(k1=22, k2=31, k3=11, k4=91)\r\n# db(name='Bob', age=31, weight=61, eyes_color='gray')\r\n# print(my_dict)\r\n\r\n\r\n# def func(aa, *args, d=0, **kwargs):\r\n#     return aa, args, d, kwargs\r\n#\r\n#\r\n# print(func(\"one\", 5, 9, 7, 8, 1, a=1, d=6, b=2, c=3))\r\n\r\n\r\n# Области видимости\r\n\r\n# name = \"Tom\"  # глобальная переменная\r\n# surname = None\r\n#\r\n#\r\n# def hi():\r\n#     global name, surname\r\n#     name = \"Sam\"  # локальная переменная\r\n#     surname = \"Johnson\"\r\n#     print(\"Hello\", name, surname)\r\n#\r\n#\r\n# def bye():\r\n#     print(\"Good bye\", name, surname)\r\n#\r\n#\r\n# print(name)\r\n# hi()\r\n# bye()\r\n# print(name)\r\n\r\n# i = 5\r\n# arg = 5\r\n#\r\n#\r\n# def func(arg=i):\r\n#     print(arg)\r\n#\r\n#\r\n# i = 6\r\n# arg = 6\r\n# func()  # 5\r\n\r\n# x = 7\r\n#\r\n#\r\n# def add_five(a):\r\n#     # x = 2\r\n#\r\n#     def add_two():\r\n#         return a + x\r\n#\r\n#     return add_two()\r\n#\r\n#\r\n# print(add_five(3))\r\n\r\n# import builtins\r\n#\r\n# name = dir(builtins)\r\n#\r\n# for t in name:\r\n#     print(t)\r\n\r\n# min1 = [5, 6, 8, 9, 7]\r\n# print(max(min1))\r\n# a = [5, 6, 7, 8, 8]\r\n# print(min(a))\r\n\r\n\r\n# def outer_func(who):\r\n#     def inner_func():\r\n#         print(\"Hello,\", who)\r\n#\r\n#     inner_func()\r\n#\r\n#\r\n# outer_func('World!')\r\n\r\n\r\n# def fun1():\r\n#     a = 6\r\n#\r\n#     def fun2(b):\r\n#         a = 4\r\n#         print(\"a + b =\", a + b)\r\n#\r\n#     print(\"a =\", a)\r\n#     fun2(4)\r\n#\r\n#\r\n# fun1()\r\n\r\n\r\n# x = 25\r\n# t = 0\r\n#\r\n#\r\n# def fn():\r\n#     global t\r\n#     a = 30  # 35\r\n#\r\n#     def inner():\r\n#         nonlocal a\r\n#         a = 35\r\n#         print(\"nonlocal: \", a)\r\n#\r\n#     inner()\r\n#     t = a\r\n#\r\n#\r\n# fn()\r\n#\r\n# z = x + t  # 25 + 35 = 60\r\n# print(z)\r\n# x = 5\r\n#\r\n#\r\n# def fn1():\r\n#     x = 25\r\n#\r\n#     def fn2():\r\n#         x = 33\r\n#\r\n#         def fn3():\r\n#             nonlocal x\r\n#             x = 55\r\n#\r\n#         fn3()\r\n#         print('fn2.x =', x)\r\n#\r\n#     fn2()\r\n#     print('fn1.x =', x)\r\n#\r\n#\r\n# fn1()\r\n\r\n\r\n# def outer(a1, b1, a2, b2):\r\n#     a = 0\r\n#     b = 0\r\n#\r\n#     def inner():\r\n#         nonlocal a, b\r\n#         a = a1 + a2\r\n#         b = b1 + b2\r\n#\r\n#     inner()\r\n#     return [a, b]\r\n#\r\n#\r\n# res = outer(2, 3, -1, 4)\r\n# print(res)\r\n\r\n# Замыкания\r\n\r\n# def outer(n):\r\n#     def inner(x):\r\n#         return n + x\r\n#\r\n#     return inner\r\n#\r\n#\r\n# add1 = outer(5)\r\n# print(add1(10))\r\n#\r\n# add2 = outer(6)\r\n# print(add2(10))\r\n#\r\n# print(outer(7)(10))\r\n\r\n\r\n# def func1():\r\n#     a = 1\r\n#     b = 'line'\r\n#     c = [1, 2, 3]\r\n#\r\n#     def func2():\r\n#         nonlocal a, b\r\n#         c.append(4)\r\n#         a = a + 1\r\n#         b = b + \"1\"\r\n#         return a, b, c\r\n#\r\n#     return func2\r\n#\r\n#\r\n# func = func1()\r\n# print(func())\r\n\r\n\r\n# def func(city):\r\n#     s = 0\r\n#\r\n#     def func1():\r\n#         nonlocal s\r\n#         s += 1\r\n#         print(city, s)\r\n#\r\n#     return func1\r\n#\r\n#\r\n# res1 = func('Москва')\r\n# res1()\r\n# res1()\r\n#\r\n# res2 = func('Сочи')\r\n# res2()\r\n# res2()\r\n#\r\n# res1()\r\n\r\n# students = {\r\n#     'Alice': 98,\r\n#     'Bob': 67,\r\n#     'Chris': 85,\r\n#     'David': 75,\r\n#     'Ella': 54,\r\n#     'Fiona': 35,\r\n#     'Grace': 69\r\n# }\r\n#\r\n#\r\n# def make_classifier(lower, upper):\r\n#     def classify_student(exam):\r\n#         return {k: v for k, v in exam.items() if lower <= v < upper}\r\n#\r\n#     return classify_student\r\n#\r\n#\r\n# A = make_classifier(80, 100)\r\n# B = make_classifier(70, 80)\r\n# C = make_classifier(50, 70)\r\n# D = make_classifier(0, 50)\r\n#\r\n# print(\"A =\", A(students))\r\n# print(\"B =\", B(students))\r\n# print(\"C =\", C(students))\r\n# print(\"D =\", D(students))\r\n\r\n\r\n# def func(a, b):\r\n#     def add():\r\n#         return a + b\r\n#\r\n#     def sub():\r\n#         return a - b\r\n#\r\n#     def mul():\r\n#         return a * b\r\n#\r\n#     def replace():\r\n#         pass\r\n#\r\n#     replace.add = add\r\n#     replace.sub = sub\r\n#     replace.mul = mul\r\n#     return replace\r\n#\r\n#\r\n# obj1 = func(5, 2)\r\n# obj1()\r\n# print(obj1.add())\r\n# print(obj1.sub())\r\n# print(obj1.mul())\r\n\r\n\r\n# Lambda (анонимная функция)\r\n\r\n# print((lambda x, y: x + y)(1, 2))\r\n# print((lambda x, y: x + y)('a', 'b'))\r\n# func = lambda x, y: x + y\r\n# print(func(1, 2))\r\n# print(func('a', 'b'))\r\n#\r\n#\r\n# def summa(x, y):\r\n#     return x + y\r\n#\r\n#\r\n# print(summa(1, 2))\r\n# print(summa('a', 'b'))\r\n\r\n# print((lambda x, y: x ** 2 + y ** 2)(2, 5))\r\n\r\n\r\n# s = lambda a=1, b=2, c=3: a + b + c\r\n#\r\n# print(s())\r\n# print(s(10, 20, 30))\r\n\r\n# s = lambda *args: args\r\n#\r\n# print(s(1, 2, 3, 4))\r\n# print(s(10, 20, 30))\r\n\r\n# f = (lambda x: x * 2,\r\n#      lambda x: x * 3,\r\n#      lambda x: x * 4)\r\n#\r\n# for i in f:\r\n#     print(i('abc_'))\r\n# def inc1(n):\r\n#     def add_two(x):\r\n#         return x + n\r\n#\r\n#     return add_two\r\n#\r\n#\r\n# def inc(n):\r\n#     return lambda x: x + n\r\n\r\n# inc = (lambda n: (lambda x: x + n))\r\n#\r\n#\r\n# print(inc(42)(1))\r\n# print(inc(42)(3))\r\n# f = inc(42)\r\n# print(f(1))\r\n# print(f(3))\r\n\r\n# sum3 = (lambda x: lambda y: lambda z: x + y + z)\r\n# print(sum3(2)(4)(6))\r\n\r\n# d = {'b': 15, 'a': 10, 'c': 4}\r\n# lst = list(d.items())\r\n# print(lst)\r\n# lst.sort(key=lambda i: i[1])\r\n# print(lst)\r\n\r\n# def func(i):\r\n#     return i[1]\r\n#\r\n#\r\n# d = {'b': 15, 'a': 10, 'c': 4}\r\n# lst = list(d.items())\r\n# print(lst)\r\n# lst.sort(key=func)\r\n# print(lst)\r\n\r\n# players = [\r\n#     {'name': 'Антон', 'last name': 'Бирюков', 'rating': 9},\r\n#     {'name': 'Алексей', 'last name': 'Бодня', 'rating': 10},\r\n#     {'name': 'Федор', 'last name': 'Сидоров', 'rating': 4},\r\n#     {'name': 'Михаил', 'last name': 'Семенов', 'rating': 6}\r\n# ]\r\n#\r\n# res = sorted(players, key=lambda item: item['last name'])\r\n# print(res)\r\n# res = sorted(players, key=lambda item: item['rating'])\r\n# print(res)\r\n# res = sorted(players, key=lambda item: item['rating'], reverse=True)\r\n# print(res)\r\n\r\n# a = [(lambda x, y: x + y), (lambda x, y: x - y), (lambda x, y: x * y), (lambda x, y: x / y)]\r\n# b = a[3](15, 5)\r\n# print(b)\r\n\r\n# a = {'one': lambda x: x - 1, 'two': lambda x: x + 3, 'three': lambda x: x}\r\n# b = [-3, 10, 0, 2]\r\n# for i in b:\r\n#     if i < 0:\r\n#         print(a['two'](i))\r\n#     elif i > 0:\r\n#         print(a['one'](i))\r\n#     else:\r\n#         print(a['three'](i))\r\n\r\n# d = {\r\n#     1: lambda: print('Понедельник'),\r\n#     2: lambda: print('Вторник'),\r\n#     3: lambda: print('Среда'),\r\n#     4: lambda: print('Четверг'),\r\n#     5: lambda: print('Пятница'),\r\n#     6: lambda: print('Суббота'),\r\n#     7: lambda: print('Воскресенье')\r\n# }\r\n#\r\n# d[4]()\r\n\r\n# print((lambda a, b: a if a > b else b)(15, 13))\r\n\r\n# print((lambda a, b, c: a if a < b and a < c else b if b < c else c)(9, 18, 15))\r\n# print((lambda a, b, c: min((a, b, c)))(10, -1, 2))\r\n\r\n# map(func, iterable)\r\n\r\n# def mult(t):\r\n#     return t * 2\r\n#\r\n#\r\n# lst = [1, 8, 12, -5, -10]\r\n# #\r\n# # lst2 = list(map(mult, lst))\r\n# #\r\n# # print(lst2)\r\n#\r\n# print(list(map(lambda t: t * 2, lst)))\r\n\r\n# t = (2.88, -1.75, 100.55)\r\n#\r\n# print(tuple(map(lambda x: int(x), t)))\r\n# print(tuple(map(int, t)))\r\n\r\n# areas = [3.456789, 5.578945, 7.45689, 45.45678, 78.985423, 1.245678]\r\n#\r\n# print(list(map(round, areas, range(1, 9))))\r\n\r\n\r\n# print(round(3.456789, 2))\r\n\r\n# st = ['a', 'b', 'c', 'd', 'e']\r\n# num = [1, 2, 3, 4, 5]\r\n#\r\n# print(list(map(lambda x, y: (x, y), st, num)))\r\n# print(dict(map(lambda x, y: (x, y), st, num)))\r\n\r\n\r\n# l1 = [1, 2, 3]\r\n# l2 = [4, 5, 6]\r\n# print(list(map(lambda x, y: x + y, l1, l2)))\r\n\r\n# filter(func, iterable)\r\n\r\n# t = ('abcd', 'abc', 'cdefg', 'def', 'ghi')\r\n#\r\n# print(tuple(filter(lambda s: len(s) == 3, t)))\r\n\r\n# b = [66, 90, 68, 59, 76, 60, 80, 88, 74, 81, 65]\r\n# res = list(filter(lambda s: s > 75, b))\r\n# print(res)\r\n\r\n\r\n# import random\r\n#\r\n#\r\n# lst = [random.randint(1, 30) for _ in range(10)]\r\n# lst_new = list(filter(lambda x: 9 < x < 21, lst))\r\n# print(lst)\r\n# print('[10; 20] =', lst_new)\r\n\r\n# m = list(map(lambda x: x ** 2, filter(lambda x: x % 2, range(10))))  # [1,3,5,7,9]\r\n# print(m)\r\n# m1 = [x ** 2 for x in range(10) if x % 2]\r\n# print(m1)\r\n\r\n# Декораторы\r\n\r\n# def hello():\r\n#     return \"Hello, I am func 'hello'\"\r\n#\r\n#\r\n# def super_func(func):\r\n#     print(\"Hello, I am func 'super_func'\")\r\n#     print(func())\r\n#\r\n#\r\n# super_func(hello)\r\n\r\n# def hello():\r\n#     return \"Hello, I am func 'hello'\"\r\n#\r\n#\r\n# test = hello\r\n# print(test())\r\n\r\n\r\n# def my_decorator(func):\r\n#     def func_wrapper():\r\n#         print('Code before')\r\n#         func()\r\n#         print('Code after')\r\n#\r\n#     return func_wrapper\r\n#\r\n#\r\n# def func_test():\r\n#     print(\"Hello, I am func 'func_test'\")\r\n#\r\n#\r\n# test = my_decorator(func_test)\r\n# test()\r\n\r\n\r\n# def my_decorator(func):  # декорирующая функция\r\n#     def func_wrapper():\r\n#         print('************')\r\n#         func()\r\n#         print('============\\n')\r\n#\r\n#     return func_wrapper\r\n#\r\n#\r\n# @my_decorator  # декоратор\r\n# def func_test():  # декорируемая функция\r\n#     print(\"Hello, I am func 'func_test'\")\r\n#\r\n#\r\n# @my_decorator\r\n# def bye():\r\n#     print(\"Hello, I am func 'bye'\")\r\n#\r\n#\r\n# func_test()\r\n# bye()\r\n\r\n# def bold(fn):\r\n#     def wrap():\r\n#         return \"<b>\" + fn() + \"</b>\"\r\n#\r\n#     return wrap\r\n#\r\n#\r\n# def italic(fn):\r\n#     def wrap():\r\n#         return \"<i>\" + fn() + \"</i>\"\r\n#\r\n#     return wrap\r\n#\r\n#\r\n# @bold\r\n# @italic\r\n# def hello():\r\n#     return \"text\"\r\n#\r\n#\r\n# print(hello())\r\n# def cnt(fn):\r\n#     count = 0  # 2\r\n#\r\n#     def wrap():\r\n#         nonlocal count\r\n#         count = count + 1\r\n#         fn()\r\n#         print(\"Вызов функции:\", count)\r\n#\r\n#     return wrap\r\n#\r\n#\r\n# @cnt\r\n# def hello():\r\n#     print(\"Hello\")\r\n#\r\n#\r\n# hello()\r\n# hello()\r\n# hello()\r\n# hello()\r\n# hello()\r\n# hello()\r\n# hello()\r\n\r\n# def args_decorator(fn):\r\n#     def wrap(arg1, arg2):\r\n#         print(\"Данные:\", arg1, arg2)\r\n#         fn(arg1, arg2)\r\n#\r\n#     return wrap\r\n#\r\n#\r\n# @args_decorator\r\n# def print_full_name(first, last):\r\n#     print(\"Меня зовут\", first, last)\r\n#\r\n#\r\n# print_full_name(\"Ирина\", \"Ветрова\")\r\n\r\n\r\n# def args_decorator(fn):\r\n#     def wrap(*args, **kwargs):\r\n#         print(\"args:\", args)\r\n#         print(\"kwargs:\", kwargs)\r\n#         # print(\"1)\", args[0])\r\n#         # print(\"kw)\", kwargs['study'])\r\n#         fn(*args, **kwargs)\r\n#\r\n#     return wrap\r\n#\r\n#\r\n# @args_decorator\r\n# def print_full_name(a, b, c, study=\"Python\"):\r\n#     print(a, b, c, \"изучают\", study, \"\\n\")\r\n#\r\n#\r\n# print_full_name(\"Ирина\", \"Елизавета\", \"Светлана\", study=\"JavaScript\")\r\n# print_full_name(\"Владимир\", \"Екатерина\", \"Виктор\")\r\n# def decor(args1, args2):\r\n#     def args_dec(fn):\r\n#         def wrap(x, y):\r\n#             print(args1, x, args2, y, \"=\", end=' ')\r\n#             fn(x, y)\r\n#\r\n#         return wrap\r\n#     return args_dec\r\n#\r\n#\r\n# @decor(\"Сумма:\", \"+\")\r\n# def summa(a, b):\r\n#     print(a + b)\r\n#\r\n#\r\n# @decor(\"Разность:\", \"-\")\r\n# def sub(a, b):\r\n#     print(a - b)\r\n#\r\n#\r\n# summa(5, 2)\r\n# sub(5, 2)\r\n\r\n\r\n# def multiply(n1):\r\n#     def mult(fn):\r\n#         def wrap(n2):\r\n#             return n1 * fn(n2)\r\n#\r\n#         return wrap\r\n#     return mult\r\n#\r\n#\r\n# @multiply(3)\r\n# def return_num(num):\r\n#     return num\r\n#\r\n#\r\n# print(return_num(5))\r\n\r\n# def typed(*args, **kwargs):\r\n#     def wrapper(fn):\r\n#         def wrap(*f_args, **f_kwargs):\r\n#             for i in range(len(args)):\r\n#                 if type(f_args[i]) != args[i]:\r\n#                     raise TypeError(\"Некорректный тип данных\")\r\n#             for k in kwargs:\r\n#                 if type(f_kwargs[k]) != kwargs[k]:\r\n#                     raise TypeError(\"Некорректный тип данных именованного параметра\")\r\n#             return fn(*f_args, **f_kwargs)\r\n#\r\n#         return wrap\r\n#\r\n#     return wrapper\r\n#\r\n#\r\n# @typed(int, int, int)\r\n# def typed_fn(x, y, z):\r\n#     return x * y * z\r\n#\r\n#\r\n# @typed(str, str, str)\r\n# def typed_fn2(x, y, z):\r\n#     return x + y + z\r\n#\r\n#\r\n# @typed(str, str, z=int)\r\n# def typed_fn3(x, y, z=\"Hello! \"):\r\n#     return (x + y) * z\r\n#\r\n#\r\n# print(typed_fn(3, 4, 5))\r\n# # print(typed_fn('3', '4', \"Dog\"))\r\n# print(typed_fn2(\"Hello\", \"World\", \"!\"))\r\n# # print(typed_fn2(3, 4, 5))\r\n# print(typed_fn3(\"Hello_\", \"World   \", z=5))  # TypeError: can't multiply sequence by non-int of type 'str'\r\n\r\n# def args_decorator(tx=None, decorator_text=''):\r\n#     def my_decorator(func):\r\n#         def wrap(*args):\r\n#             print(decorator_text, end=\"\")\r\n#             func(*args)\r\n#\r\n#         return wrap\r\n#\r\n#     if tx is None:\r\n#         return my_decorator\r\n#     else:\r\n#         return my_decorator(tx)\r\n#\r\n#\r\n# @args_decorator\r\n# def hello_world(text):\r\n#     print(text)\r\n#\r\n#\r\n# @args_decorator(decorator_text=\"Hello, \")\r\n# def hello_world2(text):\r\n#     print(text)\r\n#\r\n#\r\n# hello_world('Hi!')\r\n# hello_world2('world!')\r\n\r\n\r\n# print(int(\"18\"))\r\n# print(int(18.5))\r\n# print(int(\"18.5\"))\r\n\r\n# print(int(\"100\", 2))\r\n# print(int(\"100\", 8))\r\n# print(int(\"100\", 10))\r\n# print(int(\"100\", 16))\r\n\r\n# print(bin(18))  # 0b10010\r\n# print(oct(18))  # 0o22\r\n# print(hex(18))  # 0x12\r\n\r\n# print(0b10010)\r\n# print(0o22)\r\n# print(0xFF)\r\n\r\n#  #FF0000\r\n#  rgb(255, 0, 0)\r\n\r\n\r\n# def decor(func):\r\n#     def wrap(*args):\r\n#         print(\"Среднее арифметическое чисел\", str(args)[1:-1], \"=\", func(*args) / len(args))\r\n#     return wrap\r\n#\r\n#\r\n# @decor\r\n# def summ(*args):\r\n#\r\n#     print(\"Сумма чисел\", str(args)[1:-1], \"=\", sum(args))\r\n#\r\n#     return sum(args)\r\n#\r\n#\r\n# summ(2, 3, 3, 4)\r\n\r\n\r\n# q = 'Pyt'\r\n# w = 'hon'\r\n# e = q + w\r\n# print(e)\r\n# # print(e * 3)\r\n# #\r\n# # print(e in \"I am learn Python\")\r\n# # print(e[5::-1])\r\n# # print(e[3])\r\n# e = e[:3] + \"t\" + e[4:]\r\n# print(e)\r\n\r\n\r\n# def changeCharToStr(s, c_old, c_new):\r\n#     s2 = \"\"\r\n#     i = 0\r\n#     while i < len(s):\r\n#         if s[i] == c_old:\r\n#             s2 += c_new\r\n#         else:\r\n#             s2 += s[i]\r\n#         i += 1\r\n#     return s2\r\n#\r\n#\r\n# str1 = \"Я изучаю Nython. Мне нравится Nython. Nython очень интересный язык программирования.\"\r\n# str2 = changeCharToStr(str1, \"N\", \"P\")\r\n# print(str1)\r\n# print(str2)\r\n\r\n# \"Я изучаю Python. Мне нравится Python. Python очень интересный язык программирования.\"\r\n\r\n\r\n# print(\"Привет\")\r\n# print(u\"Привет\")\r\n\r\n# print('C:\\\\program\\\\file\\\\')\r\n# print(r'C:\\program\\file' + \"\\\\\")\r\n# print(r'C:\\program\\file\\\\'[:-1])\r\n\r\n# print(b'a1b2c3')\r\n# print(b'a1b2c3'[1])\r\n# print(b'\\xff\\xfe\\xfd')\r\n# print(b'\\xff\\xfe\\xfd'[1])\r\n\r\n# name = \"Дмитрий\"\r\n# age = 25\r\n# print(\"Меня зовут \", name, \". Мне \", age, \" лет.\", sep=\"\")\r\n# print(\"Меня зовут \" + name + \". Мне \" + str(age), \"лет.\")\r\n#\r\n# print(f\"Меня зовут {name}. Мне {age} лет.\")\r\n# from geometry import pi\r\n\r\n\r\n# print(f\"Значение числа pi: {round(pi, 2)}\")\r\n# print(f\"Значение числа pi: {pi:.2f}\")\r\n\r\n# x = 10\r\n# y = 5\r\n# print(f\"{x=}\\n{y=}\")\r\n# print(f\"{x} x {y} / 2 = {x * y / 2}\")\r\n\r\n# a = 74\r\n# print(f\"{{{{{a}}}}}\")\r\n\r\n# dir_name = \"my_doc\"\r\n# file_name = \"file.txt\"\r\n# print(fr\"home\\{dir_name}\\{file_name}\")\r\n# print(f\"home\\\\{dir_name}\\\\{file_name}\")\r\n# print(r\"home\\{dir_name}\\{file_name}\")\r\n# print(\"home\\\\\" + dir_name + \"\\\\\" + file_name)\r\n\r\n\r\n# s = \"\"\"<div>\r\n#     <a href=\"#\">content</a>\r\n# </div>\"\"\"\r\n# s1 = '''<div>\r\n#     <a href=\"#\">content</a>\r\n# </div>'''\r\n# print(s)\r\n# print(s1)\r\n\r\n# def square(n):\r\n#     \"\"\"Принимает число n, возвращает квадрат числа n\"\"\"\r\n#     return n ** 2\r\n#\r\n#\r\n# print(square(5))\r\n# print(square.__doc__)\r\n\r\n\r\n# import geometry as m\r\n#\r\n#\r\n# def cylinder(r, h):\r\n#     \"\"\"\r\n#     Вычисляет площадь цилиндра.\r\n#\r\n#     Вычисляет площадь цилиндра на основании заданной высоты и радиуса основания\r\n#\r\n#     :param r: положительное число, радиус основания цилиндра\r\n#     :param h: положительное число, высота цилиндра\r\n#     :return: положительное число, площадь цилиндра\r\n#     \"\"\"\r\n#     return 2 * m.pi * r * (r + h)\r\n#\r\n#\r\n# print(cylinder(2, 4))\r\n# print(cylinder.__doc__)\r\n\r\n# print(ord('a'))\r\n# print(ord('#'))\r\n# print(ord('к'))\r\n#\r\n# while True:\r\n#     n = input(\"-> \")\r\n#     if n != \"-1\":\r\n#         print(ord(n))\r\n#     else:\r\n#         break\r\n\r\n# my_str = \"Test string for mes\"\r\n# arr = [ord(x) for x in my_str]\r\n# print(\"ASCII коды:\", arr)\r\n# # mean = round(sum(arr) / len(arr))\r\n# # arr.insert(0, mean)\r\n# arr = [int(sum(arr) / len(arr))] + arr\r\n# print(\"Среднее арифметическое:\", arr)\r\n# arr += [x for x in [ord(x) for x in (input(\"-> \" + \" \")[:6])] if x not in arr]\r\n# # arr += [ord(x) for x in (input(\"-> \" + \" \")[:6]) if x not in arr]\r\n# print(arr)\r\n#\r\n# if arr[-1] in arr[:-1]:\r\n#     print(\"Количество последних элементов:\", arr.count(arr[-1]) - 1)\r\n# arr.sort(reverse=True)\r\n# print(arr)\r\n\r\n# print(chr(101))\r\n# print(chr(84))\r\n# print(chr(1085))\r\n\r\n# a = 122\r\n# b = 97\r\n#\r\n# print(*(chr(x) for x in range(a, b + 1)) if a < b else (chr(x) for x in range(b, a + 1)))\r\n#\r\n# q = [chr(x) for x in range(min(a, b), max(a, b) + 1)]\r\n# print(*q)\r\n\r\n\r\n# https://github.com/\r\n\r\n# print(\"Hello, world!\")\r\n#\r\n# print(\"Данные в склонированном репозитории\")\r\n\r\n# print('apple' == 'Apple')\r\n# print('apple' > 'Apple')\r\n# print(ord('a'))  # 97\r\n# print(ord('A'))  # 65\r\n\r\n# from random import randint\r\n#\r\n# SHORTEST = 8\r\n# LONGEST = 16\r\n# MIN_ASCII = 33\r\n# MAX_ASCII = 126\r\n#\r\n#\r\n# def random_password():\r\n#     random_length = randint(SHORTEST, LONGEST)\r\n#     res = ''\r\n#     for i in range(random_length):\r\n#         random_char = chr(randint(MIN_ASCII, MAX_ASCII))\r\n#         res += random_char\r\n#     return res\r\n#\r\n#\r\n# print(\"Ваша случайный пароль:\", random_password())\r\n\r\n# print(dir(str))\r\n\r\n# s = \"hello, WORLD! I am learning Python.\"\r\n# # print(s.capitalize())  # приводит первую букву в верхний регистр, остальные в нижний\r\n# # print(s.lower())  # преобразуют все символы в нижний регистр\r\n# # print(s.upper())  # преобразуют все символы в верхний регистр\r\n# # print(s.swapcase())  # меняет регистр на противоположный\r\n# #\r\n# # print(s.count('o'))  # подсчитывает количество вхождений подстроки в строки (количество заданных символов)\r\n# # print(s.lower().count('o', 0, -5))\r\n# #\r\n# # print(s.find(\"Python\"))  # возвращает первый индекс, который соответствует заданной подстроке. Если совпадений нет,\r\n# # # то вернется значение -1\r\n# #\r\n# # print(s.find(\"Python\", -3))\r\n# #\r\n# # print(s.index(\"Python\"))  # возвращает первый индекс, который соответствует заданной подстроке. Если совпадений нет,\r\n# # # то возвращается ошибка ValueError\r\n#\r\n#\r\n# # s = 'один два'\r\n# # ind = s.find(' ')\r\n# # print(ind)\r\n# # s = s[ind + 1:] + ' ' + s[:ind]\r\n# # print(s)\r\n#\r\n# # s = 'ab12c59p7dq'\r\n# # digits = []\r\n# # for symbol in s:\r\n# #     if '1234567890'.find(symbol) != -1:\r\n# #         digits.append(int(symbol))\r\n# # print(digits)\r\n#\r\n# # print(s.rfind(\"l\"))\r\n# # print(s.rindex(\"l\"))\r\n# # print(s.find(\"l\", 4))\r\n#\r\n# # a = \"Nearly all web services collect this basic information from users in their server logs. \" \\\r\n# #     \"However, Python Tutor does not collect any personally identifiable information from its users.\"\r\n# #\r\n# # n = 'f'\r\n# #\r\n# # if a.count(n) == 1:\r\n# #     print(a.find(n))\r\n# # elif a.count(n) >= 2:\r\n# #     print(a.find(n), a.rfind(n))\r\n#\r\n# # s = \"I am learning Python, hello, WORLD\"\r\n# # ind1 = s.find('h')\r\n# # print(ind1)\r\n# # ind2 = s.rfind('h')\r\n# # print(ind2)\r\n# # res = s[:ind1] + s[ind2 + 1:]\r\n# # print(res)\r\n#\r\n# print(s.startswith(\"he\"))  # с чего начинается стока\r\n# print(s.endswith(\"Python.\"))  # чем заканчивается стока\r\n# возвращает True или False\r\n\r\n# print('abc123'.isalnum())  # строка состоит из букв и цифр\r\n# print('abc?123'.isalnum())\r\n# print(''.isalnum())\r\n#\r\n# print('abcABC'.isalpha())  # строка состоит только из букв (любой регистр)\r\n# print('abc123'.isalpha())\r\n#\r\n# print('aa$123'.isdigit())\r\n# print('123'.isdigit())  # строка состоит только из цифр\r\n\r\n# print('py'.center(10, \"-\"))\r\n# print('py'.center(7, \"=\"))\r\n\r\n# print(\"    py\".lstrip())  # удаление пробельных символов слева\r\n# print(\"py    \".rstrip())  # удаление пробельных символов справа\r\n# print(\"     py    \".strip())  # удаление пробельных символов справа и слева одновременно\r\n#\r\n# print('https://www.python.org'.lstrip('/:pths'))\r\n# print('py.$$$;'.rstrip(';$.'))\r\n#\r\n# print('https://www.python.orgw'.strip('/:pths.orgw'))\r\n# print('https://www.python.orgw'.lstrip('/:pths').rstrip('.orgw'))\r\n\r\n\r\n# str1 = \"Я изучаю Nython. Мне нравится Nython. Nython очень интересный язык программирования.\"\r\n# print(str1.replace(\"Nython\", \"Python\", 2))  # заменяет вхождение подстроки в строку\r\n\r\n\r\n# s = \"-\"\r\n# seq = ('a', 'b', 'c')\r\n# print(s.join(seq))\r\n#\r\n# print(\"..\".join(['1', '99']))\r\n# print(\"..\".join(['1', '2']))\r\n#\r\n# print(\":\".join(\"Hello\"))  # объединяет итерируемую последовательность в строку через символ разделитель\r\n\r\n\r\n# print(\"Строка разделенная пробелами\".split())\r\n# print('www.python.org.ru'.split(\".\", 2))\r\n# print('1,2,3'.split(\",\"))\r\n# print('www.python.org.ru'.rsplit(\".\", 2))\r\n\r\n# a = input(\"-> \").split()\r\n# print(a)\r\n# a = list(map(int, a))\r\n# print(a)\r\n\r\n\r\n# s = \"В строке заменить пробелы звездочками\"\r\n# s = s.split()\r\n# print(s)\r\n# s = \"*\".join(s)\r\n# print(s)\r\n\r\n\r\n# s = input('FIO: ').split()\r\n# print(s)\r\n# print(f'{s[0]} {s[1][0]}. {s[2][0]}.')\r\n\r\n\r\n# Регулярные выражения\r\n\r\nimport re\r\n\r\n# s = \"Я ищу совпадения в 2023 году. И я их найде в 2 счёта. 98_12.\"\r\n# # reg = r'\\.'\r\n# # print(re.findall(reg, s))  # возвращает список, содержащий все совпадения с заданным шаблоном\r\n# #\r\n# # print(re.search(reg, s))  # возвращает данные по соответствию первого совпадения с шаблоном\r\n# # # print(re.search(reg, s).span())\r\n# # # print(re.search(reg, s).start())\r\n# # # print(re.search(reg, s).end())\r\n# # # print(re.search(reg, s).group())\r\n# #\r\n# # print(re.match(reg, s))  # поиск по заданному шаблону в начале строки\r\n#\r\n# # print(re.split(reg, s, 1))  # разбивает строку на список подстрок\r\n# #\r\n# # print(re.sub(reg, \"!\", s, 1))  # поиск и замена\r\n# reg = r'[^0-9]'\r\n# print(re.findall(reg, s))\r\n# print(ord(\"Я\"))\r\n# print(ord(\"а\"))\r\n\r\n# s1 = \"Час в 24-часовом формате от 00 до 23. 2021-06-15T21:59. Минуты, в диапазоне от 00 до 59. 2021-06-15T01:09\"\r\n# r1 = '[0-2][0-9]:[0-5][0-9]'\r\n# print(re.findall(r1, s1))\r\n\r\n# reg = r'20*'\r\n# print(re.findall(reg, s))\r\n\r\n# d = \"Цифры: 7, +17, -42, 0.013, 0.3\"\r\n# print(re.findall(r'[+-]?[\\d.]+', d))\r\n\r\n\r\n# d = \"05-03-1987 # Дата рождения\"\r\n#\r\n# print(\"Дата рождения:\", re.sub('#.*', '', d))\r\n\r\n\r\n# Дата рождения: 05.03.1987\r\n\r\n\r\n# print(\"Дата рождения:\", re.sub('-', '.', re.sub('#.*', '', d)))  # 05-03-1987\r\n\r\n# d = \"author=Пушкин А.С.; title  = Евгений Онегин; price =200; year= 1831\"\r\n# # r1 = r'\\w+\\s*=\\s*\\w+\\s*[\\w.]*'\r\n# r1 = r'\\w+\\s*=[^;]+'\r\n# print(re.findall(r1, d))\r\n\r\n# s1 = \"12 сентября 2023 года 568561\"\r\n# r1 = r\"\\d{2,4}\"\r\n# print(re.findall(r1, s1))\r\n\r\n\r\n# s1 = \"+7 499 456-45-78, +74994564578, 7 (499) 456 45 78, 74994564578\"\r\n# r1 = r\"\\+?7\\d{10}\"\r\n# print(re.findall(r1, s1))\r\n\r\n# reg = r'\\w+\\.$'\r\n# print(re.findall(reg, s))\r\n\r\n# print(re.findall(r'\\w+', '12 + й'))\r\n# print(re.findall(r'\\w+', '12 + й', flags=re.ASCII))\r\n\r\n# text = \"hello world\"\r\n# print(re.findall(r'\\w\\+', text, re.DEBUG))\r\n# reg = 'я'\r\n# print(re.findall(reg, s, re.IGNORECASE))\r\n\r\n# text = \"\"\"\r\n# one\r\n# two\r\n# \"\"\"\r\n# print(re.findall(r\"one.\\w+\", text))\r\n# # print(re.findall(r\"one$\", text))\r\n# # print(re.findall(r\"one$\", text, re.MULTILINE))\r\n# print(re.findall(r\"one.\\w+\", text, re.DOTALL))\r\n\r\n# print(re.findall(r\"\"\"\r\n# [\\w-]+  # part1\r\n# @       # @\r\n# [\\w-]+  # part2\r\n# \"\"\", \"test@mail.ru\", re.VERBOSE))\r\n\r\n# text = \"\"\"Python,\r\n# python,\r\n# PYTHON\r\n# \"\"\"\r\n# reg = \"(?im)^python\"\r\n# print(re.findall(reg, text))\r\n\r\n\r\n# def validate_name(name):\r\n#     # return re.search(r'^[\\w-]{3,16}$', name).group()\r\n#     return re.findall(r'^[\\w-]{3,16}$', name)[0]\r\n#\r\n#\r\n# print(validate_name('Python_master'))\r\n# print(validate_name('Pyt'))\r\n\r\n# s1 = \"123456@i.ru, 123_456@ru.name.ru, login@i.ru, логин-1@i.ru, login.3@i.ru, login.3-67@i.ru, 1login@ru.name.ru\"\r\n# # reg = r'[\\w.-]+@\\w*\\.?\\w*\\.?\\w*'\r\n# reg = r'[\\w.-]+@[\\w.-]+[a-z]{2,3}'\r\n# print(re.findall(reg, s1))\r\n\r\n# text = \"<body>Пример жадного соответствия регулярных выражений</body>\"\r\n# print(re.findall('<.*?>', text))\r\n#\r\n# # *?, +?, ??  - \"ленивое соответствие\" - захватывает минимально возможное число символов\r\n# # {m,n}?, {,n}?, {m,}?\r\n#\r\n# s1 = \"12 сентября 2023 года 568561\"\r\n# r1 = r\"\\d{3,}?\"\r\n# print(re.findall(r1, s1))\r\n\r\n# t = \"<p>Изображение <img alt='картинка' src='bg.jpg'> - фон страницы</p>\"\r\n# # reg = r'<img.*?>'\r\n# reg = r'<img\\s+[^>]*?src\\s*=\\s*[^>]+>'\r\n# print(re.findall(reg, t))\r\n\r\n\r\n# t = \"Ольга и Виталий отлично учатся\"\r\n# reg = \"Петр|Ольга|Виталий\"\r\n# print(re.findall(reg, t))\r\n\r\n# t = \"int = 4, float = 4.0, double = 8.0f\"\r\n# reg = r\"(?:int|double)\\s*=\\s*\\d+[\\w.]*\"\r\n# print(re.findall(reg, t))\r\n\r\n\r\n# (?:  ) - скобки не сохраняющие (группирующие)\r\n\r\n# def validate_name(name):\r\n#     return re.findall(r'^[a-z\\d@_-]{6,18}$', name, re.IGNORECASE)\r\n#\r\n#\r\n# print(validate_name('_my-p@sswOrd'))\r\n\r\n\r\n# s1 = '127.0.0.1'  # 192.168.255.255\r\n# # reg = r'\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3}'\r\n# reg = r'(?:\\d{1,3}.){3}\\d{1,3}'\r\n# print(re.findall(reg, s1))\r\n\r\n\r\n# s1 = \"Word2016, PS6, AI5\"\r\n# reg = r'(([a-z]+)(\\d+))'\r\n# print(re.findall(reg, s1, re.IGNORECASE))\r\n# print(ord('Я'))\r\n# print(ord('а'))\r\n\r\n\r\n# s1 = \"5 + 7*2 -4\"\r\n# reg = r'\\s*([+*-])\\s*'\r\n# print(re.split(reg, s1))\r\n\r\n\r\n# a = '28-08-2021'\r\n# reg = r'^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])-(19[0-9][0-9]|20[0-9][0-9])$'\r\n# print(re.findall(reg, a))\r\n# print(re.search(reg, a))\r\n\r\n\r\n# s = \"Я ищу совпадения в 2023 году. И я их найде в 2 счёта.\"\r\n# reg = r'([0-9]+)\\s(\\D+)'\r\n# print(re.findall(reg, s)[0])\r\n# print(re.search(reg, s).group())\r\n# m = re.search(reg, s)\r\n# print(m[0])\r\n# print(m[1])\r\n# print(m[2])\r\n\r\n\r\n# text = \"\"\"\r\n# Самара\r\n# Москва\r\n# Тверь\r\n# Уфа\r\n# Казань\r\n# \"\"\"\r\n# count = 0\r\n#\r\n#\r\n# def repl_find(m):\r\n#     global count\r\n#     count += 1\r\n#     return f\"<option value='{count}'>{m.group(1)}</option>\\n\"\r\n#\r\n#\r\n# print(re.findall(r'\\s*(\\w+)\\s*', text))\r\n# print(re.sub(r'\\s*(\\w+)\\s*', repl_find, text))\r\n\r\n# s = \"<p>Изображения <img src=\\\"bg.jpg\\\"> - фон страницы</p>\"\r\n# reg = r\"<img\\s+[^>]*src=(['\\\"])(.+)\\1>\"\r\n# print(re.findall(reg, s)[0][1])\r\n\r\n# s = \"<p>Изображения <img src=\\\"bg.jpg\\\"> - фон страницы</p>\"\r\n# reg = r\"<img\\s+[^>]*src=(?P<q>['\\\"])(.+)(?P=q)>\"\r\n# print(re.findall(reg, s))\r\n\r\n# (?P<name>) (?P=name)\r\n\r\n# s = \"Самолет прилетает 10/23/2023. Будем вас рады видеть после 10/24/2023.\"  # 24.10.2023\r\n# reg = r\"(\\d{2})/(\\d{2})/(\\d{4})\"\r\n# print(re.sub(reg, r\"\\2.\\1.\\3\", s))\r\n\r\n# s = \"yandex.com and yandex.ru\"\r\n# reg = r'(([a-z0-9\\-]{2,}\\.)+[a-z]{2,4})'\r\n# print(re.sub(reg, r\"http://\\1\", s))\r\n\r\n# Рекурсия\r\n\r\n# def elevator(n):\r\n#     if n == 0:\r\n#         print(\"Вы в подвале\")\r\n#         return\r\n#     print(\"->\", n)\r\n#     elevator(n - 1)  # 5 4 3 2 1\r\n#     print(n, end=\" \")\r\n#\r\n#\r\n# n1 = int(input(\"На каком вы этаже: \"))  # 5\r\n# elevator(n1)\r\n\r\n\r\n# def sum_list(lst):\r\n#     res = 0\r\n#     for i in lst:\r\n#         res += i\r\n#     return res\r\n#\r\n#\r\n# print(sum_list([1, 3, 5, 7, 9]))  # 25\r\n\r\n\r\n# def sum_list(lst):  # [9]\r\n#     if len(lst) == 1:\r\n#         print(lst, \"=> lst[0]:\", lst[0])\r\n#         return lst[0]  # 9\r\n#     else:\r\n#         print(lst, \"=> lst[0]:\", lst[0])\r\n#         return lst[0] + sum_list(lst[1:])  # 1 + 3 + 5 + 7 +\r\n#\r\n#\r\n# print(sum_list([1, 3, 5, 7, 9]))  # 25\r\n\r\n\r\n# def to_str(n, base):\r\n#     convert = \"0123456789ABCDEF\"\r\n#     if n < 0:\r\n#         convert = convert[0] + convert[:0:-1]  # 0FEDCBA987654321\r\n#         if n * (-1) < base:\r\n#             return \"-\" + convert[n]\r\n#         else:\r\n#             return to_str((n // base) + 1, base) + convert[(n % base)]\r\n#     else:\r\n#         if n < base:\r\n#             return convert[n]\r\n#         else:\r\n#             return to_str(n // base, base) + convert[(n % base)]\r\n#\r\n#\r\n# print(to_str(254, 2))\r\n\r\n# print(hex(-255))\r\n# print(int('FF', 16))\r\n\r\n\r\n# convert = \"0123456789ABCDEF\"\r\n# convert = convert[0] + convert[:0:-1]\r\n# print(convert)\r\n\r\n\r\n# def negative(a):\r\n#     if not a:  # len(a) == 0   a == []\r\n#         return 0\r\n#     else:\r\n#         count = negative(a[1:])\r\n#         if a[0] < 0:\r\n#             count += 1\r\n#         return count\r\n#\r\n#\r\n# lst = [-2, 3, 8, -11, -4, 6]\r\n#\r\n# print(lst)\r\n# n = negative(lst)\r\n# print(n)  # 3\r\n\r\n\r\n# def validate_phone(number):\r\n#     reg = r\"^\\+?7\\s*\\(?\\d{3}\\)?\\s*[\\d\\s-]{7,9}$\"\r\n#     return re.search(reg, number).group()\r\n#     # return re.findall(reg, number)[0]\r\n#\r\n#\r\n# print(validate_phone('+7 499 456-45-78'))\r\n# print(validate_phone('+74994564578'))\r\n# print(validate_phone('7 (499) 456 45 78'))\r\n# print(validate_phone('7 (499) 456-45-78'))\r\n\r\n\r\n# names = [\"Adam\", [\"Bob\", [\"Chet\", \"Cat\", [\"aaa\"]], \"Bard\", \"Bert\"], \"Alex\", [\"Bea\", \"Bill\"], \"Ann\"]\r\n#\r\n#\r\n# def count_items(item_list):\r\n#     count = 0\r\n#     for name in item_list:\r\n#         if isinstance(name, list):\r\n#             n = name\r\n#             # i = 0\r\n#             while len(n) != 0:\r\n#                 if isinstance(n[0], list):\r\n#                     n = n[0]\r\n#                     # count += len(n)\r\n#                 else:\r\n#                     count += 1\r\n#                 n = n[1:]\r\n#\r\n#         else:\r\n#             count += 1  # 1\r\n#\r\n#     print(count)\r\n#\r\n#\r\n# count_items(names)\r\n# # print(names[0])\r\n# # print(names[1])\r\n# # print(isinstance(names[0], list))\r\n# # print(isinstance(names[1], list))\r\n# # print(names[1][1][0])\r\n# # print(isinstance(names[1][1][0], list))\r\n# # print(len(names))\r\n# print(names)\r\n\r\n\r\n# def count_items(item_list):\r\n#     count = 0\r\n#     for item in item_list:\r\n#         if isinstance(item, list):\r\n#             count += count_items(item)\r\n#         else:\r\n#             count += 1\r\n#     return count\r\n\r\n\r\n# print(count_items(names))\r\n# def count_items(item_list):\r\n#     count = 0\r\n#     for name in item_list:\r\n#         if isinstance(name, str):\r\n#             count += 1\r\n#         elif isinstance(name, list):\r\n#             for n in name:\r\n#                 if isinstance(n, str):\r\n#                     count += 1\r\n#                 elif isinstance(n, list):\r\n#                     count += len(n)\r\n#     print(count)\r\n\r\n\r\n# names = [\"Adam\", [\"Bob\", [\"Chet\", \"Cat\"], \"Bard\", \"Bert\"], \"Alex\", [\"Bea\", \"Bill\"], \"Ann\"]\r\n# print(names)\r\n\r\n\r\n# def count_items(item_list):\r\n#     count = 0\r\n#     stack = []\r\n#     current_list = item_list\r\n#     i = 0\r\n#     while True:\r\n#         if i == len(current_list):\r\n#             if current_list == item_list:\r\n#                 return count\r\n#             else:\r\n#                 current_list, i = stack.pop()\r\n#                 i += 1\r\n#         if isinstance(current_list[i], list):\r\n#             stack.append([current_list, i])\r\n#             current_list = current_list[i]\r\n#             i = 0\r\n#         count += 1\r\n#         i += 1\r\n#\r\n#\r\n# print(count_items(names))\r\n\r\n# names = [\"Adam\", [\"Bob\", [\"Chet\", \"Cat\"], \"Bard\", \"Bert\"], \"Alex\", [\"Bea\", \"Bill\"], \"Ann\"]\r\n# print(names)\r\n#\r\n#\r\n# def union(s):\r\n#     if not s:\r\n#         return s\r\n#     if isinstance(s[0], list):\r\n#         return union(s[0]) + union(s[1:])\r\n#     return s[0:1] + union(s[1:])  # [\"Adam\"] + [\"Adam\"], [\"Bob\", Chet\", \"Cat\"]\r\n#\r\n#\r\n# print(union(names))\r\n\r\n# def remove(text):  #\r\n#     if not text:\r\n#         return \"\"\r\n#     if text[0] == \"\\t\" or text[0] == \" \" or text[0] == \"$\":\r\n#         return remove(text[1:])\r\n#     else:\r\n#         return text[0] + remove(text[1:])  # HelloWorld! + ''\r\n#\r\n#\r\n# print(remove(\" $Hello\\tWorld$! \"))\r\n\r\n\r\n# Линейный (последовательный) поиск\r\n\r\n# def seq_search(s, item):\r\n#     pos = 0  #\r\n#     found = False  #\r\n#\r\n#     while pos < len(s) and not found:\r\n#         if s[pos] == item:\r\n#             found = True\r\n#         else:\r\n#             pos += 1\r\n#     return found\r\n#\r\n#\r\n# lst = [54, 26, 93, 17, 77, 31, 44, 55, 20, 65]\r\n# print(seq_search(lst, 93))  # True\r\n# print(seq_search(lst, 28))  # False\r\n\r\n\r\n# def seq_search(s, item):\r\n#     pos = 0  # 3\r\n#     found = False  #\r\n#     stop = False  # True\r\n#     while pos < len(s) and not found and not stop:\r\n#         if s[pos] == item:\r\n#             found = True\r\n#         else:\r\n#             if s[pos] > item:\r\n#                 stop = True\r\n#             else:\r\n#                 pos += 1\r\n#     return found\r\n#\r\n#\r\n# lst = [54, 26, 93, 17, 77, 31, 44, 55, 20, 65]\r\n# lst.sort()  # [17, 20, 26, 31, 44, 54, 55, 65, 77, 93]\r\n# print(lst)\r\n# print(seq_search(lst, 93))  # True\r\n# print(seq_search(lst, 28))  # False\r\n\r\n# Бинарный поиск\r\n\r\n# def binary_search(s, item):\r\n#     first = 0  # 0\r\n#     last = len(s) - 1  # 0 - 1 = -1\r\n#     found = False\r\n#\r\n#     while first <= last and not found:\r\n#         midpoint = (first + last) // 2  # 3 // 2 = 1\r\n#         if s[midpoint] == item:\r\n#             found = True\r\n#         else:\r\n#             if item < s[midpoint]:\r\n#                 last = midpoint - 1\r\n#             else:\r\n#                 first = midpoint + 1\r\n#\r\n#     return found\r\n#\r\n#\r\n# lst = [17, 20, 26, 31, 44, 54, 55, 65, 77, 93]\r\n# print(binary_search(lst, 26))\r\n# print(binary_search(lst, 28))\r\n\r\n\r\n# Алгоритмы сортировки\r\n# \"Пузырьковая сортировка\"\r\nfrom random import randint\r\nimport time\r\n\r\n# def bubble(array):\r\n#     for i in range(len(array) - 1):\r\n#         for j in range(len(array) - i - 1):\r\n#             if array[j] > array[j + 1]:\r\n#                 array[j], array[j + 1] = array[j + 1], array[j]\r\n#\r\n#\r\n# a = [randint(1, 100) for i in range(10000)]\r\n#\r\n# # print(a)\r\n# start = time.monotonic()\r\n# bubble(a)\r\n# # print(a)\r\n# res = time.monotonic() - start\r\n# print(round(res, 3), \"sec\")\r\n\r\n\r\n# def binary_search(s, item):\r\n#     found = False\r\n#     first = 0\r\n#     last = len(s) - 1\r\n#     while first <= last and not found:\r\n#         midpoint = (first + last) // 2\r\n#         if s[midpoint] == item:\r\n#             found = True\r\n#         else:\r\n#             if item < s[midpoint]:\r\n#                 last = midpoint - 1\r\n#             else:\r\n#                 first = midpoint + 1\r\n#\r\n#     return found\r\n#\r\n#\r\n# a = [randint(1, 100) for i in range(10)]\r\n# print(a)\r\n# a.sort()\r\n# print(a)\r\n# n = int(input(\"Введите число: \"))\r\n# if binary_search(a, n):\r\n#     print(f\"Число {n} в списке присутствует\")\r\n# else:\r\n#     print(f\"Число {n} в списке отсутствует\")\r\n\r\n\r\n# def merge_sort(a):\r\n#     n = len(a)\r\n#     if n < 2:\r\n#         return a\r\n#\r\n#     left = merge_sort(a[:n // 2])\r\n#     right = merge_sort(a[n // 2:n])\r\n#\r\n#     i = j = 0\r\n#     res = []\r\n#\r\n#     while i < len(left) or j < len(right):\r\n#         if not i < len(left):\r\n#             res.append(right[j])\r\n#             j += 1\r\n#         elif not j < len(right):\r\n#             res.append(left[i])\r\n#             i += 1\r\n#         elif left[i] < right[j]:\r\n#             res.append(left[i])\r\n#             i += 1\r\n#         else:\r\n#             res.append(right[j])\r\n#             j += 1\r\n#     return res\r\n#\r\n#\r\n# array = [randint(1, 100) for i in range(10000)]\r\n# # print(array)\r\n# start = time.monotonic()\r\n# array = merge_sort(array)\r\n# # print(array)\r\n# res = time.monotonic() - start\r\n# print(round(res, 3), \"sec\")\r\n\r\n\r\n# Сортировка Шелла\r\n# def shell_sort(s):\r\n#     gap = len(s)\r\n#\r\n#     while gap > 0:\r\n#         for val in range(gap, len(s)):\r\n#             cur_val = s[val]\r\n#             pos = val\r\n#\r\n#             while pos >= gap and s[pos - gap] > cur_val:\r\n#                 s[pos] = s[pos - gap]\r\n#                 pos -= gap\r\n#                 s[pos] = cur_val\r\n#\r\n#         gap //= 2\r\n#     return s\r\n#\r\n#\r\n# a = [randint(1, 100) for i in range(10000)]\r\n# # print(a)\r\n# start = time.monotonic()\r\n# shell_sort(a)\r\n# # print(a)\r\n# res = time.monotonic() - start\r\n# print(round(res, 3), \"sec\")\r\n\r\n# def quick_sort(a):\r\n#     if len(a) > 1:\r\n#         x = a[(len(a) - 1) // 2]\r\n#         low = [i for i in a if i < x]\r\n#         eq = [i for i in a if i == x]\r\n#         hi = [i for i in a if i > x]\r\n#         a = quick_sort(low) + eq + quick_sort(hi)\r\n#     return a\r\n#\r\n#\r\n# lst = [randint(1, 100) for i in range(10000)]\r\n# # print(lst)\r\n# start = time.monotonic()\r\n# # lst = quick_sort(lst)\r\n# # print(lst)\r\n# lst.sort()\r\n# res = time.monotonic() - start\r\n# print(res, \"sec\")\r\n\r\n# Файлы\r\n\r\n# f = open(r'D:\\Python212\\212\\text1.txt')\r\n# print(f)\r\n# print(*f)\r\n# print(f.mode)\r\n# print(f.name)\r\n# print(f.encoding)\r\n# f.close()\r\n# print(f.closed)\r\n\r\n\r\n# f = open('text1.txt', 'r')\r\n# print(f.read(3))\r\n# print(f.read())\r\n# f.close()\r\n\r\n\r\n# f = open('test.txt', 'r')\r\n# print(f.readline())\r\n# print(f.readline(8))\r\n# print(f.readline())\r\n# print(f.readline())\r\n# f.close()\r\n\r\n# f = open('test.txt', 'r')\r\n# print(f.readlines(16))\r\n# print(f.readlines())\r\n#\r\n# f.close()\r\n\r\n# f = open('test.txt', 'r')\r\n# for line in f:\r\n#     print(line)\r\n#\r\n# f.close()\r\n#\r\n#\r\n# fail = open('test.txt')\r\n# count_lines = len(fail.readlines())\r\n# print(count_lines)\r\n\r\n\r\n# f = open('xyz.txt', 'w')\r\n# # f.write('Hello\\nWorld\\n')\r\n# # lines = ['This is line 1', 'This is line 2']\r\n# lines = [str(i ** 5) for i in range(1, 20)]\r\n# print(lines)\r\n# # f.writelines(lines)\r\n# for index in lines:\r\n#     f.write(index + \"\\t\")\r\n# f.close()\r\n\r\n# f = open(\"text2.txt\", \"w\")\r\n# f.write(\"Замена строки в текстовом файле;\\nизменить строку в списке;\\nзаписать список в файл;\")\r\n# f.close()\r\n#\r\n# f = open(\"text2.txt\", \"r\")\r\n# read_f = f.readlines()\r\n# print(read_f)\r\n# for i in range(len(read_f)):\r\n#     if read_f[i] == \"изменить строку в списке;\\n\":\r\n#         read_f[i] = \"Hello World!\\n\"\r\n# print(read_f)\r\n# f.close()\r\n#\r\n# f = open(\"text2.txt\", \"w\")\r\n# f.writelines(read_f)\r\n# f.close()\r\n\r\n# f = open(\"text1.txt\", \"r\")\r\n# print(f.read(3))\r\n# print(f.tell())\r\n# print(f.seek(1))\r\n# print(f.read())\r\n# print(f.tell())\r\n# f.close()\r\n\r\n# f = open(\"text1.txt\", \"r+\")\r\n# print(f.write(\"I am learning Python\"))\r\n# print(f.seek(3))\r\n# print(f.write(\"-new string-\"))\r\n# print(f.tell())\r\n# f.close()\r\n\r\n\r\n# with open('text3.txt', 'w+') as f:\r\n#     print(f.write('0123456789\\n123456789'))\r\n#\r\n#\r\n# with open('text3.txt', 'r') as f:\r\n#     for line in f:\r\n#         print(line[:6])\r\n\r\n\r\n# file_name = \"res_1.txt\"\r\n# lst = [4.5, 2.8, 1.0, 0.3, 4.33, 7.777]\r\n#\r\n#\r\n# def get_line(lt):\r\n#     lt = list(map(str, lt))\r\n#     print(lt)\r\n#     return '\\t'.join(lt)\r\n#\r\n#\r\n# with open(file_name, 'w') as f:\r\n#     f.write(get_line(lst))\r\n#\r\n# print(\"Done!\")\r\n\r\n# file_name = \"res_1.txt\"\r\n#\r\n# numbers = [4.5, 2.8, 3.9, 1.0, 0.3, 4.33, 7.777]\r\n#\r\n#\r\n# def get_string(l: list) -> str:\r\n#     return '\\t'.join(map(str, l))\r\n#\r\n#\r\n# with open(file_name, 'r+', encoding='utf-8') as file:\r\n#     # text = get_string(numbers)\r\n#     # file.write(text)\r\n#     nums = file.read()\r\n#     print(nums)\r\n#     nums_list = list(map(float, nums.split('\\t')))\r\n#     print(nums_list)\r\n#     print(len(nums_list))\r\n#     print(sum(nums_list))\r\n\r\n# def longest_world(file):\r\n#     with open(file, 'r') as text:\r\n#         w = text.read().split()\r\n#         max_length = len(max(w, key=len))\r\n#         res = [word for word in w if len(word) == max_length]\r\n#         if len(res) == 1:\r\n#             return res[0]\r\n#         return res\r\n#\r\n#\r\n# file_name = \"res_1.txt\"\r\n# print(longest_world(file_name))\r\n\r\n\r\n# text = \"Строка №1\\nСтрока №2\\nСтрока №3\\nСтрока №4\\nСтрока №5\\nСтрока №6\\nСтрока №7\\nСтрока №8\\nСтрока №9\\nСтрока №10\\n\"\r\n#\r\n# with open('one.txt', 'w') as f:\r\n#     f.write(text)\r\n\r\n\r\n# read_file = 'one.txt'\r\n# write_file = 'two.txt'\r\n# with open(read_file, 'r') as fr, open(write_file, 'w') as fw:\r\n#     for line in fr:\r\n#         line = line.replace(\"Строка\", \"Линия - \")\r\n#         fw.write(line)\r\n\r\n\r\n# Модуль OS (OS.PATH)\r\n\r\nimport os\r\nimport time\r\n\r\n# import os.path\r\n\r\n# print(os.getcwd())  # возвращает путь к текущей директории\r\n# print(os.listdir())  # возвращает список папок и файлов, находящихся в текущей директории\r\n# print(os.listdir(\"../..\"))  #\r\n\r\n# os.mkdir(\"folder\")  # создает директорию по указанному пути\r\n# os.makedirs(\"nested1/nested2/nested3\")  # создает не только конечную директорию, но и промежуточные папки\r\n\r\n# os.remove(\"xyz.txt\")  # удаление файла\r\n\r\n# os.rename(\"nested1\", \"test\")  # переименование папок и файлов\r\n\r\n# os.rename(\"text.txt\", \"test/text1.txt\")  # все промежуточные директории должны существовать обязательно\r\n# os.renames(\"text1.txt\", \"text/text.txt\")  # создаются промежуточные директории\r\n\r\n# os.rmdir(\"folder\")  # удаление пустой директории\r\n\r\n\r\n# for root, dirs, files in os.walk(\"test\", topdown=False):  # topdown=True - сверху вниз, topdown=False - снизу вверх\r\n#     print(\"Root:\", root)\r\n#     print(\"Sub_dirs:\", dirs)\r\n#     print(\"Files:\", files)\r\n\r\n# def remove_empty_dirs(root_tree):\r\n#     print(f\"Удаление пустых директорий в ветви {root_tree}\")\r\n#     print(\"-\" * 50)\r\n#     for root, dirs, files in os.walk(root_tree):\r\n#         if not os.listdir(root):\r\n#             os.rmdir(root)\r\n#             print(f\"Директория {root} удалена.\")\r\n#     print(\"-\" * 50)\r\n#\r\n#\r\n# remove_empty_dirs(\"test\")\r\n\r\n# os.path\r\n\r\n# print(os.path.split(r'D:\\Python212\\212\\test\\nested2\\nested3\\xyz.txt')[1])  # разбивает путь на кортеж (head, tail)\r\n# print(os.path.dirname(r'D:\\Python212\\212\\test\\nested2\\nested3\\xyz.txt'))  # имя директории\r\n# print(os.path.basename(r'D:\\Python212\\212\\test\\nested2\\nested3\\xyz.txt'))  # имя файла\r\n\r\n# print(os.path.join(r'D:\\Python212', '212', 'test', 'xyz.txt'))  # соединяет один или несколько компонентов пути с учетом особенностей OS\r\n\r\n# dirs = [r'Work\\F1', r'Work\\F2\\F21']\r\n# for d in dirs:\r\n#     os.makedirs(d)\r\n\r\n# files = {\r\n#     'Work': ['w.txt'],\r\n#     r'Work\\F1': ['f11.txt', 'f12.txt', 'f13.txt'],\r\n#     r'Work\\F2\\F21': ['f211.txt', 'f212.txt']\r\n# }\r\n#\r\n# for d, file in files.items():\r\n#     for f in file:\r\n#         file_path = os.path.join(d, f)\r\n#         # print(file_path)\r\n#         open(file_path, 'w').close()\r\n#\r\n# file_with_text = [r'Work\\w.txt', r'Work\\F1\\f12.txt', r'Work\\F2\\F21\\f211.txt', r'Work\\F2\\F21\\f212.txt']\r\n#\r\n# for file in file_with_text:\r\n#     with open(file, 'w') as f:\r\n#         f.write(f\"some sample text for {file} file\")\r\n#\r\n#\r\n# def print_tree(root, topdown):\r\n#     print(f\"Обход {root} {'сверху вниз' if topdown else 'снизу вверх'}\")\r\n#     for root, dirs, fl in os.walk(root, topdown=topdown):\r\n#         print(root)\r\n#         print(dirs)\r\n#         print(fl)\r\n#     print('-' * 50)\r\n#\r\n#\r\n# print_tree('Work', topdown=False)\r\n# print_tree('Work', True)\r\n\r\n\r\n# print(os.path.exists(r'D:\\Python212\\212\\test\\nested2\\nested3\\xyz1.txt'))  # возвращает True, если путь указывает на\r\n# существующий путь в файловой системе\r\n\r\n# path = r'D:\\Python212\\212\\venv\\Scripts\\python.exe'\r\n# k_size = os.path.getsize(path)  # размер файла\r\n# print(k_size // 1024)\r\n# print(os.path.getmtime(path))  # время последнего изменения файла\r\n# print(os.path.getatime(path))  # время последнего доступа к файлу\r\n# t = os.path.getctime(path)  # время создания файла\r\n# print(time.strftime(\"%d.%m.%Y, %H:%M:%S\", time.localtime(t)))\r\n\r\n\r\n# file_path = r'test\\nested2'\r\n#\r\n# if os.path.exists(file_path):\r\n#     dirs, name = os.path.split(file_path)\r\n#     atime = os.path.getmtime(file_path)\r\n#     print(f\"{name} ({dirs}) - last access time {time.strftime('%d.%m.%Y, %H:%M:%S', time.localtime(atime))}\")\r\n# else:\r\n#     print(f\"File {file_path} does not exist!\")\r\n\r\n# print(os.path.isfile(file_path))  # возвращает True, если указанный путь является файлом\r\n# print(os.path.isdir(file_path))  # возвращает True, если указанный путь является директорией\r\n\r\n\r\n# dir_name = r'test\\nested2'\r\n#\r\n# obj = os.listdir(dir_name)\r\n# print(obj)\r\n#\r\n# for i in obj:\r\n#     p = os.path.join(dir_name, i)\r\n#     # print(p)\r\n#     if os.path.isfile(p):\r\n#         print(f'{i} - file - {os.path.getsize(p)} bytes')\r\n#     elif os.path.isdir(p):\r\n#         print(f'{i} - dir')\r\n\r\n# OOП (объектно-ориентированное программирование)\r\n\r\n# class Point:\r\n#     \"\"\"Класс для предоставления координат точек на плоскости\"\"\"\r\n#     x = 1\r\n#     y = 1\r\n#\r\n#\r\n# print(dir(Point))\r\n# print(Point.__doc__)\r\n# class Point3D:\r\n#     pass\r\n#\r\n#\r\n# class Point:\r\n#     x = 1\r\n#     y = 1  # 100\r\n#\r\n#\r\n# p1 = Point()\r\n# p1.x = 410\r\n# p1.y = 200\r\n# Point.y = 100\r\n# print(p1.x, p1.y)\r\n# print(p1.__dict__)\r\n# print(Point.__dict__)\r\n# print(type(p1))\r\n# print(isinstance(p1, Point3D))\r\n\r\n\r\n# p2 = Point()\r\n# print(p2.x, p2.y)\r\n#\r\n# print(id(Point))\r\n# print(id(p1))\r\n# print(id(p2))\r\n\r\n\r\n# class Point:\r\n#     x = 1\r\n#     y = 1\r\n#\r\n#     def set_coord(self, x, y):\r\n#         self.x = x\r\n#         self.y = y\r\n#         print(self.__dict__)\r\n#\r\n#\r\n# p1 = Point()\r\n# # p1.x = 5\r\n# # p1.y = 10\r\n#\r\n# p1.set_coord(5, 10)\r\n# Point.set_coord(p1, 8, 12)\r\n# # print(p1.__dict__)\r\n#\r\n# p2 = Point()\r\n# # p2.x = 20\r\n# # p2.y = 30\r\n# p2.set_coord(20, 30)\r\n# print(p2.__dict__)\r\n\r\n# class Human:\r\n#     name = \"name\"\r\n#     birthday = \"00.00.0000\"\r\n#     phone = '00-00-00'\r\n#     country = \"country\"\r\n#     city = \"city\"\r\n#     address = 'street, house'\r\n#\r\n#     def print_info(self):\r\n#         print(\" Персональные данные \".center(40, \"*\"))\r\n#         print(f\"Имя: {self.name}\\nДата рождения: {self.birthday}\\n\"\r\n#               f\"Номер телефона: {self.phone}\\nСтрана: {self.country}\\n\"\r\n#               f\"Город: {self.city}\\nДомашний адрес: {self.address}\")\r\n#         print(\"=\" * 40)\r\n#\r\n#     def input_info(self, first_name, birthday, phone, country, city, address):\r\n#         self.name = first_name\r\n#         self.birthday = birthday\r\n#         self.phone = phone\r\n#         self.city = city\r\n#         self.country = country\r\n#         self.address = address\r\n#\r\n#     def set_name(self, name):\r\n#         self.name = name\r\n#\r\n#     def get_name(self):\r\n#         return self.name\r\n#\r\n#\r\n# h1 = Human()\r\n# h1.print_info()\r\n# h1.input_info(\"Юля\", \"23.05.1986\", \"45-46-98\", \"Россия\", \"Москва\", \"Чистопрудный бульвар, 1А\")\r\n# h1.print_info()\r\n# h1.set_name(\"Анна\")\r\n# print(h1.get_name())\r\n\r\n\r\n# class Person:\r\n#     skill = 10\r\n#\r\n#     # name = \"\"\r\n#     # surname = \"\"\r\n#     def __init__(self, name, surname):\r\n#         self.name = name\r\n#         self.surname = surname\r\n#         print(f\"Инициализатор {self.name} {self.surname}\")\r\n#\r\n#     def __del__(self):\r\n#         print(\"Удаление экземпляра\\n\\n\")\r\n#\r\n#     def print_info(self):\r\n#         print(\"Данные о сотруднике:\", self.name, self.surname)\r\n#\r\n#     def add_skill(self, k):\r\n#         self.skill += k\r\n#         print(f\"Квалификация сотрудника: {self.name}\", self.skill, \"\\n\")\r\n#\r\n#\r\n# p1 = Person(\"Viktor\", \"Reznik\")\r\n# p1.print_info()\r\n# p1.add_skill(3)\r\n# del p1\r\n#\r\n# p2 = Person(\"Anna\", \"Dolgih\")\r\n# p2.print_info()\r\n# p2.add_skill(2)\r\n\r\n\r\n# class Point:\r\n#     count = 0  # 3\r\n#\r\n#     def __init__(self, x, y):\r\n#         self.x = x\r\n#         self.y = y\r\n#         Point.count += 1\r\n#\r\n#\r\n# p1 = Point(5, 10)\r\n# print(p1.count)\r\n# print(\"count =\", Point.count)\r\n# p2 = Point(15, 20)\r\n# print(p2.count)\r\n# print(\"count =\", Point.count)\r\n# p3 = Point(23, 39)\r\n# print(p3.count)\r\n# print(\"count =\", Point.count)\r\n# print(p1.count)\r\n\r\n\r\n# class Robot:\r\n#     k = 0\r\n#\r\n#     def __init__(self, name):\r\n#         self.name = name\r\n#         print(f\"Инициализация {self.name}\")\r\n#         Robot.k += 1\r\n#\r\n#     def __del__(self):\r\n#         print(self.name, \"выключается!\")\r\n#         Robot.k -= 1\r\n#         if Robot.k == 0:\r\n#             print(self.name, \"был последним\")\r\n#         else:\r\n#             print(\"Работающих роботов осталось:\", Robot.k)\r\n#\r\n#     def say_hi(self):\r\n#         print(\"Приветствую! Меня зовут:\", self.name)\r\n#\r\n#\r\n# droid1 = Robot('R2-D2')\r\n# droid1.say_hi()\r\n# Robot.say_hi(droid1)\r\n# print(\"Численность роботов:\", Robot.k)\r\n#\r\n# droid2 = Robot('C-3PO')\r\n# droid2.say_hi()\r\n# print(\"Численность роботов:\", Robot.k)\r\n#\r\n# print()\r\n# del droid1\r\n# del droid2\r\n# print(\"Численность роботов:\", Robot.k)\r\n\r\n# class Point:\r\n#     def __init__(self, x, y):\r\n#         self.__x = self.__y = 0\r\n#         if Point.__check_value(x) and Point.__check_value(y):\r\n#             self.__x = x\r\n#             self.__y = y\r\n#\r\n#     def __check_value(z):\r\n#         if isinstance(z, int) or isinstance(z, float):\r\n#             return True\r\n#         return False\r\n#\r\n#     def set_coord(self, x, y):  # установить координаты\r\n#         if Point.__check_value(x) and Point.__check_value(y):\r\n#             self.__x = x\r\n#             self.__y = y\r\n#         else:\r\n#             print(\"Координаты должны быть числами\")\r\n#\r\n#     def get_coord(self):  # получить координаты\r\n#         return self.__x, self.__y\r\n#\r\n#     def set_x(self, x):\r\n#         if Point.__check_value(x):\r\n#             self.__x = x\r\n#         else:\r\n#             print(f\"Координата X должны быть числом\")\r\n#\r\n#     def get_x(self):\r\n#         return self.__x\r\n#\r\n#     def set_y(self, y):\r\n#         if Point.__check_value(y):\r\n#             self.__y = y\r\n#         else:\r\n#             print(f\"Координата Y должны быть числом\")\r\n#\r\n#     def get_y(self):\r\n#         return self.__y\r\n#\r\n#\r\n# p1 = Point(5, 10)\r\n# # print(p1.get_coord())\r\n# # p1.set_coord(1.5, 7)\r\n# # # p1.__x = 100\r\n# # print(p1.get_coord())\r\n# # print(p1.__x)\r\n# # p1.y = 'abc'\r\n# # print(p1.x, p1.y)\r\n# # p1.set_x(8)\r\n# # p1.set_y(16)\r\n# # print(p1.get_x())\r\n# # print(p1.get_y())\r\n# print(p1.__dict__)\r\n# print(p1._Point__x)\r\n# p1._Point__x = 111\r\n# print(p1.__dict__)\r\n\r\n\r\n# class Point:\r\n#     __slots__ = [\"__x\", \"__y\", \"z\"]\r\n#\r\n#     def __init__(self, x, y):\r\n#         self.__x = self.__y = 0\r\n#         if Point.__check_value(x) and Point.__check_value(y):\r\n#             self.__x = x\r\n#             self.__y = y\r\n#\r\n#     def __check_value(z):\r\n#         if isinstance(z, int) or isinstance(z, float):\r\n#             return True\r\n#         return False\r\n#\r\n#     def set_coord(self, x, y):  # установить координаты\r\n#         if Point.__check_value(x) and Point.__check_value(y):\r\n#             self.__x = x\r\n#             self.__y = y\r\n#         else:\r\n#             print(\"Координаты должны быть числами\")\r\n#\r\n#     def get_coord(self):  # получить координаты\r\n#         return self.__x, self.__y\r\n#\r\n#     def set_x(self, x):\r\n#         if Point.__check_value(x):\r\n#             self.__x = x\r\n#         else:\r\n#             print(f\"Координата X должны быть числом\")\r\n#\r\n#     def get_x(self):\r\n#         return self.__x\r\n#\r\n#     def set_y(self, y):\r\n#         if Point.__check_value(y):\r\n#             self.__y = y\r\n#         else:\r\n#             print(f\"Координата Y должны быть числом\")\r\n#\r\n#     def get_y(self):\r\n#         return self.__y\r\n#\r\n#\r\n# p1 = Point(5, 10)\r\n# p1.z = 1\r\n# print(p1.z)\r\n\r\n\r\n# print(p1.__dict__)\r\n\r\n\r\n# class Point:\r\n#     def __init__(self, x, y):\r\n#         self.__x = x\r\n#         self.__y = y\r\n#\r\n#     def __get_x(self):\r\n#         print(\"Вызов __get\")\r\n#         return self.__x\r\n#\r\n#     def __set_x(self, x):\r\n#         print(\"Вызов __set\")\r\n#         self.__x = x\r\n#\r\n#     def __del_x(self):\r\n#         print(\"Удаление свойства\")\r\n#         del self.__x\r\n#\r\n#     # x = property(__get_x, __set_x, __del_x)\r\n#\r\n#\r\n# p1 = Point(5, 10)\r\n# p1.x = 100\r\n# print(p1.x)\r\n# del p1.x\r\n# print(p1.__dict__)\r\n\r\n\r\n# class Point:\r\n#     def __init__(self, x, y):\r\n#         self.__x = x\r\n#         self.__y = y\r\n#\r\n#     @property\r\n#     def x(self):\r\n#         print(\"Вызов __get\")\r\n#         return self.__x\r\n#\r\n#     @x.setter\r\n#     def x(self, x):\r\n#         print(\"Вызов __set\")\r\n#         self.__x = x\r\n#\r\n#     @x.deleter\r\n#     def x(self):\r\n#         print(\"Удаление свойства\")\r\n#         del self.__x\r\n#\r\n#     # x = property(__get_x, __set_x, __del_x)\r\n#\r\n#\r\n# p1 = Point(5, 10)\r\n# p1.x = 100\r\n# print(p1.x)\r\n# del p1.x\r\n# print(p1.__dict__)\r\n\r\n\r\n# class KgToPounds:\r\n#     def __init__(self, kg):\r\n#         self.__kg = kg\r\n#\r\n#     @property\r\n#     def kg(self):\r\n#         return self.__kg\r\n#\r\n#     @kg.setter\r\n#     def kg(self, new_kg):\r\n#         if isinstance(new_kg, (int, float)):\r\n#             self.__kg = new_kg\r\n#         else:\r\n#             print('Килограммы задаются только числами')\r\n#\r\n#     def to_pounds(self):\r\n#         return self.__kg * 2.205\r\n#\r\n#\r\n# weight = KgToPounds(12)\r\n# print(weight.kg, \"кг => \", end=\"\")\r\n# print(weight.to_pounds(), \"фунтов\")\r\n#\r\n# weight2 = KgToPounds(23)\r\n# print(weight2.kg, \"кг => \", end=\"\")\r\n# print(weight2.to_pounds(), \"фунтов\")\r\n# weight.kg = 41\r\n# print(weight.kg, \"кг => \", end=\"\")\r\n# print(weight.to_pounds(), \"фунтов\")\r\n# weight.kg = \"abc\"\r\n# print(weight.kg, \"кг => \", end=\"\")\r\n# print(weight.to_pounds(), \"фунтов\")\r\n\r\n# class Person:\r\n#     def __init__(self, name, old):\r\n#         self.__name = name\r\n#         self.__old = old\r\n#\r\n#     @property\r\n#     def name(self):\r\n#         return self.__name\r\n#\r\n#     @name.setter\r\n#     def name(self, new_name):\r\n#         self.__name = new_name\r\n#\r\n#     @name.deleter\r\n#     def name(self):\r\n#         del self.__name\r\n#\r\n#     @property\r\n#     def old(self):\r\n#         return self.__old\r\n#\r\n#     @old.setter\r\n#     def old(self, new_old):\r\n#         self.__old = new_old\r\n#\r\n#     @old.deleter\r\n#     def old(self):\r\n#         del self.__old\r\n#\r\n#\r\n# p1 = Person(\"Irina\", 26)\r\n# print(p1.__dict__)\r\n# p1.name = \"Igor\"\r\n# print(p1.name)\r\n# p1.old = 31\r\n# print(p1.old)\r\n# del p1.name\r\n# print(p1.__dict__)\r\n\r\n\r\n# class Point:\r\n#     __count = 0\r\n#\r\n#     def __init__(self, x=0, y=0):\r\n#         self.__x = x\r\n#         self.__y = y\r\n#         Point.__count += 1\r\n#\r\n#     @staticmethod\r\n#     def get_count():\r\n#         return Point.__count\r\n#\r\n#     # get_count = staticmethod(get_count)\r\n#\r\n#\r\n# p1 = Point()\r\n# p2 = Point()\r\n# p3 = Point()\r\n# print(p1.__dict__)\r\n# print(Point.get_count())\r\n# print(p2.get_count())\r\n\r\n\r\n# class Change:\r\n#     @staticmethod\r\n#     def inc(x):\r\n#         return x + 1\r\n#\r\n#     @staticmethod\r\n#     def dec(x):\r\n#         return x - 1\r\n#\r\n#\r\n# print(Change.inc(10), Change.dec(10))\r\n\r\n# import geometry\r\n#\r\n#\r\n# class Area:\r\n#     count = 0  # 5\r\n#\r\n#     @staticmethod\r\n#     def triangle_area(a, b, c):\r\n#         p = (a + b + c) / 2\r\n#         Area.count += 1\r\n#         return geometry.sqrt(p * (p - a) * (p - b) * (p - c))\r\n#\r\n#     @staticmethod\r\n#     def triangle_area2(a, h):\r\n#         Area.count += 1\r\n#         return 0.5 * a * h\r\n#\r\n#     @staticmethod\r\n#     def square_area(a):\r\n#         Area.count += 1\r\n#         return a ** 2\r\n#\r\n#     @staticmethod\r\n#     def rect_area(a, b):\r\n#         Area.count += 1\r\n#         return a * b\r\n#\r\n#     @staticmethod\r\n#     def get_count():\r\n#         return Area.count\r\n#\r\n#\r\n# print(f\"Площадь треугольника по формуле Герона:\", Area.triangle_area(3, 4, 5))\r\n# print(f\"Площадь треугольника через основание и высоту:\", Area.triangle_area2(6, 7))\r\n# print(f\"Площадь квадрата:\", Area.square_area(7))\r\n# print(f\"Площадь квадрата:\", Area.square_area(9))\r\n# print(f\"Площадь прямоугольника:\", Area.rect_area(2, 6))\r\n# print(f\"Количество подсчетов площади: {Area.get_count()}\")\r\n\r\n\r\n# class Date:\r\n#     def __init__(self, day, month, year):\r\n#         self.day = day\r\n#         self.month = month\r\n#         self.year = year\r\n#\r\n#     @classmethod\r\n#     def from_string(cls, date_as_string):\r\n#         day, month, year = map(int, date_as_string.split(\".\"))\r\n#         return cls(day, month, year)\r\n#\r\n#     @staticmethod\r\n#     def is_date_valid(date_as_string):\r\n#         if date_as_string.count(\".\") == 2:\r\n#             day, month, year = map(int, date_as_string.split(\".\"))\r\n#             return day <= 31 and month <= 12 and year <= 3999\r\n#\r\n#     def string_to_db(self):\r\n#         return f\"{self.year}-{self.month}-{self.day}\"\r\n#\r\n#\r\n# dates = [\r\n#     '30.12.2020',\r\n#     '30-12-2020',\r\n#     '89.12.2021',\r\n#     '12.45.2022'\r\n# ]\r\n#\r\n# for string_date in dates:\r\n#     if Date.is_date_valid(string_date):\r\n#         date = Date.from_string(string_date)\r\n#         string_to_db = date.string_to_db()\r\n#         print(string_to_db)\r\n#     else:\r\n#         print(\"Неправильная дата или формат строки с датой\")\r\n\r\n\r\n# string_date = \"23.10.2021\"\r\n# day, month, year = map(int, string_date.split(\".\"))\r\n# date = Date(day, month, year)\r\n# date = Date.from_string(\"23.10.2021\")  # date = Date(23, 10, 2021)\r\n# print(date.string_to_db())\r\n\r\n\r\n# string_date2 = \"15.11.2022\"\r\n# day, month, year = map(int, string_date2.split(\".\"))\r\n# date2 = Date.from_string(\"15.11.2022\")\r\n# print(date2.string_to_db())\r\n\r\n\r\n# class Account:\r\n#     rate_usd = 0.013\r\n#     rate_eur = 0.011\r\n#     suffix = \"RUB\"\r\n#     suffix_usd = \"USD\"\r\n#     suffix_eur = \"EUR\"\r\n#\r\n#     def __init__(self, surname, num, percent, value=0):\r\n#         self.num = num\r\n#         self.surname = surname\r\n#         self.percent = percent\r\n#         self.value = value\r\n#         print(f\"Счет #{self.num} принадлежащий {self.surname} был открыт.\")\r\n#         print(\"*\" * 50)\r\n#\r\n#     def __del__(self):\r\n#         print(\"*\" * 50)\r\n#         print(f\"Счет #{self.num} принадлежащий {self.surname} был закрыт.\")\r\n#\r\n#     @staticmethod\r\n#     def convert(value, rate):\r\n#         return value * rate\r\n#\r\n#     @classmethod\r\n#     def set_usd_rate(cls, rate):\r\n#         cls.rate_usd = rate\r\n#\r\n#     @classmethod\r\n#     def set_eur_rate(cls, rate):\r\n#         cls.rate_eur = rate\r\n#\r\n#     def print_balance(self):\r\n#         print(f\"Текущий баланс {self.value} {Account.suffix}\")\r\n#\r\n#     def convert_to_usd(self):\r\n#         usd_val = Account.convert(self.value, Account.rate_usd)\r\n#         print(f\"Состояние счета: {usd_val} {Account.suffix_usd}\")\r\n#\r\n#     def convert_to_eur(self):\r\n#         usd_eur = Account.convert(self.value, Account.rate_eur)\r\n#         print(f\"Состояние счета: {usd_eur} {Account.suffix_eur}\")\r\n#\r\n#     def edit_owner(self, surname):\r\n#         self.surname = surname\r\n#\r\n#     def add_percents(self):\r\n#         self.value += self.value * self.percent\r\n#         print(\"Проценты были успешно начислены!\")\r\n#         self.print_balance()\r\n#\r\n#     def withdraw_money(self, val):\r\n#         if val > self.value:\r\n#             print(f\"К сожалению у вас нет {val} {Account.suffix}\")\r\n#         else:\r\n#             self.value -= val\r\n#             print(f\"{val} {Account.suffix} было успешно снято!\")\r\n#         self.print_balance()\r\n#\r\n#     def add_money(self, val):\r\n#         self.value += val\r\n#         print(f'{val} {Account.suffix} было успешно добавлено!')\r\n#         self.print_balance()\r\n#\r\n#     def print_info(self):\r\n#         print(\"Информация о счете:\")\r\n#         print(\"-\" * 20)\r\n#         print(f\"#{self.num}\")\r\n#         print(f\"Владелец: {self.surname}\")\r\n#         self.print_balance()\r\n#         print(f'Проценты: {self.percent:.0%}')\r\n#         print(\"-\" * 20)\r\n#\r\n#\r\n# acc = Account(num='12345', surname=\"Долгих\", percent=0.03, value=1000)\r\n# # acc.print_balance()\r\n# acc.print_info()\r\n# acc.convert_to_usd()\r\n# acc.convert_to_eur()\r\n# print()\r\n# Account.set_usd_rate(2)\r\n# acc.convert_to_usd()\r\n# Account.set_eur_rate(3)\r\n# acc.convert_to_eur()\r\n# print()\r\n# acc.edit_owner(\"Дюма\")\r\n# acc.print_info()\r\n# print()\r\n# acc.add_percents()\r\n# print()\r\n#\r\n# acc.withdraw_money(100)\r\n# print()\r\n# acc.withdraw_money(3000)\r\n# print()\r\n#\r\n# acc.add_money(5000)\r\n# print()\r\n# acc.withdraw_money(3000)\r\n\r\n# from geometry import pi\r\n#\r\n#\r\n# class Sphere:\r\n#     def __init__(self, radius=1.0, x=0, y=0, z=0):\r\n#         self.radius = radius\r\n#         self.x = x\r\n#         self.y = y\r\n#         self.z = z\r\n#\r\n#     def get_radius(self):\r\n#         return self.radius\r\n#\r\n#     def set_radius(self, r):\r\n#         self.radius = r\r\n#\r\n#     def get_volume(self):\r\n#         return 4 / 3 * (pi * self.radius ** 3)\r\n#\r\n#     def get_square(self):\r\n#         return 4 * pi * self.radius ** 2\r\n#\r\n#     def get_center(self):\r\n#         return self.x, self.y, self.z\r\n#\r\n#     def is_point_inside(self, x, y, z):\r\n#         if ((self.x - x) ** 2 + (self.y - y) ** 2 + (self.z - z) ** 2) <= self.radius ** 2:\r\n#             return True\r\n#         else:\r\n#             return False\r\n#\r\n#\r\n# s = Sphere(0.6)\r\n# print(\"get_radius:\", s.get_radius())\r\n# print(\"get_volume:\", s.get_volume())\r\n# print(\"get_square:\", s.get_square())\r\n# print(\"get_center:\", s.get_center())\r\n# print(\"is_point_inside:\", s.is_point_inside(0, -1.5, 0))\r\n# print(\"set_radius:\", s.set_radius(1.6))\r\n# print(\"is_point_inside:\", s.is_point_inside(0, -1.5, 0))\r\n\r\n\r\n# import re\r\n#\r\n#\r\n# class UserDate:\r\n#     def __init__(self, fio, old, ps, weight):\r\n#         # self.verify_fio(fio)\r\n#         # self.verify_old(old)\r\n#         # self.verify_weight(weight)\r\n#         # self.verify_ps(ps)\r\n#\r\n#         self.fio = fio\r\n#         self.old = old\r\n#         self.password = ps\r\n#         self.weight = weight\r\n#\r\n#     @staticmethod\r\n#     def verify_fio(fio):\r\n#         if not isinstance(fio, str):\r\n#             raise TypeError(\"ФИО должно быть строкой\")\r\n#         f = fio.split()  # ['Волков', 'Игорь', 'Николаевич']\r\n#         if len(f) != 3:\r\n#             raise TypeError(\"Неверный формат ФИО\")\r\n#         # ['В', 'о', 'л', 'к', 'о', 'в', 'И', 'г', 'о', 'р', 'ь', 'Н', 'и', 'к', 'о', 'л', 'а', 'е', 'в', 'и', 'ч']\r\n#         letters = \"\".join(re.findall(r'[а-яё-]', fio, re.IGNORECASE))  # ВолковИгорьНиколаевич\r\n#         for s in f:\r\n#             # print(s.strip(letters))\r\n#             if len(s.strip(letters)) != 0:\r\n#                 raise TypeError(\"В ФИО можно использовать только буквы и дефис\")\r\n#\r\n#     @staticmethod\r\n#     def verify_old(old):\r\n#         if not isinstance(old, int) or old < 18 or old > 90:\r\n#             raise TypeError(\"Возраст должен быть числом в диапазоне от 18 до 90 лет\")\r\n#\r\n#     @staticmethod\r\n#     def verify_weight(w):\r\n#         if not isinstance(w, float) or w < 20:\r\n#             raise TypeError(\"Вес должен быть вещественным числом от 20 кг и выше\")\r\n#\r\n#     @staticmethod\r\n#     def verify_ps(ps):\r\n#         if not isinstance(ps, str):\r\n#             raise TypeError(\"Паспорт должен быть строкой\")\r\n#         s = ps.split()  # ['1234', '567890']\r\n#         if len(s) != 2 or len(s[0]) != 4 or len(s[1]) != 6:\r\n#             raise TypeError(\"Неверный формат паспорта\")\r\n#         for p in s:\r\n#             if not p.isdigit():\r\n#                 raise TypeError(\"Серия и номер паспорта должны быть числами\")\r\n#\r\n#     @property\r\n#     def fio(self):\r\n#         return self.__fio\r\n#\r\n#     @fio.setter\r\n#     def fio(self, fio):\r\n#         self.verify_fio(fio)\r\n#         self.__fio = fio\r\n#\r\n#     @property\r\n#     def old(self):\r\n#         return self.__old\r\n#\r\n#     @old.setter\r\n#     def old(self, year):\r\n#         self.verify_old(year)\r\n#         self.__old = year\r\n#\r\n#     @property\r\n#     def weight(self):\r\n#         return self.__weight\r\n#\r\n#     @weight.setter\r\n#     def weight(self, w):\r\n#         self.verify_weight(w)\r\n#         self.__weight = w\r\n#\r\n#     @property\r\n#     def password(self):\r\n#         return self.__password\r\n#\r\n#     @password.setter\r\n#     def password(self, ps):\r\n#         self.verify_ps(ps)\r\n#         self.__password = ps\r\n#\r\n#\r\n# p1 = UserDate(\"Волков Игорь Николаевич\", 26, '1234 567890', 80.8)\r\n# p1.fio = \"Соболев Игорь Николаевич\"\r\n# p1.old = 35\r\n# p1.password = '4567 123456'\r\n# p1.weight = 70.0\r\n# print(p1.__dict__)\r\n\r\n\r\n# Наследование\r\n\r\n# class Point:\r\n#     def __init__(self, x, y):\r\n#         self.__x = x\r\n#         self.__y = y\r\n#\r\n#     def __str__(self):\r\n#         return f\"({self.__x}, {self.__y})\"\r\n#\r\n#\r\n# class Prop:\r\n#     def __init__(self, sp: Point, ep: Point, color: str = \"red\", width: int = 1):\r\n#         print(\"Инициализатор базового класса Prop\")\r\n#         self._sp = sp\r\n#         self._ep = ep\r\n#         self._color = color\r\n#         self.__width = width\r\n#\r\n#     def get_width(self):\r\n#         return self.__width\r\n#\r\n#\r\n# class Line(Prop):\r\n#     def __init__(self, *args):\r\n#         # Prop.__init__(self, *args)\r\n#         print(\"Переопределенный инициализатор Line\")\r\n#         super().__init__(*args)\r\n#\r\n#     def draw_line(self):\r\n#         print(f\"Рисование линии: {self._sp}, {self._ep}, {self._color}, {self.get_width()}\")\r\n#\r\n#\r\n# # class Rect(Prop):\r\n# #     def draw_rect(self):\r\n# #         print(f\"Рисование прямоугольника: {self._sp}, {self._ep}, {self._color}, {self._width}\")\r\n#\r\n#\r\n# line = Line(Point(1, 2), Point(10, 20))\r\n# # print(line.__dict__)\r\n# # line._width = 5\r\n# line.draw_line()\r\n\r\n# rect = Rect(Point(30, 40), Point(70, 80))\r\n# rect.draw_rect()\r\n\r\n\r\n# DRY (Don`t Repeat Yourself) - не повторяйся!\r\n\r\n\r\n# class Figure:\r\n#     def __init__(self, color):\r\n#         self.__color = color\r\n#\r\n#     @property\r\n#     def color(self):\r\n#         return self.__color\r\n#\r\n#     @color.setter\r\n#     def color(self, c):\r\n#         self.__color = c\r\n#\r\n#\r\n# class Rectangle(Figure):\r\n#     def __init__(self, width, height, color):\r\n#         super().__init__(color)\r\n#         self.__width = width\r\n#         self.__height = height\r\n#\r\n#     def area(self):\r\n#         print(\"Площадь: \", end=\"\")\r\n#         return self.__width * self.__height\r\n#\r\n#     def print_info(self):\r\n#         print(f\"Прямоугольник\\nШирина: {self.__width}\\nВысота: {self.__height}\\nЦвет: {self.color}\")\r\n#\r\n#\r\n# rect = Rectangle(10, 20, \"зеленый\")\r\n# rect.color = \"синий\"\r\n# rect.print_info()\r\n# print(rect.area())\r\n\r\n\r\n# class Point:\r\n#     def __init__(self, x, y):\r\n#         self.__x = x\r\n#         self.__y = y\r\n#\r\n#     def __str__(self):\r\n#         return f\"({self.__x}, {self.__y})\"\r\n#\r\n#     def is_digit(self):\r\n#         if isinstance(self.__x, (int, float)) and isinstance(self.__y, (int, float)):\r\n#             return True\r\n#         return False\r\n#\r\n#     def is_int(self):\r\n#         if isinstance(self.__x, int) and isinstance(self.__y, int):\r\n#             return True\r\n#         return False\r\n#\r\n#\r\n# class Prop:\r\n#     def __init__(self, sp: Point, ep: Point, color: str = \"red\", width: int = 1):\r\n#         self._sp = sp\r\n#         self._ep = ep\r\n#         self._color = color\r\n#         self._width = width\r\n#\r\n#     def set_coord(self, sp, ep):\r\n#         print(\"Prop\")\r\n#         if sp.is_digit() and ep.is_digit():\r\n#             self._sp = sp\r\n#             self._ep = ep\r\n#         else:\r\n#             print(\"Координаты должны быть числами\")\r\n#\r\n#\r\n# class Line(Prop):\r\n#     def draw_line(self):\r\n#         print(f\"Рисование линии: {self._sp}, {self._ep}, {self._color}, {self._width}\")\r\n#\r\n#     def set_coord(self, sp, ep):\r\n#         print(\"Line\")\r\n#         super().set_coord(sp, ep)\r\n#         if sp.is_int() and ep.is_int():\r\n#             self._sp = sp\r\n#             self._ep = ep\r\n#         else:\r\n#             print(\"Координаты должны быть числами\")\r\n#\r\n#\r\n# class Rect(Prop):\r\n#     def draw_rect(self):\r\n#         print(f\"Рисование прямоугольника: {self._sp}, {self._ep}, {self._color}, {self._width}\")\r\n#\r\n#\r\n# line = Line(Point(1, 2), Point(10, 20))\r\n# line.draw_line()\r\n# line.set_coord(Point(10, 20), Point(100, 200))\r\n# line.draw_line()\r\n# print()\r\n# rect = Rect(Point(30, 40), Point(70, 80))\r\n# rect.draw_rect()\r\n# rect.set_coord(Point(20.3, 30), Point(50, 70.8))\r\n# rect.draw_rect()\r\n\r\n# class Rect:\r\n#     def __init__(self, width, height):\r\n#         self.__width = width\r\n#         self.__height = height\r\n#\r\n#     def show_rect(self):\r\n#         print(f\"Прямоугольник:\\nШирина: {self.__width}\\nВысота: {self.__height}\")\r\n#\r\n#\r\n# class RectFon(Rect):\r\n#     def __init__(self, width, height, background):\r\n#         super().__init__(width, height)\r\n#         self.fon = background\r\n#\r\n#     def show_rect(self):\r\n#         super().show_rect()\r\n#         print(\"Фон:\", self.fon)\r\n#\r\n#\r\n# class RectBorder(Rect):\r\n#     def __init__(self, width, height, border):\r\n#         super().__init__(width, height)\r\n#         self.border = border\r\n#\r\n#     def show_rect(self):\r\n#         super().show_rect()\r\n#         print(\"Рамка:\", self.border)\r\n#\r\n#\r\n# shape1 = RectFon(400, 200, \"yellow\")\r\n# shape1.show_rect()\r\n# print()\r\n# shape2 = RectBorder(600, 300, \"1px solid red\")\r\n# shape2.show_rect()\r\n\r\n\r\n# class Vector(list):\r\n#     def __str__(self):\r\n#         return \"\\t\".join(map(str, self))\r\n#\r\n#\r\n# v = Vector([1, 2, 3])\r\n# print(v)\r\n# print(type(v))\r\n\r\n# Перегрузка методов\r\n\r\n# class Point:\r\n#     def __init__(self, x, y):\r\n#         self.__x = x\r\n#         self.__y = y\r\n#\r\n#     def __str__(self):\r\n#         return f\"({self.__x}, {self.__y})\"\r\n#\r\n#     def is_digit(self):\r\n#         if isinstance(self.__x, (int, float)) and isinstance(self.__y, (int, float)):\r\n#             return True\r\n#         return False\r\n#\r\n#     def is_int(self):\r\n#         if isinstance(self.__x, int) and isinstance(self.__y, int):\r\n#             return True\r\n#         return False\r\n#\r\n#\r\n# class Prop:\r\n#     def __init__(self, sp: Point, ep: Point, color: str = \"red\", width: int = 1):\r\n#         self._sp = sp\r\n#         self._ep = ep\r\n#         self._color = color\r\n#         self._width = width\r\n#\r\n#     def set_coord(self, sp, ep):\r\n#         if sp.is_digit() and ep.is_digit():\r\n#             self._sp = sp\r\n#             self._ep = ep\r\n#         else:\r\n#             print(\"Координаты должны быть числами\")\r\n#\r\n#\r\n# class Line(Prop):\r\n#     def draw_line(self):\r\n#         print(f\"Рисование линии: {self._sp}, {self._ep}, {self._color}, {self._width}\")\r\n#\r\n#     def set_coord(self, sp, ep=None):\r\n#         # super().set_coord(sp, ep)\r\n#         if ep is None:\r\n#             if sp.is_int():\r\n#                 self._sp = sp\r\n#             else:\r\n#                 print(\"Координаты должны быть числами\")\r\n#         else:\r\n#             if sp.is_int() and ep.is_int():\r\n#                 self._sp = sp\r\n#                 self._ep = ep\r\n#             else:\r\n#                 print(\"Координаты должны быть числами\")\r\n#\r\n#\r\n# line = Line(Point(1, 2), Point(10, 20))\r\n# line.draw_line()\r\n# line.set_coord(Point(10, 20), Point(100, 200))\r\n# line.draw_line()\r\n# line.set_coord(Point(-10, -20))\r\n# line.draw_line()\r\n\r\n\r\n# class Point:\r\n#     def __init__(self, x, y):\r\n#         self.__x = x\r\n#         self.__y = y\r\n#\r\n#     def __str__(self):\r\n#         return f\"({self.__x}, {self.__y})\"\r\n#\r\n#     def is_digit(self):\r\n#         if isinstance(self.__x, (int, float)) and isinstance(self.__y, (int, float)):\r\n#             return True\r\n#         return False\r\n#\r\n#     def is_int(self):\r\n#         if isinstance(self.__x, int) and isinstance(self.__y, int):\r\n#             return True\r\n#         return False\r\n#\r\n#\r\n# class Prop:\r\n#     def __init__(self, sp: Point, ep: Point, color: str = \"red\", width: int = 1):\r\n#         self._sp = sp\r\n#         self._ep = ep\r\n#         self._color = color\r\n#         self._width = width\r\n#\r\n#     def set_coord(self, sp, ep):\r\n#         if sp.is_digit() and ep.is_digit():\r\n#             self._sp = sp\r\n#             self._ep = ep\r\n#         else:\r\n#             print(\"Координаты должны быть числами\")\r\n#\r\n#     def draw(self):\r\n#         raise NotImplementedError(\"В дочернем классе должен быть определен метод draw()\")\r\n#\r\n#\r\n# class Line(Prop):\r\n#     def draw(self):\r\n#         print(f\"Рисование линии: {self._sp}, {self._ep}, {self._color}, {self._width}\")\r\n#\r\n#\r\n# class Rect(Prop):\r\n#     def draw(self):\r\n#         print(f\"Рисование прямоугольника: {self._sp}, {self._ep}, {self._color}, {self._width}\")\r\n#\r\n#\r\n# class Ellipse(Prop):\r\n#     # def draw(self):\r\n#     #     print(f\"Рисование эллипса: {self._sp}, {self._ep}, {self._color}, {self._width}\")\r\n#     ...\r\n#\r\n#\r\n# figs = list()\r\n# figs.append(Line(Point(0, 0), Point(10, 10)))\r\n# figs.append(Line(Point(10, 10), Point(20, 10)))\r\n# figs.append(Rect(Point(50, 50), Point(100, 100)))\r\n# # figs.append(Ellipse(Point(-10, -10), Point(10, 10)))\r\n#\r\n# for f in figs:\r\n#     f.draw()\r\n\r\n\r\n# Абстрактный метод\r\n# Абстрактный класс\r\n\r\n# from abc import ABC, abstractmethod\r\n#\r\n#\r\n# class Chess(ABC):\r\n#     def draw(self):\r\n#         print(\"Нарисовал шахматную фигуру\")\r\n#\r\n#     @abstractmethod\r\n#     def move(self):\r\n#         print(\"Метод move() в базовом классе\")\r\n#\r\n#\r\n# class Queen(Chess):\r\n#     def move(self):\r\n#         super().move()\r\n#         print(\"Ферзь перемещен на e2e4\")\r\n#\r\n#\r\n# q = Queen()\r\n# q.draw()\r\n# q.move()\r\n\r\n# from geometry import pi\r\n#\r\n#\r\n# class Table:\r\n#     def __init__(self, width=None, length=None, radius=None):\r\n#         if radius is None:\r\n#             if length is None:\r\n#                 self._width = self._length = width\r\n#             else:\r\n#                 self._width = width\r\n#                 self._length = length\r\n#         else:\r\n#             self._radius = radius\r\n#\r\n#     def calc_area(self):\r\n#         raise NotImplementedError(\"В дочернем классе должен быть определен метод calc_area()\")\r\n#\r\n#\r\n# class SqTable(Table):\r\n#     def calc_area(self):\r\n#         return self._width * self._length\r\n#\r\n#\r\n# class RoundTable(Table):\r\n#     def calc_area(self):\r\n#         return round(pi * self._radius ** 2, 2)\r\n#\r\n#\r\n# t = SqTable(20, 10)\r\n# print(t.__dict__)\r\n# print(t.calc_area())\r\n#\r\n# t2 = SqTable(20)\r\n# print(t2.__dict__)\r\n# print(t2.calc_area())\r\n#\r\n# t1 = RoundTable(radius=20)\r\n# print(t1.__dict__)\r\n# print(t1.calc_area())\r\n\r\n\r\n# from abc import ABC, abstractmethod\r\n#\r\n#\r\n# class Currency(ABC):\r\n#     def __init__(self, value):\r\n#         self.value = value\r\n#\r\n#     @abstractmethod\r\n#     def convert_to_rub(self):\r\n#         pass\r\n#\r\n#     @abstractmethod\r\n#     def print_value(self):\r\n#         print(self.value, end=' ')\r\n#\r\n#\r\n# class Dollar(Currency):\r\n#     rate_to_rub = 74.16\r\n#     suffix = \"USD\"\r\n#\r\n#     def convert_to_rub(self):\r\n#         return self.value * Dollar.rate_to_rub\r\n#\r\n#     def print_value(self):\r\n#         super().print_value()\r\n#         print(Dollar.suffix, end=' ')\r\n#\r\n#\r\n# class Euro(Currency):\r\n#     rate_to_rub = 90.14\r\n#     suffix = \"EUR\"\r\n#\r\n#     def convert_to_rub(self):\r\n#         return self.value * Euro.rate_to_rub\r\n#\r\n#     def print_value(self):\r\n#         super().print_value()\r\n#         print(Euro.suffix, end=' ')\r\n#\r\n#\r\n# d = [Dollar(5), Dollar(10), Dollar(50), Dollar(100)]\r\n# e = [Euro(5), Euro(10), Euro(50), Euro(100)]\r\n#\r\n# for elem in d:\r\n#     elem.print_value()\r\n#     print(f\"= {elem.convert_to_rub():.2f} RUB\")\r\n#\r\n# for elem in e:\r\n#     elem.print_value()\r\n#     print(f\"= {elem.convert_to_rub():.2f} RUB\")\r\n\r\n\r\n# Интерфейсы\r\n\r\n# from abc import ABC, abstractmethod\r\n#\r\n#\r\n# class Father(ABC):\r\n#     @abstractmethod\r\n#     def display1(self):\r\n#         pass\r\n#\r\n#     @abstractmethod\r\n#     def display2(self):\r\n#         pass\r\n#\r\n#\r\n# class Child(Father):\r\n#     def display1(self):\r\n#         print(\"Child\")\r\n#\r\n#\r\n# class GrandChild(Child):\r\n#     def display2(self):\r\n#         print(\"GrandChild\")\r\n#\r\n#\r\n# gc = GrandChild()\r\n# gc.display2()\r\n# gc.display1()\r\n\r\n\r\n# Вложенные классы\r\n\r\n# class MyOuter:\r\n#     age = 18\r\n#\r\n#     def __init__(self, name):\r\n#         self.name = name\r\n#\r\n#     @classmethod\r\n#     def outer_class_method(cls):\r\n#         print(\"Метод внешнего класса\")\r\n#\r\n#     def outer_obj_method(self):\r\n#         print(\"Обычный метод\")\r\n#\r\n#     class MyInner:\r\n#         def __init__(self, inner_name, obj):\r\n#             self.inner_name = inner_name\r\n#             self.obj = obj\r\n#\r\n#         def inner_method(self):\r\n#             print(\"Метод внутреннего класса\", MyOuter.age, self.obj.name)  #\r\n#             MyOuter.outer_class_method()\r\n#             self.obj.outer_obj_method()\r\n#\r\n#\r\n# out = MyOuter('внешний')\r\n# inner = out.MyInner('внутренний', out)\r\n# print(inner.inner_name)\r\n# inner.inner_method()\r\n\r\n\r\n# class Color:\r\n#     def __init__(self):\r\n#         self.name = \"Green\"\r\n#         self.lg = self.LightGreen()\r\n#\r\n#     def show(self):\r\n#         print(\"Name:\", self.name)\r\n#\r\n#     class LightGreen:\r\n#         def __init__(self):\r\n#             self.name = \"Light Green\"\r\n#\r\n#         def display(self):\r\n#             print(\"Name:\", self.name)\r\n#\r\n#\r\n# outer = Color()\r\n# outer.show()\r\n# g = outer.lg\r\n# g.display()\r\n# print(g.name)\r\n# print(outer.name)\r\n\r\n# class Intern:\r\n#     def __init__(self):\r\n#         self.name = \"Intern\"\r\n#\r\n#     def display(self):\r\n#         print(\"Name:\", self.name)\r\n#\r\n#\r\n# class Employee:\r\n#     def __init__(self):\r\n#         self.name = \"Employee\"\r\n#         self.intern = Intern()\r\n#         self.head = self.Head()\r\n#\r\n#     def show(self):\r\n#         print(\"Name:\", self.name)\r\n#\r\n#     class Head:\r\n#         def __init__(self):\r\n#             self.name = \"Head\"\r\n#\r\n#         def display(self):\r\n#             print(\"Name:\", self.name)\r\n#\r\n#\r\n# outer = Employee()\r\n# outer.show()\r\n#\r\n# d1 = outer.intern\r\n# d2 = outer.head\r\n#\r\n# d1.display()\r\n# d2.display()\r\n\r\n# class Student:\r\n#     def __init__(self, name):\r\n#         self.name = name\r\n#         self.note = self.Notebook()\r\n#\r\n#     def show(self):\r\n#         print(self.name, end=\" \")\r\n#         self.note.show()\r\n#\r\n#     class Notebook:\r\n#         def __init__(self):\r\n#             self.brand = 'HP'\r\n#             self.cpu = 'i7'\r\n#             self.ram = 16\r\n#\r\n#         def show(self):\r\n#             print(f\" => {self.brand}, {self.cpu}, {self.ram}\")\r\n#\r\n#\r\n# s1 = Student(\"Roman\")\r\n# s2 = Student(\"Vladimir\")\r\n#\r\n# s1.show()\r\n# s2.show()\r\n\r\n\r\n# class Outer:\r\n#     def __init__(self):\r\n#         self.inner = self.Inner()\r\n#\r\n#     def show(self):\r\n#         print(\"Outer\")\r\n#\r\n#     class Inner:\r\n#         def __init__(self):\r\n#             self.inner_inner = self.InnerClass()\r\n#\r\n#         def show(self):\r\n#             print(\"Inner\")\r\n#\r\n#         class InnerClass:\r\n#\r\n#             def show(self):\r\n#                 print(\"InnerClass\")\r\n#\r\n#\r\n# out = Outer()\r\n# out.show()\r\n#\r\n# inner1 = out.inner\r\n# inner1.show()\r\n#\r\n# # inner2 = out.inner.inner_inner\r\n# inner2 = inner1.inner_inner\r\n# inner2.show()\r\n\r\n# class Computer:\r\n#     def __init__(self):\r\n#         self.name = \"PC001\"\r\n#         self.os = self.OS()\r\n#         self.cpu = self.CPU()\r\n#\r\n#     class OS:\r\n#         def system(self):\r\n#             return \"Windows 10\"\r\n#\r\n#     class CPU:\r\n#         def make(self):\r\n#             return \"Intel\"\r\n#\r\n#         def model(self):\r\n#             return \"Core-i7\"\r\n#\r\n#\r\n# comp = Computer()\r\n# my_os = comp.os\r\n# my_cpu = comp.cpu\r\n# print(comp.name)\r\n# print(my_os.system())\r\n# print(my_cpu.make())\r\n# print(my_cpu.model())\r\n\r\n#\r\n# class Base:\r\n#     def __init__(self):\r\n#         self.db = self.Inner()\r\n#\r\n#     def display(self):\r\n#         print('In Base Class')\r\n#\r\n#     class Inner:\r\n#         def display1(self):\r\n#             print(\"Inner of Base Class\")\r\n#\r\n#\r\n# class SubClass(Base):\r\n#     def __init__(self):\r\n#         print(\"In SubClass\")\r\n#         super().__init__()\r\n#\r\n#     class Inner(Base.Inner):\r\n#         def display2(self):\r\n#             print(\"Inner Of SubClass\")\r\n#\r\n#\r\n# a = SubClass()\r\n# a.display()\r\n#\r\n# b = a.db\r\n# # b = a.Inner()\r\n# b.display1()\r\n# b.display2()\r\n\r\n# Множественное наследование\r\n\r\n# class Creature:\r\n#     def __init__(self, name):\r\n#         self.name = name\r\n#\r\n#\r\n# class Animal(Creature):\r\n#     def sleep(self):\r\n#         print(self.name + \" is sleeping\")\r\n#\r\n#\r\n# class Pet(Creature):\r\n#     def play(self):\r\n#         print(self.name + \" is playing\")\r\n#\r\n#\r\n# class Dog(Animal, Pet):\r\n#     def bark(self):\r\n#         print(self.name + \" is barking\")\r\n#\r\n#\r\n# beast = Dog(\"Buddy\")\r\n# beast.bark()\r\n# beast.sleep()\r\n# beast.play()\r\n\r\n\r\n# class A:\r\n#     def __init__(self):\r\n#         print(\"A\")\r\n#\r\n#     def hi(self):\r\n#         print(\"A_hi\")\r\n#\r\n#\r\n# class AA:\r\n#     def __init__(self):\r\n#         print(\"AA\")\r\n#\r\n#     def hi(self):\r\n#         print(\"AA_hi\")\r\n#\r\n#\r\n# class B(A):\r\n#     def __init__(self):\r\n#         print(\"B\")\r\n#\r\n#     def hi(self):\r\n#         print(\"B_hi\")\r\n#\r\n#\r\n# class C(AA):\r\n#     def __init__(self):\r\n#         print(\"C\")\r\n#\r\n#     def hi(self):\r\n#         print(\"C_hi\")\r\n#\r\n#\r\n# class D(B, C):\r\n#     def __init__(self):\r\n#         print(\"D\")\r\n#         B.__init__(self)\r\n#         C.__init__(self)\r\n#\r\n#     def hi(self):\r\n#         C.hi(self)\r\n#\r\n#\r\n# d = D()\r\n# d.hi()\r\n# print(D.mro())\r\n# print(D.__mro__)\r\n\r\n\r\n# class Point:\r\n#     def __init__(self, x, y):\r\n#         self.x = x\r\n#         self.y = y\r\n#\r\n#     def __str__(self):\r\n#         return f\"({self.x}, {self.y})\"\r\n#\r\n#\r\n# class Styles:\r\n#     def __init__(self, color=\"red\", width=1):\r\n#         print(\"Инициализатор Styles\")\r\n#         self.color = color\r\n#         self.width = width\r\n#\r\n#\r\n# class Pos:\r\n#     def __init__(self, sp: Point, ep: Point, color, width):\r\n#         print(\"Инициализатор Pos\")\r\n#         self.sp = sp\r\n#         self.ep = ep\r\n#         super().__init__(color, width)\r\n#\r\n#\r\n# class Line(Pos, Styles):\r\n#     # def __init__(self, sp: Point, ep: Point, color=\"red\", width=1):\r\n#     #     Pos.__init__(self, sp, ep)\r\n#     #     Styles.__init__(self, color, width)\r\n#\r\n#     def draw(self):\r\n#         print(f\"Рисование линии: {self.sp}, {self.ep}, {self.color}, {self.width}\")\r\n#\r\n#\r\n# l1 = Line(Point(10, 10), Point(100, 100), \"green\", 5)\r\n# l1.draw()\r\n# print(Line.mro())\r\n\r\n\r\n# Миксины (примеси)\r\n# class Displayer:\r\n#     @staticmethod\r\n#     def display(message):\r\n#         print(message)  # \"Эта строка будет отображаться и записываться в файл\r\n#\r\n#\r\n# class LoggedMixin:\r\n#     def log(self, message, filename=\"logfile.txt\"):\r\n#         with open(filename, 'a') as fh:\r\n#             fh.write(message)\r\n#\r\n#     def display(self, message):  # \"Эта строка будет отображаться и записываться в файл\r\n#         Displayer.display(message)\r\n#         self.log(message)\r\n#\r\n#\r\n# class MySubClass(LoggedMixin, Displayer):\r\n#     def log(self, message, filename=\"\"):\r\n#         super().log(message, filename=\"log.txt\")\r\n#\r\n#\r\n# sub = MySubClass()\r\n# sub.display(\"Эта строка будет отображаться и записываться в файл\")\r\n\r\n\r\n# class Goods:\r\n#     def __init__(self, name, weight, price):\r\n#         super().__init__()\r\n#         print(\"Init Goods\")\r\n#         self.name = name\r\n#         self.weight = weight\r\n#         self.price = price\r\n#\r\n#     def print_info(self):\r\n#         print(f\"{self.name}, {self.weight}, {self.price}\")\r\n#\r\n#\r\n# class MixinLog:\r\n#     ID = 0\r\n#\r\n#     def __init__(self):\r\n#         print(\"Init MixinLog\")\r\n#         self.ID += 1\r\n#         self.id = self.ID\r\n#\r\n#     def save_log(self):\r\n#         print(f\"{self.id}: товар был продан в 00:00 часов\")\r\n#\r\n#\r\n# class NoteBook(Goods, MixinLog):\r\n#     pass\r\n#\r\n#\r\n# n = NoteBook(\"HP\", 1.5, 35000)\r\n# n.print_info()\r\n# n.save_log()\r\n\r\n\r\n# Перегрузка операторов\r\n\r\n# Число секунд в одном дне: 24*60*60 = 86400\r\n\r\n# class Clock:\r\n#     __DAY = 86400  # число секунд в дне\r\n#\r\n#     def __init__(self, sec: int):\r\n#         if not isinstance(sec, int):\r\n#             raise ValueError(\"Секунды должны быть целым числом\")\r\n#         self.sec = sec % self.__DAY\r\n#\r\n#     def get_format_time(self):\r\n#         s = self.sec % 60\r\n#         m = (self.sec // 60) % 60\r\n#         h = (self.sec // 3600) % 24\r\n#         return f\"{Clock.__get_form(h)}:{Clock.__get_form(m)}:{Clock.__get_form(s)}\"\r\n#\r\n#     @staticmethod\r\n#     def __get_form(x):\r\n#         return str(x) if x > 9 else \"0\" + str(x)\r\n#\r\n#     def __add__(self, other):\r\n#         if not isinstance(other, Clock):\r\n#             raise ArithmeticError(\"Правый операнд должен быть типом Clock\")\r\n#         return Clock(self.sec + other.sec)  # Clock(300)\r\n#\r\n#     def __eq__(self, other):\r\n#         if not isinstance(other, Clock):\r\n#             raise ArithmeticError(\"Правый операнд должен быть типом Clock\")\r\n#         return self.sec == other.sec\r\n#         # if self.sec == other.sec:\r\n#         #     return True\r\n#         # return False\r\n#\r\n#     def __gt__(self, other):\r\n#         if not isinstance(other, Clock):\r\n#             raise ArithmeticError(\"Правый операнд должен быть типом Clock\")\r\n#         return self.sec > other.sec\r\n#\r\n#     def __ge__(self, other):\r\n#         if not isinstance(other, Clock):\r\n#             raise ArithmeticError(\"Правый операнд должен быть типом Clock\")\r\n#         return self.sec >= other.sec\r\n#\r\n#     def __lt__(self, other):\r\n#         if not isinstance(other, Clock):\r\n#             raise ArithmeticError(\"Правый операнд должен быть типом Clock\")\r\n#         return self.sec < other.sec\r\n#\r\n#     def __le__(self, other):\r\n#         if not isinstance(other, Clock):\r\n#             raise ArithmeticError(\"Правый операнд должен быть типом Clock\")\r\n#         return self.sec <= other.sec\r\n#\r\n#     def __getitem__(self, item):\r\n#         if not isinstance(item, str):\r\n#             raise ValueError(\"Ключ должен быть строкой\")\r\n#\r\n#         if item == \"hour\":\r\n#             return (self.sec // 3600) % 24\r\n#         elif item == \"min\":\r\n#             return (self.sec // 60) % 60\r\n#         elif item == \"sec\":\r\n#             return self.sec % 60\r\n#\r\n#         return \"Неверный ключ\"\r\n#\r\n#     def __setitem__(self, key, value):\r\n#         if not isinstance(key, str):\r\n#             raise ValueError(\"Ключ должен быть строкой\")\r\n#\r\n#         if not isinstance(value, int):\r\n#             raise ValueError(\"Значение должно быть целым числом\")\r\n#\r\n#         s = self.sec % 60\r\n#         m = (self.sec // 60) % 60\r\n#         h = (self.sec // 3600) % 24\r\n#\r\n#         if key == \"hour\":\r\n#             self.sec = s + 60 * m + value * 3600\r\n#         if key == \"min\":\r\n#             self.sec = s + 60 * value + h * 3600\r\n#         if key == \"sec\":\r\n#             self.sec = value + 60 * m + h * 3600\r\n#\r\n#\r\n# c1 = Clock(80000)\r\n# print(c1.get_format_time())\r\n# print(c1[\"hour\"], c1[\"min\"], c1[\"sec\"])\r\n# c1[\"hour\"] = 10\r\n# c1[\"min\"] = 61\r\n# c1[\"sec\"] = 30\r\n# print(c1[\"hour\"], c1[\"min\"], c1[\"sec\"])\r\n# print(c1.get_format_time())\r\n# c2 = Clock(100)\r\n# if c1 >= c2:\r\n#     print(\"Время Больше\")\r\n# else:\r\n#     print(\"Время Меньше\")\r\n\r\n# c4 = Clock(300)\r\n\r\n# c3 = c1 + c2 + c4  # c3 = Clock(300)\r\n# c2 += c1\r\n# print(c1.get_format_time())\r\n# print(c2.get_format_time())\r\n# print(c4.get_format_time())\r\n# print(c3.get_format_time())\r\n\r\n#\r\n# class Student:\r\n#     def __init__(self, name, marks):\r\n#         self.name = name\r\n#         self.marks = list(marks)\r\n#\r\n#     def __getitem__(self, item):\r\n#         if 0 <= item < len(self.marks):\r\n#             return self.marks[item]\r\n#         else:\r\n#             # return \"Неверный индекс\"\r\n#             raise IndexError(\"Неверный индекс\")\r\n#\r\n#     def __setitem__(self, key, value):\r\n#         if not isinstance(key, int) or key < 0:\r\n#             raise TypeError(\"Индекс должен быть целым положительным числом\")\r\n#\r\n#         if key >= len(self.marks):\r\n#             off = key + 1 - len(self.marks)  # off = 10 + 1 - 5  = 6\r\n#             self.marks.extend([None] * off)  # self.marks.extend([None] * 6) => [None, None, None, None, None, None]\r\n#             # [5, 5, 3, 4, 5, None, None, None, None, None, None]\r\n#\r\n#         self.marks[key] = value\r\n#         # [5, 5, 3, 4, 5, None, None, None, None, None, 5]\r\n#\r\n#     def __delitem__(self, key):\r\n#         if not isinstance(key, int):\r\n#             raise TypeError(\"Индекс должен быть целым числом\")\r\n#         del self.marks[key]\r\n#\r\n#\r\n# s1 = Student('Сергей', (5, 5, 3, 4, 5))\r\n# print(s1[2])\r\n# s1[10] = 5\r\n# del s1[2]\r\n# print(s1.marks)\r\n# print(s1.marks[2])\r\n\r\n\r\n# from random import choice, randint\r\n#\r\n#\r\n# class Cat:\r\n#     def __init__(self, name, age, pol):\r\n#         self.name = name\r\n#         self.age = age\r\n#         self.pol = pol\r\n#\r\n#     def __str__(self):\r\n#         if self.pol == \"M\":\r\n#             return f\"{self.name} is good boy!!!\"\r\n#         elif self.pol == \"F\":\r\n#             return f\"{self.name} is good girl!!!\"\r\n#         else:\r\n#             return f\"{self.name} is good Kitty!!!\"\r\n#\r\n#     def __repr__(self):\r\n#         return f\"Cat(name='{self.name}', age={self.age}, pol='{self.pol}')\"\r\n#\r\n#     def __add__(self, other):\r\n#         if self.pol != other.pol:\r\n#             return [Cat(\"No name\", 0, choice([\"M\", \"F\"])) for _ in range(randint(1, 5))]  # range(0, 1)\r\n#         else:\r\n#             raise TypeError(\"Types are not supported!\")\r\n#\r\n#\r\n# cat1 = Cat(\"Tom\", 4, \"M\")\r\n# cat2 = Cat(\"Elsa\", 5, \"F\")\r\n# # cat3 = Cat(\"Murzik\", 3, \"M\")\r\n# print(cat1)\r\n# print(cat2)\r\n# # print(cat3)\r\n# print(cat1 + cat2)\r\n\r\n# class Rectangle:\r\n#     def __init__(self, w, h):\r\n#         self.w = w\r\n#         self.h = h\r\n#\r\n#     def get_perimetr(self):\r\n#         return 2 * (self.w + self.h)\r\n#\r\n#\r\n# class Square:\r\n#     def __init__(self, a):\r\n#         self.a = a\r\n#\r\n#     def get_perimetr(self):\r\n#         return 4 * self.a\r\n#\r\n#\r\n# class Triangle:\r\n#     def __init__(self, a, b, c):\r\n#         self.a = a\r\n#         self.b = b\r\n#         self.c = c\r\n#\r\n#     def get_perimetr(self):\r\n#         return self.a + self.b + self.c\r\n#\r\n#\r\n# r1 = Rectangle(1, 2)\r\n# r2 = Rectangle(3, 4)\r\n#\r\n# s1 = Square(10)\r\n# s2 = Square(20)\r\n#\r\n# t1 = Triangle(1, 2, 3)\r\n# t2 = Triangle(4, 5, 6)\r\n#\r\n# shape = [r1, r2, s1, s2, t1, t2]\r\n#\r\n# for g in shape:\r\n#     print(g.get_perimetr())\r\n# if isinstance(g, Rectangle):\r\n#     print(g.get_per_rect())\r\n# else:\r\n#     print(g.get_per_sq())\r\n\r\n# print(r1.get_per_rect(), r2.get_per_rect())\r\n# print(s1.get_per_sq(), s2.get_per_sq())\r\n\r\n\r\n# class Number:\r\n#     def __init__(self, value):  # 10\r\n#         self.value = value\r\n#\r\n#     def total(self, a):\r\n#         return self.value + int(a)  # 10 + 35\r\n#\r\n#\r\n# class Text:\r\n#     def __init__(self, value):  # \"Python\"\r\n#         self.value = value\r\n#\r\n#     def total(self, a):\r\n#         return len(self.value + str(a))  # len(\"Python35\")\r\n#\r\n#\r\n# t1 = Number(10)\r\n# t2 = Text(\"Python\")\r\n# print(t1.total(35))\r\n# print(t2.total(35))\r\n\r\n\r\n# class Cat:\r\n#     def __init__(self, name, age):\r\n#         self.name = name\r\n#         self.age = age\r\n#\r\n#     def info(self):\r\n#         return f\"Я кот. Меня зовут {self.name}. Мой возраст {self.age}\"\r\n#\r\n#     def make_sound(self):\r\n#         return f\"{self.name} мяукает\"\r\n#\r\n#\r\n# class Dog:\r\n#     def __init__(self, name, age):\r\n#         self.name = name\r\n#         self.age = age\r\n#\r\n#     def info(self):\r\n#         return f\"Я собака. Меня зовут {self.name}. Мой возраст {self.age}\"\r\n#\r\n#     def make_sound(self):\r\n#         return f\"{self.name} гавкает\"\r\n#\r\n#\r\n# cat1 = Cat(\"Пушок\", 2.5)\r\n# dog1 = Dog(\"Мухтар\", 4)\r\n# animal = [cat1, dog1]\r\n# for i in animal:\r\n#     print(i.info())\r\n#     print(i.make_sound())\r\n\r\n\r\n# class Cat:\r\n#     def __init__(self, name):\r\n#         self.name = name\r\n#\r\n#     def __repr__(self):\r\n#         return f\"{self.__class__}: {self.name}\"\r\n#\r\n#     def __str__(self):\r\n#         return f\"{self.name}\"\r\n#\r\n#\r\n# cat = Cat(\"Пушок\")\r\n# print(cat)\r\n\r\n\r\n# class Point:\r\n#     def __init__(self, *args):\r\n#         self.coord = args\r\n#\r\n#     def __len__(self):\r\n#         return len(self.coord)\r\n#\r\n#\r\n# p = Point(3, 1, 2)\r\n# print(len(p))\r\n\r\n\r\n# class Human:\r\n#     def __init__(self, last_name, first_name, age):\r\n#         self.last_name = last_name\r\n#         self.first_name = first_name\r\n#         self.age = age\r\n#\r\n#     def info(self):\r\n#         print(f\"\\n{self.last_name} {self.first_name} {self.age}\", end=\" \")\r\n#\r\n#\r\n# class Student(Human):\r\n#     def __init__(self, last_name, first_name, age, speciality, group, rating):\r\n#         self.speciality = speciality\r\n#         self.group = group\r\n#         self.rating = rating\r\n#         super().__init__(last_name, first_name, age)\r\n#\r\n#     def info(self):\r\n#         super().info()\r\n#         print(f\"{self.speciality} {self.group} {self.rating}\", end=\" \")\r\n#\r\n#\r\n# class Teacher(Human):\r\n#     def __init__(self, last_name, first_name, age, speciality, experience):\r\n#         super().__init__(last_name, first_name, age)\r\n#         self.speciality = speciality\r\n#         self.experience = experience\r\n#\r\n#     def info(self):\r\n#         super().info()\r\n#         print(f\"{self.speciality} {self.experience}\", end=\" \")\r\n#\r\n#\r\n# class Graduate(Student):\r\n#     def __init__(self, last_name, first_name, age, speciality, group, rating, topic):\r\n#         super().__init__(last_name, first_name, age, speciality, group, rating)\r\n#         self.topic = topic\r\n#\r\n#     def info(self):\r\n#         super().info()\r\n#         print(f\"{self.topic}\", end=\" \")\r\n#\r\n#\r\n# group1 = [\r\n#     Student(\"Батодалаев\", \"Даши\", 16, \"ГК\", \"Web_011\", 5),\r\n#     Student(\"Загидуллин\", \"Линар\", 32, \"РПО\", \"PD_011\", 5),\r\n#     Graduate(\"Шугани\", \"Сергей\", 15, \"РПО\", \"PD_011\", 5, \"Защита персональных данных\"),\r\n#     Teacher(\"Даньшин\", \"Андрей\", 38, \"Астрофизика\", 110),\r\n#     Student(\"Маркин\", \"Даниил\", 17, \"ГК\", \"Python_011\", 5),\r\n#     Teacher(\"Башкиров\", \"Алексей\", 45, \"Разработка приложений\", 20)\r\n# ]\r\n#\r\n# for i in group1:\r\n#     i.info()\r\n\r\n# import geometry\r\n#\r\n#\r\n# class Point:\r\n#     __slots__ = ('x', 'y', '__length')\r\n#\r\n#     def __init__(self, x, y):\r\n#         self.x = x\r\n#         self.y = y\r\n#         self.length = geometry.sqrt(x * x + y * y)\r\n#\r\n#     @property\r\n#     def length(self):\r\n#         return self.__length\r\n#\r\n#     @length.setter\r\n#     def length(self, value):\r\n#         self.__length = value\r\n#\r\n#\r\n# pt = Point(1, 2)\r\n# print(pt.length)\r\n# pt.length = 10\r\n# print(pt.length)\r\n# # print(pt.__dict__)\r\n\r\n\r\n# class Point:\r\n#     __slots__ = ('x', 'y')\r\n#\r\n#     def __init__(self, x, y):\r\n#         self.x = x\r\n#         self.y = y\r\n#\r\n#\r\n# class Point2D:\r\n#     def __init__(self, x, y):\r\n#         self.x = x\r\n#         self.y = y\r\n#\r\n#\r\n# pt = Point(1, 2)\r\n# pt2 = Point2D(1, 2)\r\n# # print(pt2.__dict__)\r\n# print(\"pt =\", pt.__sizeof__())\r\n# print(\"pt2 =\", pt2.__sizeof__() + pt2.__dict__.__sizeof__())\r\n\r\n\r\n# class Point:\r\n#     __slots__ = ('x', 'y')\r\n#\r\n#     def __init__(self, x, y):\r\n#         self.x = x\r\n#         self.y = y\r\n#\r\n#\r\n# class Point3D(Point):\r\n#     __slots__ = 'z',\r\n#\r\n#\r\n# pt = Point(1, 2)\r\n# pt3 = Point3D(10, 20)\r\n# pt3.z = 30\r\n# print(pt3.x, pt3.y, pt3.z)\r\n# print(pt3.__dict__)\r\n\r\n\r\n# Функторы\r\n\r\n# class Counter:\r\n#     def __init__(self):\r\n#         self.__counter = 0\r\n#\r\n#     def __call__(self, *args, **kwargs):\r\n#         self.__counter += 1\r\n#         print(self.__counter)\r\n#\r\n#\r\n# c1 = Counter()\r\n# c1()\r\n# c1()\r\n# c1()\r\n# c2 = Counter()\r\n# c2()\r\n# c2()\r\n#\r\n# c1()\r\n# c1()\r\n\r\n# class StripChars:\r\n#     def __init__(self, chars):\r\n#         self.__chars = chars\r\n#\r\n#     def __call__(self, string):\r\n#         if not isinstance(string, str):\r\n#             raise ValueError(\"Аргумент должен быть строкой\")\r\n#         return string.strip(self.__chars)\r\n#\r\n#\r\n# s1 = StripChars(\"?:!.; \")\r\n# print(s1(\" ?Hello World!; \"))\r\n#\r\n#\r\n# def strip_chars(chars):\r\n#     def wrap(string):\r\n#         if not isinstance(string, str):\r\n#             raise ValueError(\"Аргумент должен быть строкой\")\r\n#         return string.strip(chars)\r\n#\r\n#     return wrap\r\n#\r\n#\r\n# s2 = strip_chars(\"?:!.; \")\r\n# print(s2(\" ?Hello World!; \"))\r\n\r\n\r\n# class MyDecorator:\r\n#     def __init__(self, func):\r\n#         self.func = func\r\n#\r\n#     def __call__(self):\r\n#         print(\"*\" * 20)\r\n#         self.func()\r\n#         print(\"*\" * 20)\r\n#\r\n#\r\n# @MyDecorator\r\n# def func1():\r\n#     print(\"func\")\r\n#\r\n#\r\n# func1()\r\n\r\n\r\n# class MyDecorator:\r\n#     def __init__(self, func):\r\n#         self.func = func\r\n#\r\n#     def __call__(self, x, y):\r\n#         res = self.func(x, y)\r\n#         star = \"*\" * 20\r\n#         return f\"{star}\\n{res}\\n{star}\"\r\n#\r\n#\r\n# @MyDecorator\r\n# def func1(a, b):\r\n#     return a * b\r\n#\r\n#\r\n# @MyDecorator\r\n# def func2(a, b):\r\n#     return a / b\r\n#\r\n#\r\n# print(func1(2, 5))\r\n# print(func2(6, 3))\r\n\r\n# class Power:\r\n#     def __init__(self, func):\r\n#         self.func = func\r\n#\r\n#     def __call__(self, a, b):\r\n#         res = self.func(a, b)\r\n#         return res ** 2\r\n#\r\n#\r\n# @Power\r\n# def mult(a, b):\r\n#     return a * b\r\n#\r\n#\r\n# print(mult(2, 3))\r\n\r\n\r\n# class MyDecorator:\r\n#     def __init__(self, func):\r\n#         self.func = func\r\n#\r\n#     def __call__(self, *args, **kwargs):\r\n#         res = self.func(*args, **kwargs)\r\n#         star = \"*\" * 20\r\n#         return f\"{star}\\n{res}\\n{star}\"\r\n#\r\n#\r\n# @MyDecorator\r\n# def func1(a, b):\r\n#     return a * b\r\n#\r\n#\r\n# @MyDecorator\r\n# def func2(a, b, c):\r\n#     return a * b * c\r\n#\r\n#\r\n# print(func1(2, 5))\r\n# print(func2(6, c=3, b=2))\r\n\r\n\r\n# class MyDecorator:\r\n#     def __init__(self, arg):\r\n#         self.name = arg\r\n#\r\n#     def __call__(self, func):\r\n#         def wrap(a, b):\r\n#             print(\"*\" * 20)\r\n#             print(self.name)\r\n#             func(a, b)\r\n#             print(\"*\" * 20)\r\n#\r\n#         return wrap\r\n#\r\n#\r\n# @MyDecorator(\"test\")\r\n# def func1(a, b):\r\n#     print(a, b)\r\n#\r\n#\r\n# func1(2, 5)\r\n\r\n# class Power:\r\n#     def __init__(self, arg):\r\n#         self.arg = arg\r\n#\r\n#     def __call__(self, func):\r\n#         def wrap(a, b):\r\n#             return func(a, b) ** self.arg\r\n#\r\n#         return wrap\r\n#\r\n#\r\n# @Power(4)\r\n# def mult(a, b):\r\n#     return a * b\r\n#\r\n#\r\n# print(mult(2, 2))\r\n\r\n#\r\n# def dec(fn):\r\n#     def wrap(*args, **kwargs):\r\n#         print(\"*\" * 20)\r\n#         fn(*args, **kwargs)\r\n#         print(\"*\" * 20)\r\n#     return wrap\r\n#\r\n#\r\n# class Person:\r\n#     def __init__(self, name, surname):\r\n#         self.name = name\r\n#         self.surname = surname\r\n#\r\n#     @dec\r\n#     def info(self):\r\n#         print(f\"{self.name} {self.surname}\")\r\n#\r\n#\r\n# p1 = Person(\"Виталий\", \"Карасев\")\r\n# p1.info()\r\n\r\n\r\n# def decorator(cls):\r\n#     class Wrap(cls):\r\n#         def double(self, value):\r\n#             return value * 2\r\n#\r\n#     return Wrap\r\n#\r\n#\r\n# @decorator\r\n# class Actual:\r\n#     def __init__(self):\r\n#         print(\"Инициализатор Actual\")\r\n#\r\n#     def quad(self, value):\r\n#         return value * 4\r\n#\r\n#\r\n# obj = Actual()\r\n#\r\n# print(obj.quad(4))\r\n# print(obj.double(4))\r\n\r\n\r\n# class Shape:\r\n#     def __init__(self, color):\r\n#         self.color = color\r\n#\r\n#     def draw(self):\r\n#         raise NotImplementedError(\"В дочернем классе должен быть определен метод draw()\")\r\n#\r\n#\r\n# class Triangle(Shape):\r\n#     def __init__(self, side_x, side_y, side_z, color):\r\n#         super().__init__(color)\r\n#         self.side_x = side_x\r\n#         self.side_y = side_y\r\n#         self.side_z = side_z\r\n#\r\n#     def draw(self):\r\n#         rows = []\r\n#         for n in range(self.side_y):\r\n#             rows.append(\" \" * n + \"*\" * (self.side_x - 2 * n))\r\n#         print(\"\\n\".join(reversed(rows)))\r\n#\r\n#\r\n# c = Triangle(11, 6, 6, \"yellow\")\r\n# c.draw()\r\n\r\n\r\n# Дескрипторы\r\n# __get__()\r\n# __set__()\r\n# __delete__()\r\n# __set_name__()\r\n\r\n# class String:\r\n#     def __init__(self, value=None):\r\n#         if value:\r\n#             self.set(value)\r\n#\r\n#     def set(self, value):\r\n#         if not isinstance(value, str):\r\n#             raise TypeError(f\"{value} должно быть строкой\")\r\n#         self.__value = value\r\n#\r\n#     def get(self):\r\n#         return self.__value\r\n#\r\n#\r\n# class Person:\r\n#     def __init__(self, name, surname):\r\n#         self.name = String(name)\r\n#         self.surname = String(surname)\r\n#\r\n#     # @property\r\n#     # def name(self):\r\n#     #     return self.__name\r\n#     #\r\n#     # @name.setter\r\n#     # def name(self, value):\r\n#     #     self.__name = value\r\n#     #\r\n#     # @property\r\n#     # def surname(self):\r\n#     #     return self.__surname\r\n#     #\r\n#     # @surname.setter\r\n#     # def surname(self, value):\r\n#     #     self.__surname = value\r\n#\r\n#\r\n# p = Person(\"Иван\", \"Петров\")\r\n# # p.name.set('Владимир')\r\n# print(p.name.get())\r\n\r\n\r\n# class ValidString:\r\n#     def __set_name__(self, owner, name):\r\n#         self.__name = name\r\n#\r\n#     def __get__(self, instance, owner):\r\n#         # print(owner)\r\n#         return instance.__dict__[self.__name]\r\n#\r\n#     def __set__(self, instance, value):\r\n#         if not isinstance(value, str):\r\n#             raise ValueError(f\"{self.__name} должно быть строкой\")\r\n#         instance.__dict__[self.__name] = value\r\n#\r\n#\r\n# class Person:\r\n#     name = ValidString()\r\n#     surname = ValidString()\r\n#\r\n#     def __init__(self, name, surname):\r\n#         self.name = name\r\n#         self.surname = surname\r\n#\r\n#\r\n# p = Person(\"Иван\", \"Петров\")\r\n# p.surname = \"Иванов\"\r\n# print(p.name)\r\n# print(p.surname)\r\n# print(p.__dict__)\r\n#\r\n# print(\"*\" * 20)\r\n\r\n# class NonNegative:\r\n#     def __set_name__(self, owner, name):\r\n#         self.name = name\r\n#\r\n#     def __get__(self, instance, owner):\r\n#         return instance.__dict__[self.name]\r\n#\r\n#     def __set__(self, instance, value):\r\n#         if value < 0:\r\n#             raise ValueError('Значение должно быть положительным.')\r\n#         instance.__dict__[self.name] = value\r\n#\r\n#\r\n# class Order:\r\n#     price = NonNegative()\r\n#     quantity = NonNegative()\r\n#\r\n#     def __init__(self, name, price, quantity):\r\n#         self.name = name\r\n#         self.price = price\r\n#         self.quantity = quantity\r\n#\r\n#     def total(self):\r\n#         return self.price * self.quantity\r\n#\r\n#\r\n# apple = Order('apple', 5, 10)\r\n# # apple.price = -10\r\n# print(apple.total())\r\n# class Integer:\r\n#     @staticmethod\r\n#     def verify_coord(coord):\r\n#         if not isinstance(coord, int):\r\n#             raise TypeError(f\"Координата {coord} должна быть целым числом\")\r\n#\r\n#     def __set_name__(self, owner, name):\r\n#         self.name = \"_\" + name\r\n#\r\n#     def __get__(self, instance, owner):\r\n#         # return instance.__dict__[self.name]\r\n#         return getattr(instance, self.name)\r\n#\r\n#     def __set__(self, instance, value):\r\n#         self.verify_coord(value)\r\n#         # instance.__dict__[self.name] = value\r\n#         setattr(instance, self.name, value)\r\n#\r\n#\r\n# class Point3D:\r\n#     x = Integer()\r\n#     y = Integer()\r\n#     z = Integer()\r\n#\r\n#     def __init__(self, x, y, z):\r\n#         self.x = x\r\n#         self.y = y\r\n#         self.z = z\r\n#\r\n#\r\n# p1 = Point3D(1, 2, 3)\r\n# p1.x = 5\r\n# print(p1.x)\r\n# print(p1.__dict__)\r\n\r\n# from folder.car import electrocar\r\n#\r\n#\r\n# def run():\r\n#     print(\"Hello\")\r\n#     car1 = electrocar.ElectroCar('Tesla', 'T', 2018, 99000)\r\n#     car1.show_car()\r\n#     car1.description_battery()\r\n#\r\n#\r\n# if __name__ == '__main__':\r\n#     run()\r\n\r\n\r\n# Упаковка данных (сериализация)\r\n# Распаковка данных (десериализация)\r\n\r\n# marshal (*.pyc)\r\n# pickle\r\n# json\r\n\r\n# import pickle\r\n\r\n\r\n# file_name = 'basket.txt'\r\n#\r\n# shop_list = {\r\n#     'фрукты': ('яблоки', 'манго'),\r\n#     'овощи': 'морковь',\r\n#     'бюджет': 1000\r\n# }\r\n#\r\n# with open(file_name, 'wb') as fh:\r\n#     pickle.dump(shop_list, fh)\r\n#\r\n# with open(file_name, 'rb') as fh:\r\n#     shop_list2 = pickle.load(fh)\r\n# print(shop_list2)\r\n\r\n\r\n# class Test:\r\n#     num = 35\r\n#     st = 'привет'\r\n#     lst = [1, 2, 3]\r\n#     d = {'first': 'a', 'second': 2}\r\n#     tpl = (22, 63)\r\n#\r\n#     def __str__(self):\r\n#         return f\"Число: {Test.num}\\nСтрока: {Test.st}\\nСписок: {Test.lst}\\nСловарь: {Test.d}\\nКортеж: {Test.tpl}\"\r\n#\r\n#\r\n# obj = Test()\r\n#\r\n# my_obj = pickle.dumps(obj)\r\n# print(my_obj)\r\n#\r\n# my_obj2 = pickle.loads(my_obj)\r\n# print(my_obj2)\r\n\r\n\r\n# class Test2:\r\n#     def __init__(self):\r\n#         self.a = 35\r\n#         self.b = 'test'\r\n#         self.c = lambda x: x * x\r\n#\r\n#     def __str__(self):\r\n#         return f\"{self.a} {self.b} {self.c(2)}\"\r\n#\r\n#     def __getstate__(self):\r\n#         attr = self.__dict__.copy()\r\n#         del attr['c']\r\n#         return attr\r\n#\r\n#     def __setstate__(self, state):\r\n#         self.__dict__ = state\r\n#         self.c = lambda x: x * x\r\n#\r\n#\r\n# item1 = Test2()\r\n# item2 = pickle.dumps(item1)\r\n# item3 = pickle.loads(item2)\r\n# print(item3.__dict__)\r\n# print(item3)\r\n\r\n\r\n# import json\r\n\r\n# data = {\r\n#     'name': 'Olga',\r\n#     'age': 35,\r\n#     '20': None,\r\n#     'True': 1,\r\n#     'hobbies': ('running', 'singing'),\r\n#     'children': [\r\n#         {\r\n#             'first_name': 'Alice',\r\n#             'age': 6\r\n#         }\r\n#     ]\r\n# }\r\n#\r\n# # with open('data.json', 'w') as fw:\r\n# #     json.dump(data, fw, indent=4)\r\n# #\r\n# # with open('data.json', 'r') as fw:\r\n# #     data1 = json.load(fw)\r\n# # print(data1)\r\n# # print(data1['name'])\r\n# json_string = json.dumps(data, sort_keys=True)\r\n# print(json_string)\r\n# print(json_string[10:14])\r\n#\r\n# data2 = json.loads(json_string)\r\n# print(data2)\r\n# print(data2['name'])\r\n\r\n\r\n# x = {\r\n#     'name': 'Виктор'\r\n# }\r\n# y = {\r\n#     'name': 'Виктор'\r\n# }\r\n# # a = json.dumps(x)\r\n# # print(a)\r\n# # print(json.loads(a))\r\n# print(json.dumps(x))\r\n# print(json.dumps(x, ensure_ascii=False))\r\n\r\n\r\n# import json\r\n# from random import choice\r\n#\r\n#\r\n# def gen_person():\r\n#     name = ''\r\n#     tel = ''\r\n#\r\n#     letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\r\n#     nums = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0']\r\n#\r\n#     while len(name) != 7:\r\n#         name += choice(letters)\r\n#     # print(name)\r\n#\r\n#     while len(tel) != 10:\r\n#         tel += choice(nums)\r\n#     # print(tel)\r\n#\r\n#     person = {\r\n#         'name': name,\r\n#         'tel': tel\r\n#     }\r\n#     return person\r\n#\r\n#\r\n# def write_json(person_dict):  # {'name': 'gadeefa', 'tel': '4193676522'}\r\n#     try:\r\n#         data = json.load(open('person.json'))  # [{'name': 'gadeefa', 'tel': '4193676522'}]\r\n#     except FileNotFoundError:\r\n#         data = []\r\n#\r\n#     data.append(person_dict)  # [{'name': 'gadeefa', 'tel': '4193676522'}, {'name': 'gadeefa', 'tel': '4193676522'}]\r\n#     with open('person.json', 'w') as f:\r\n#         json.dump(data, f, indent=2)\r\n#\r\n#\r\n# for i in range(5):\r\n#     write_json(gen_person())\r\n\r\n# {'a':{}, 'b':{}}\r\n\r\n# import json\r\n#\r\n#\r\n# class Student:\r\n#     def __init__(self, name, marks):\r\n#         self.name = name\r\n#         self.marks = marks\r\n#\r\n#     def __str__(self):\r\n#         a = ', '.join(map(str, self.marks))\r\n#         return f\"Студент: {self.name}: {a}\"\r\n#\r\n#     def add_mark(self, mark):\r\n#         self.marks.append(mark)\r\n#\r\n#     def delete_mark(self, index):\r\n#         self.marks.pop(index)\r\n#\r\n#     def edit_mark(self, index, new_mark):\r\n#         self.marks[index] = new_mark\r\n#\r\n#     def average_mark(self):\r\n#         return round(sum(self.marks) / len(self.marks), 2)\r\n#\r\n#     @staticmethod\r\n#     def dump_to_json(stud, filename):\r\n#         try:\r\n#             data = json.load(open(filename))\r\n#         except FileNotFoundError:\r\n#             data = []\r\n#\r\n#         data.append({'name': stud.name, 'marks': stud.marks})\r\n#         with open(filename, 'w') as f:\r\n#             json.dump(data, f, indent=2)\r\n#\r\n#     @staticmethod\r\n#     def load_from_file(filename):\r\n#         with open(filename, 'r') as f:\r\n#             print(json.load(f))\r\n#\r\n#\r\n# class Group:\r\n#     def __init__(self, students, group):\r\n#         self.students = students\r\n#         self.group = group\r\n#\r\n#     def __str__(self):\r\n#         a = ''\r\n#         for i in self.students:\r\n#             a += str(i) + '\\n'\r\n#         return f\"Группа: {self.group}\\n{a}\"\r\n#\r\n#     def add_student(self, student):\r\n#         self.students.append(student)\r\n#\r\n#     def remove_student(self, index):\r\n#         return self.students.pop(index)\r\n#\r\n#     @staticmethod\r\n#     def change_group(group1, group2, index):\r\n#         return group2.add_student(group1.remove_student(index))\r\n#\r\n#     def dump_group(self, file):\r\n#         try:\r\n#             data = json.load(open(file))\r\n#         except FileNotFoundError:\r\n#             data = []\r\n#\r\n#         with open(file, 'w') as f:  #\r\n#             stud_list = []\r\n#             for i in self.students:\r\n#                 stud_list.append([i.name, i.marks])\r\n#             data.append(stud_list)\r\n#             json.dump(data, f, indent=2)\r\n#\r\n#     @staticmethod\r\n#     def upload_journal(file):\r\n#         with open(file) as f:\r\n#             print(json.load(f))\r\n#\r\n#\r\n# st1 = Student('Bodnya', [5, 4, 3, 4, 5, 3])\r\n# st2 = Student('Nikolaenko', [2, 3, 5, 4, 2])\r\n# st3 = Student('Birukov', [3, 5, 3, 2, 5, 4])\r\n# file1 = 'student.json'\r\n# file2 = 'group.json'\r\n# # Student.dump_to_json(st1, file1)\r\n# # Student.dump_to_json(st2, file1)\r\n# # Student.dump_to_json(st3, file1)\r\n# # Student.load_from_file(file1)\r\n# sts = [st1, st2]\r\n# my_group = Group(sts, 'ГК Python')\r\n# # my_group.dump_group(file2)\r\n# # print(my_group)\r\n# # my_group.add_student(st3)\r\n# # # print(my_group)\r\n# # my_group.remove_student(1)\r\n# # # print(my_group)\r\n# group22 = [st3]\r\n# my_group2 = Group(group22, 'ГК Web')\r\n# my_group2.dump_group(file2)\r\n# Group.upload_journal(file2)\r\n# # print(my_group)\r\n# # print(my_group2)\r\n# Group.change_group(my_group, my_group2, 0)\r\n# print(my_group)\r\n# print(my_group2)\r\n# print(st1)\r\n# st1.add_mark(4)\r\n# print(st1)\r\n# st1.delete_mark(2)\r\n# print(st1)\r\n# st1.edit_mark(4, 5)\r\n# print(st1)\r\n# print(st1.average_mark())\r\n\r\n\r\n# pip install requests\r\n\r\n# import requests\r\n# import json\r\n#\r\n# response = requests.get(\"https://jsonplaceholder.typicode.com/todos\")\r\n# # print(type(response.text))\r\n# # print(response.text[:50])\r\n# todos = json.loads(response.text)\r\n# # print(todos[:10])\r\n# # print(type(todos))\r\n#\r\n# todos_by_user = {}\r\n# for todo in todos:\r\n#     if todo['completed']:\r\n#         try:\r\n#             todos_by_user[todo['userId']] += 1  # todos_by_user[2] += 1\r\n#             # {1: 11, 2: 2}\r\n#         except KeyError:\r\n#             todos_by_user[todo['userId']] = 1\r\n# print(todos_by_user)\r\n#\r\n# top_users = sorted(todos_by_user.items(), key=lambda x: x[1], reverse=True)\r\n# print(top_users)\r\n#\r\n# max_complete = top_users[0][1]\r\n# print(max_complete)\r\n#\r\n# users = []\r\n# for user, num_complete in top_users:\r\n#     if num_complete < max_complete:\r\n#         break\r\n#     users.append(str(user))  # ['5', '10']\r\n#\r\n# print(users)\r\n#\r\n# max_users = \" and \".join(users)\r\n# print(max_users)\r\n#\r\n# s = \"s\" if len(users) > 1 else \"\"\r\n# print(f\"User{s} {max_users} completed {max_complete} TODOs\")\r\n#\r\n#\r\n# def keep(todo):\r\n#     is_complete = todo['completed']\r\n#     hax_max_count = str(todo['userId']) in users\r\n#     return is_complete and hax_max_count\r\n#\r\n#\r\n# with open('filtered.json', 'w') as f:\r\n#     filtered_todos = list(filter(keep, todos))\r\n#     json.dump(filtered_todos, f, indent=2)\r\n\r\n\r\n# CSV (Comma Separated Values)\r\n\r\nimport csv\r\n\r\n# with open('data.csv') as f:\r\n#     file_reader = csv.reader(f, delimiter=\";\")  # []\r\n#     count = 0\r\n#     for row in file_reader:\r\n#         if count == 0:\r\n#             print(f\"Файл содержит столбцы: {', '.join(row)}\")\r\n#         else:\r\n#             print(f\"\\t{row[0]} - {row[1]}. Родился в {row[2]} году.\")\r\n#         count += 1\r\n#     print(f\"Всего в файле {count} строки.\")\r\n\r\n\r\n# with open('data.csv') as f:\r\n#     file_names = ['Имя', 'Профессия', 'Год рождения']\r\n#     file_reader = csv.DictReader(f, delimiter=\";\", fieldnames=file_names)  # {}\r\n#     count = 0\r\n#     for row in file_reader:\r\n#         # print(row)\r\n#         if count == 0:\r\n#             print(f\"Файл содержит столбцы: {', '.join(row)}\")\r\n#         print(f\"\\t{row['Имя']} - {row['Профессия']}. Родился в {row['Год рождения']} году.\")\r\n#         count += 1\r\n\r\n\r\n# with open('student.csv', 'w') as f:\r\n#     write = csv.writer(f, delimiter=';', lineterminator='\\r')\r\n#     write.writerow(['Имя', 'Класс', 'Возраст'])\r\n#     write.writerow(['Женя', '9', '15'])\r\n#     write.writerow(['Саша', '5', '12'])\r\n#     write.writerow(['Маша', '11', '18'])\r\n\r\n\r\n# data = [['hostname', 'vendor', 'model', 'location'],\r\n#         ['sw1', 'Cisco', '3750', 'London, Best str'],\r\n#         ['sw2', 'Cisco', '3850', 'Liverpool, Better str'],\r\n#         ['sw3', 'Cisco', '3650', 'Liverpool, Better str'],\r\n#         ['sw4', 'Cisco', '3650', 'London, Best str']]\r\n#\r\n#\r\n# with open('sw_data.csv', 'w') as f:\r\n#     writer = csv.writer(f, delimiter=';', lineterminator='\\r')\r\n#     # for row in data:\r\n#     #     writer.writerow(row)\r\n#     writer.writerows(data)\r\n#\r\n#\r\n# with open('sw_data.csv', 'r') as f:\r\n#     print(f.read())\r\n\r\n# with open('stud_1.csv', 'w') as f:\r\n#     name = [\"Имя\", \"Возраст\"]\r\n#     file_writer = csv.DictWriter(f, delimiter=';', lineterminator='\\r', fieldnames=name)\r\n#     file_writer.writeheader()\r\n#     file_writer.writerow({\"Имя\": \"Саша\", \"Возраст\": \"6\"})\r\n#     file_writer.writerow({\"Имя\": \"Маша\", \"Возраст\": \"15\"})\r\n#     file_writer.writerow({\"Имя\": \"Вова\", \"Возраст\": \"14\"})\r\n\r\n\r\n# data = [{\r\n#     'hostname': 'sw1',\r\n#     'location': 'London',\r\n#     'model': '3750',\r\n#     'vendor': 'Cisco'\r\n# }, {\r\n#     'hostname': 'sw2',\r\n#     'location': 'Liverpool',\r\n#     'model': '3850',\r\n#     'vendor': 'Cisco'\r\n# }, {\r\n#     'hostname': 'sw3',\r\n#     'location': 'Liverpool',\r\n#     'model': '3650',\r\n#     'vendor': 'Cisco'\r\n# }, {\r\n#     'hostname': 'sw4',\r\n#     'location': 'London',\r\n#     'model': '3650',\r\n#     'vendor': 'Cisco'\r\n# }]\r\n#\r\n# with open('dict_writer.csv', 'w') as f:\r\n#     writer = csv.DictWriter(f, delimiter=';', lineterminator='\\r', fieldnames=list(data[0].keys()))\r\n#     writer.writeheader()\r\n#     for d in data:\r\n#         writer.writerow(d)\r\n\r\n\r\n# Парсинг данных с сайта\r\n\r\n# pip install beatifulsoup4 или bs4\r\n\r\n# from bs4 import BeautifulSoup\r\n\r\n# f = open('index.html').read()\r\n# soup = BeautifulSoup(f, 'html.parser')\r\n# # row = soup.find_all(\"div\", class_=\"row\")[2]\r\n# # row = soup.find(\"div\", class_=\"name\")\r\n# # row = soup.find_all(\"div\", class_=\"row\")[1].find(\"div\", class_=\"links\")\r\n# # row = soup.find_all(\"div\", class_=\"links\")[1]\r\n# # row = soup.find_all(\"div\", {\"data-set\": \"salary\"})\r\n# # row = soup.find(\"div\", string=\"Alena\").parent.parent\r\n# # row = soup.find(\"div\", string=\"Alena\").find_parent(class_=\"row\")\r\n# # row = soup.find(\"div\", id=\"whois3\").find_next_sibling()\r\n# row = soup.find(\"div\", id=\"whois3\").find_previous_sibling()\r\n# print(row)\r\n\r\n# def get_copywriter(tag):\r\n#     whois = tag.find('div', class_=\"whois\")\r\n#     if \"Copywriter\" in whois:\r\n#         return tag\r\n#     return None\r\n#\r\n#\r\n# f = open('index.html', encoding=\"utf-8\").read()\r\n# soup = BeautifulSoup(f, 'html.parser')\r\n# copywriter = []\r\n# row = soup.find_all(\"div\", class_='row')\r\n# for i in row:\r\n#     cw = get_copywriter(i)\r\n#     if cw:\r\n#         copywriter.append(cw)\r\n# print(copywriter)\r\n# import re\r\n#\r\n#\r\n# def get_salary(s):\r\n#     pattern = r'\\d+'\r\n#     # res = re.findall(pattern, s)[0]\r\n#     res = re.search(pattern, s).group()\r\n#     print(res)\r\n#\r\n#\r\n# f = open('index.html', encoding=\"utf-8\").read()\r\n# soup = BeautifulSoup(f, 'html.parser')\r\n# row = soup.find_all(\"div\", {\"data-set\": \"salary\"})\r\n# for i in row:\r\n#     get_salary(i.text)\r\n\r\n# import requests\r\n# from bs4 import BeautifulSoup\r\n#\r\n#\r\n# # res = requests.get('https://ru.wordpress.org/')\r\n# # # print(res.status_code)\r\n# # # print(res.headers['content-type'])\r\n# # # print(res.content)\r\n# # print(res.text)\r\n# # print(type(res.text))\r\n#\r\n# def get_html(url):\r\n#     res = requests.get(url)\r\n#     return res.text\r\n#\r\n#\r\n# def get_data(html):\r\n#     soup = BeautifulSoup(html, \"lxml\")  # pip install lxml\r\n#     p1 = soup.find(\"header\", id=\"masthead\").find(\"p\", class_=\"site-title\").text\r\n#     return p1\r\n#\r\n#\r\n# def main():\r\n#     url = 'https://ru.wordpress.org/'\r\n#     print(get_data(get_html(url)))\r\n#\r\n#\r\n# if __name__ == '__main__':\r\n#     main()\r\n\r\n\r\n# import requests\r\n# from bs4 import BeautifulSoup\r\n# import re\r\n# import csv\r\n#\r\n#\r\n# def get_html(url):\r\n#     res = requests.get(url)\r\n#     return res.text\r\n#\r\n#\r\n# def refined(s):\r\n#     return re.sub(r\"\\D+\", \"\", s)\r\n#\r\n#\r\n# def write_csv(data):\r\n#     with open('plugins.csv', 'a') as f:\r\n#         writer = csv.writer(f, delimiter=';', lineterminator='\\r')\r\n#\r\n#         writer.writerow((data['name'], data['url'], data['rating']))\r\n#\r\n#\r\n# def get_data(html):\r\n#     soup = BeautifulSoup(html, \"lxml\")\r\n#     p1 = soup.find_all('section', class_=\"plugin-section\")[1]\r\n#     plugins = p1.find_all('article')\r\n#\r\n#     for plugin in plugins:\r\n#         name = plugin.find('h3').text\r\n#         url = plugin.find('h3').find(\"a\").get('href')\r\n#         # url = plugin.find('h3').find(\"a\")['href']\r\n#         rating = plugin.find(\"span\", class_=\"rating-count\").find('a').text\r\n#         r = refined(rating)\r\n#         data = {'name': name, \"url\": url, \"rating\": r}\r\n#         write_csv(data)\r\n#\r\n#\r\n# def main():\r\n#     url = 'https://ru.wordpress.org/plugins/'\r\n#     get_data(get_html(url))\r\n#\r\n#\r\n# if __name__ == '__main__':\r\n#     main()\r\n\r\n# import json\r\n# # data = {}\r\n#\r\n#\r\n# class CountryCapital:\r\n#     @staticmethod\r\n#     def load(file_name):\r\n#         try:\r\n#             data = json.load(open(file_name))\r\n#         except FileNotFoundError:\r\n#             data = {}\r\n#         finally:\r\n#             return data\r\n#\r\n#     @staticmethod\r\n#     def add_country(file_name):\r\n#         new_country = input(\"Введите название страны: \")\r\n#         new_capital = input(\"Введите название столицы: \")\r\n#         # try:\r\n#         #     data1 = json.load(open(file_name))\r\n#         # except FileNotFoundError:\r\n#         #     data1 = {}\r\n#         data1 = CountryCapital.load(file_name)\r\n#\r\n#         data1[new_country] = new_capital\r\n#\r\n#         with open(file_name, 'w') as f:\r\n#             json.dump(data1, f, indent=2)\r\n#\r\n#     @staticmethod\r\n#     def delete_country(file_name):\r\n#         del_country = input('Введите название страны: ')\r\n#         # try:\r\n#         #     data1 = json.load(open(file_name))\r\n#         # except FileNotFoundError:\r\n#         #     data1 = {}\r\n#         data1 = CountryCapital.load(file_name)\r\n#\r\n#         if del_country in data1:\r\n#             del data1[del_country]\r\n#\r\n#             with open(file_name, 'w') as f:\r\n#                 json.dump(data1, f, indent=2)\r\n#         else:\r\n#             print(\"Такой страны в базе нет\")\r\n#\r\n#     @staticmethod\r\n#     def search_data(file_name):\r\n#         # try:\r\n#         #     data1 = json.load(open(file_name))\r\n#         # except FileNotFoundError:\r\n#         #     data1 = {}\r\n#         data1 = CountryCapital.load(file_name)\r\n#         country = input(\"Введите название страны: \")\r\n#         if country in data1:\r\n#             print(f\"Страна {country}, столица {data1[country]} есть в словаре\")\r\n#         else:\r\n#             print(f\"Страны {country} нет в словаре\")\r\n#\r\n#     @staticmethod\r\n#     def edit_data(file_name):\r\n#         country = input(\"Введите страну для корректировки: \")\r\n#         new_capital = input(\"Введите новое название столицы: \")\r\n#         # try:\r\n#         #     data1 = json.load(open(file_name))\r\n#         # except FileNotFoundError:\r\n#         #     data1 = {}\r\n#         data1 = CountryCapital.load(file_name)\r\n#\r\n#         if country in data1:\r\n#             data1[country] = new_capital\r\n#\r\n#             with open(file_name, 'w') as f:\r\n#                 json.dump(data1, f, indent=2)\r\n#         else:\r\n#             print(\"Такой страны в базе нет\")\r\n#\r\n#     @staticmethod\r\n#     def load_from_file(file_name):\r\n#         with open(file_name) as f:\r\n#             print(json.load(f))\r\n#\r\n#\r\n# file = \"list_capital.json\"\r\n# while True:\r\n#     index = input('Выбор действия:\\n1 - добавление данных\\n2 - удаление данных\\n'\r\n#                   '3 - поиск данных\\n4 - редактирование данных\\n5 - просмотр данных\\n'\r\n#                   '6 - завершение работы\\nВвод: ')\r\n#     if index == \"1\":\r\n#         CountryCapital.add_country(file)\r\n#     elif index == \"2\":\r\n#         CountryCapital.delete_country(file)\r\n#     elif index == \"3\":\r\n#         CountryCapital.search_data(file)\r\n#     elif index == \"4\":\r\n#         CountryCapital.edit_data(file)\r\n#     elif index == \"5\":\r\n#         CountryCapital.load_from_file(file)\r\n#     elif index == \"6\":\r\n#         break\r\n#     else:\r\n#         print(\"Введен некорректный номер\")\r\n\r\n\r\n# import requests\r\n# from bs4 import BeautifulSoup\r\n# import csv\r\n#\r\n#\r\n# def get_html(url):\r\n#     res = requests.get(url)\r\n#     return res.text\r\n#\r\n#\r\n# def refine_cy(s):\r\n#     return s.split()[-1]\r\n#\r\n#\r\n# def write_csv(data):\r\n#     with open('plugins1.csv', 'a', encoding='utf-8-sig') as f:\r\n#         writer = csv.writer(f, delimiter=';', lineterminator='\\r')\r\n#         writer.writerow((data['name'], data['url'], data['snippet'], data['active_install'], data['tests']))\r\n#\r\n#\r\n# def get_data(html):\r\n#     soup = BeautifulSoup(html, \"lxml\")\r\n#     element = soup.find_all('article', class_='plugin-card')\r\n#     for el in element:\r\n#         try:\r\n#             name = el.find('h3').text\r\n#         except ValueError:\r\n#             name = ''\r\n#\r\n#         try:\r\n#             url = el.find('h3').find('a').get('href')\r\n#         except ValueError:\r\n#             url = ''\r\n#\r\n#         try:\r\n#             snippet = el.find('div', class_=\"entry-excerpt\").text.strip()\r\n#         except ValueError:\r\n#             snippet = ''\r\n#\r\n#         try:\r\n#             active = el.find('span', class_=\"active-installs\").text.strip()\r\n#         except ValueError:\r\n#             active = ''\r\n#\r\n#         try:\r\n#             c = el.find('span', class_=\"tested-with\").text.strip()\r\n#             cy = refine_cy(c)\r\n#         except ValueError:\r\n#             cy = ''\r\n#\r\n#         data = {\r\n#             'name': name,\r\n#             'url': url,\r\n#             'snippet': snippet,\r\n#             'active_install': active,\r\n#             'tests': cy\r\n#         }\r\n#\r\n#         write_csv(data)\r\n#\r\n#\r\n# def main():\r\n#     for i in range(9, 26):\r\n#         url = f'https://ru.wordpress.org/plugins/browse/blocks/page/{i}/'\r\n#         get_data(get_html(url))\r\n#\r\n#\r\n# if __name__ == '__main__':\r\n#     main()\r\n\r\n\r\n# from parse import Parser\r\n#\r\n#\r\n# def main():\r\n#     pars = Parser(\"https://www.ixbt.com/live/index/news/\", \"news.txt\")\r\n#     pars.run()\r\n#\r\n#\r\n# if __name__ == '__main__':\r\n#     main()\r\n\r\n\r\n# import socket\r\n# from view import index, blog\r\n#\r\n# URLS = {\r\n#     '/': index,\r\n#     '/blog': blog\r\n# }\r\n#\r\n#\r\n# def parse_request(request):\r\n#     parsed = request.split()\r\n#     method = parsed[0]\r\n#     url = parsed[1]\r\n#     return method, url\r\n#\r\n#\r\n# def generate_headers(method, url):\r\n#     if method != \"GET\":\r\n#         return 'HTTP/1.1 405 Method Not Allowed!\\n\\n', 405\r\n#     if url not in URLS:\r\n#         return 'HTTP/1.1 404 Page Not Found!\\n\\n', 404\r\n#     return 'HTTP/1.1 200 OK!\\n\\n', 200\r\n#\r\n#\r\n# def generate_content(code, url):\r\n#     if code == 404:\r\n#         return '<h1>404</h1><h3>Page not found!</h3>'\r\n#     elif code == 405:\r\n#         return '<h1>405</h1><h3>Method not allowed!</h3>'\r\n#     return URLS[url]()\r\n#\r\n#\r\n# def generate_response(request):\r\n#     method, url = parse_request(request)\r\n#     headers, code = generate_headers(method, url)\r\n#     body = generate_content(code, url)\r\n#     return (headers + body).encode()\r\n#\r\n#\r\n# def run():\r\n#     server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n#     server_socket.bind(('127.0.0.1', 5000))\r\n#     server_socket.listen()\r\n#\r\n#     while True:\r\n#         client_socket, addr = server_socket.accept()\r\n#         request = client_socket.recv(1024)\r\n#\r\n#         print(f\"Клиент: {addr} => \\n{request.decode('utf-8')}\\n\")\r\n#\r\n#         response = generate_response(request.decode())\r\n#         client_socket.sendall(response)\r\n#         client_socket.close()\r\n#\r\n#\r\n# if __name__ == '__main__':\r\n#     run()\r\n\r\n\r\n# СУБД (система управления базами данных)\r\n# SQL (язык структурированных запросов)\r\n\r\n# *.db, *.sqlite, *.sqlite3, *.sdb, *.db2\r\n\r\n\r\n# import sqlite3\r\n\r\n# con = sqlite3.connect(\"profile.db\")\r\n# cur = con.cursor()\r\n#\r\n#\r\n# con.close()\r\n\r\n# with sqlite3.connect(\"profile.db\") as con:\r\n#     cur = con.cursor()\r\n#     # cur.execute(\"\"\"CREATE TABLE IF NOT EXISTS users(\r\n#     # id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n#     # name TEXT NOT NULL,\r\n#     # summa REAL,\r\n#     # date TEXT\r\n#     # )\r\n#     # \"\"\")\r\n#     cur.execute(\"DROP TABLE users\")\r\n\r\n#\r\n# with sqlite3.connect(\"users.db\") as con:\r\n#     cur = con.cursor()\r\n#\r\n#     cur.execute(\"\"\"\r\n#     DROP TABLE person_table;\r\n#     \"\"\")\r\n\r\n# cur.execute(\"\"\"\r\n# ALTER TABLE person_table\r\n# DROP COLUMN home_address;\r\n# \"\"\")\r\n\r\n\r\n# cur.execute(\"\"\"\r\n# ALTER TABLE person_table\r\n# RENAME COLUMN address TO home_address;\r\n# \"\"\")\r\n\r\n\r\n# cur.execute(\"\"\"\r\n# ALTER TABLE person_table\r\n# ADD COLUMN address TEXT NOT NULL DEFAULT 'addr';\r\n# \"\"\")\r\n\r\n\r\n# cur.execute(\"\"\"CREATE TABLE IF NOT EXISTS person(\r\n# id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n# name TEXT NOT NULL,\r\n# phone BLOB NOT NULL DEFAULT '+79090000000',\r\n# age INTEGER NOT NULL CHECK(age > 0 AND age < 100),\r\n# email TEXT UNIQUE\r\n# )\"\"\")\r\n# cur.execute(\"\"\"\r\n# ALTER TABLE person\r\n# RENAME TO person_table;\r\n# \"\"\")\r\n\r\n\r\n# with sqlite3.connect(\"db_4.db\") as con:\r\n#     cur = con.cursor()\r\n#     cur.execute(\"\"\"\r\n#     SELECT *\r\n#     FROM Ware\r\n#     ORDER BY Price DESC\r\n#     LIMIT 2, 5;\r\n#     \"\"\")\r\n#\r\n#     # res = cur.fetchall()\r\n#     # print(res)\r\n#     for res in cur:\r\n#         print(res)\r\n\r\n# res = cur.fetchone()\r\n# print(res)\r\n# res2 = cur.fetchmany(3)\r\n# print(res2)\r\n\r\n\r\n# import sqlite3\r\n\r\n# cars = [\r\n#     ('BMW', 54000),\r\n#     ('Chevrolet', 46000),\r\n#     ('Daewoo', 38000),\r\n#     ('Citroen', 29000),\r\n#     ('Honda', 33000)\r\n# ]\r\n#\r\n# with sqlite3.connect(\"cars.db\") as con:\r\n#     cur = con.cursor()\r\n#     cur.execute(\"\"\"\r\n#     CREATE TABLE IF NOT EXISTS cars(\r\n#         car_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n#         model TEXT,\r\n#         price INTEGER\r\n#     )\"\"\")\r\n#\r\n#     cur.executescript(\"\"\"\r\n#         DELETE FROM cars WHERE model LIKE 'B%';\r\n#         UPDATE cars SET price = price + 100;\r\n#     \"\"\")\r\n\r\n# cur.execute(\"UPDATE cars SET price = :Price WHERE model LIKE 'B%'\", {'Price': 0})\r\n\r\n# cur.executemany(\"INSERT INTO cars VALUES(NULL, ?, ?)\", cars)\r\n\r\n# for car in cars:\r\n#     cur.execute(\"INSERT INTO cars VALUES(NULL, ?, ?)\", car)\r\n\r\n# cur.execute(\"INSERT INTO cars VALUES(1, 'Renault', 22000)\")\r\n# cur.execute(\"INSERT INTO cars VALUES(2, 'Volvo', 29000)\")\r\n# cur.execute(\"INSERT INTO cars VALUES(3, 'Mercedes', 57000)\")\r\n# cur.execute(\"INSERT INTO cars VALUES(4, 'Bentley', 35000)\")\r\n# cur.execute(\"INSERT INTO cars VALUES(5, 'Audi', 52000)\")\r\n\r\n# con.commit()\r\n# con.close()\r\n\r\n# con = None\r\n# try:\r\n#     con = sqlite3.connect(\"cars.db\")\r\n#     cur = con.cursor()\r\n#     cur.executescript(\"\"\"\r\n#     CREATE TABLE IF NOT EXISTS cars(\r\n#         car_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n#         model TEXT,\r\n#         price INTEGER\r\n#     );\r\n#     BEGIN;\r\n#     INSERT INTO cars VALUES(NULL, 'Renault', 22000);\r\n#     UPDATE cars2 SET price = price + 100;\r\n#     \"\"\")\r\n#     con.commit()\r\n# except sqlite3.Error as e:\r\n#     if con:\r\n#         con.rollback()\r\n#     print(\"Ошибка выполнения запроса\", e)\r\n# finally:\r\n#     if con:\r\n#         con.close()\r\n\r\n\r\n# with sqlite3.connect(\"cars.db\") as con:\r\n#     cur = con.cursor()\r\n#     cur.executescript(\"\"\"\r\n#         CREATE TABLE IF NOT EXISTS cars(\r\n#             car_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n#             model TEXT,\r\n#             price INTEGER\r\n#         );\r\n#         CREATE TABLE IF NOT EXISTS cost(\r\n#             name TEXT, tr_in INTEGER, buy INTEGER\r\n#         );\r\n#     \"\"\")\r\n#\r\n#     cur.execute(\"INSERT INTO cars VALUES(NULL, 'Запорожец', 1000)\")\r\n#     last_row_id = cur.lastrowid   # содержит id последней записи\r\n#     buy_car_id = 2\r\n#     cur.execute(\"INSERT INTO cost VALUES('Илья', ?, ?)\", (last_row_id, buy_car_id))\r\n\r\n\r\n# with sqlite3.connect(\"cars.db\") as con:\r\n#     cur = con.cursor()\r\n#     cur.executescript(\"\"\"\r\n#         CREATE TABLE IF NOT EXISTS cars(\r\n#             car_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n#             model TEXT,\r\n#             price INTEGER\r\n#         );\r\n#     \"\"\")\r\n#\r\n#     cur.execute(\"SELECT model, price FROM cars\")\r\n#     # for res in cur:\r\n#     #     print(res)\r\n#     # rows = cur.fetchall()\r\n#     # print(rows)\r\n#     rows2 = cur.fetchone()\r\n#     print(rows2)\r\n#     rows3 = cur.fetchmany(5)\r\n#     print(rows3)\r\n\r\n\r\n# with sqlite3.connect(\"cars.db\") as con:\r\n#     con.row_factory = sqlite3.Row\r\n#     cur = con.cursor()\r\n#     cur.executescript(\"\"\"\r\n#         CREATE TABLE IF NOT EXISTS cars(\r\n#             car_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n#             model TEXT,\r\n#             price INTEGER\r\n#         );\r\n#     \"\"\")\r\n#\r\n#     cur.execute(\"SELECT model, price FROM cars\")\r\n#     for res in cur:\r\n#         print(res['model'], res['price'])\r\n\r\n\r\n# def read_ava(n):\r\n#     try:\r\n#         with open(f\"avatars/{n}.png\", \"rb\") as f:\r\n#             return f.read()\r\n#     except IOError as e:\r\n#         print(e)\r\n#         return False\r\n#\r\n#\r\n# def write_ava(name, data):\r\n#     try:\r\n#         with open(name, \"wb\") as f:\r\n#             f.write(data)\r\n#     except IOError as e:\r\n#         print(e)\r\n#         return False\r\n#     return True\r\n#\r\n#\r\n# with sqlite3.connect(\"cars.db\") as con:\r\n#     con.row_factory = sqlite3.Row\r\n#     cur = con.cursor()\r\n#     cur.executescript(\"\"\"\r\n#         CREATE TABLE IF NOT EXISTS users(\r\n#             name TEXT,\r\n#             ava BLOB,\r\n#             score INTEGER\r\n#         );\r\n#     \"\"\")\r\n#\r\n#     cur.execute(\"SELECT ava FROM users\")\r\n#     img = cur.fetchone()['ava']\r\n#\r\n#     write_ava('out.png', img)\r\n\r\n# img = read_ava(2)\r\n# if img:\r\n#     binary = sqlite3.Binary(img)\r\n#     cur.execute(\"INSERT INTO users VALUES('Илья', ?, 1000)\", (binary,))\r\n\r\n\r\n# with sqlite3.connect(\"cars.db\") as con:\r\n#     cur = con.cursor()\r\n#\r\n#     with open(\"sql_dump.sql\", \"w\") as f:\r\n#         for sql in con.iterdump():\r\n#             f.write(sql)\r\n\r\n# with sqlite3.connect(\"cars_new.db\") as con:\r\n#     cur = con.cursor()\r\n#\r\n#     with open(\"sql_dump.sql\", \"r\") as f:\r\n#         sql = f.read()\r\n#         cur.executescript(sql)\r\n\r\n# data = [('car', 'машина'), ('house', 'дом'), ('tree', 'дерево'), ('color', 'цвет')]\r\n#\r\n# con = sqlite3.connect(':memory:')\r\n# with con:\r\n#     cur = con.cursor()\r\n#     cur.execute(\"\"\"\r\n#     CREATE TABLE IF NOT EXISTS dict(\r\n#     eng TEXT,\r\n#     rus TEXT)\"\"\")\r\n#\r\n#     cur.executemany(\"INSERT INTO dict VALUES(?, ?)\", data)\r\n#\r\n#     cur.execute(\"SELECT rus FROM dict WHERE eng LIKE 'c%'\")\r\n#     print(cur.fetchall())\r\n\r\n# SQLAlchemy ORM\r\n\r\n# pip install sqlalchemy\r\n\r\n# import os\r\n#\r\n# from models.database import DATABASE_NAME\r\n# import create_database as db_creator\r\n#\r\n#\r\n# if __name__ == '__main__':\r\n#     db_is_created = os.path.exists(DATABASE_NAME)\r\n#     if not db_is_created:\r\n#         db_creator.create_database()\r\n\r\nfrom jinja2 import Template\r\n\r\n# name = \"Игорь\"\r\n# age = 25\r\n# per = {'name': 'Игорь', 'age': 25}\r\n\r\n# class Person:\r\n#     def __init__(self, name, age):\r\n#         self.name = name\r\n#         self.age = age\r\n#\r\n#     def get_name(self):\r\n#         return self.name\r\n#\r\n#     def get_age(self):\r\n#         return self.age\r\n#\r\n#\r\n# per = Person('Игорь', 25)\r\n# # tm = Template(\"Мне {{ a*2 }} лет. Меня зовут {{ n.upper() }}.\")\r\n# tm = Template(\"Мне {{ p.age }} лет. Меня зовут {{ p.name}}.\")\r\n# # tm = Template(\"Мне {{ p['age'] }} лет. Меня зовут {{ p['name']}}.\")\r\n# msg = tm.render(p=per)\r\n# print(msg)\r\n\r\n# cities = [\r\n#     {'id': 1, 'city': 'Москва'},\r\n#     {'id': 2, 'city': 'Coчи'},\r\n#     {'id': 3, 'city': 'Москва'},\r\n#     {'id': 4, 'city': 'Смоленск'},\r\n#     {'id': 5, 'city': 'Ярославль'},\r\n#\r\n# ]\r\n# link = \"\"\"\r\n# <select name=\"cities\">\r\n# {% for c in cities -%}\r\n# <option value=\"{{ c['id'] }}\">{{ c['city'] }}</option>\r\n# {% endfor -%}\r\n# </select>\r\n# \"\"\"\r\n# tm = Template(link)\r\n# msg = tm.render(cities=cities)\r\n#\r\n# print(msg)\r\n\r\n# cities = [\r\n#     {'id': 1, 'city': 'Москва'},\r\n#     {'id': 2, 'city': 'Coчи'},\r\n#     {'id': 3, 'city': 'Москва'},\r\n#     {'id': 4, 'city': 'Смоленск'},\r\n#     {'id': 5, 'city': 'Ярославль'},\r\n#\r\n# ]\r\n# link = \"\"\"\r\n# <select name=\"cities\">\r\n# {% for c in cities -%}\r\n# {% if c.id > 3 -%}\r\n#     <option value=\"{{ c['id'] }}\">{{ c['city'] }}</option>\r\n# {% elif c.city == 'Москва' -%}\r\n# {% else -%}\r\n#     {{ c['city'] }}\r\n# {% endif -%}\r\n# {% endfor -%}\r\n# </select>\r\n# \"\"\"\r\n# tm = Template(link)\r\n# msg = tm.render(cities=cities)\r\n#\r\n# print(msg)\r\n\r\ncar = [\r\n    {'model': 'Audi', 'price': 23000},\r\n    {'model': 'Skoda', 'price': 17300},\r\n    {'model': 'Renault', 'price': 44200},\r\n    {'model': 'Wolksvagen', 'price': 21300},\r\n\r\n]\r\nlst = [1, 2, 3, 4, 5, 6]\r\n# tpl = \"{{ cs | sum(attribute = 'price') }}\"\r\ntpl = \"{{ cs | sum }}\"\r\ntm = Template(tpl)\r\n# msg = tm.render(cs=car)\r\nmsg = tm.render(cs=lst)\r\n\r\nprint(msg)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 1ccbd4ef7ba2d9549c5fd80fc942f89a2e243eac)
+++ b/main.py	(date 1682852760850)
@@ -7667,18 +7667,18 @@
 #
 # print(msg)
 
-car = [
-    {'model': 'Audi', 'price': 23000},
-    {'model': 'Skoda', 'price': 17300},
-    {'model': 'Renault', 'price': 44200},
-    {'model': 'Wolksvagen', 'price': 21300},
-
-]
-lst = [1, 2, 3, 4, 5, 6]
-# tpl = "{{ cs | sum(attribute = 'price') }}"
-tpl = "{{ cs | sum }}"
-tm = Template(tpl)
-# msg = tm.render(cs=car)
-msg = tm.render(cs=lst)
-
-print(msg)
+# car = [
+#     {'model': 'Audi', 'price': 23000},
+#     {'model': 'Skoda', 'price': 17300},
+#     {'model': 'Renault', 'price': 44200},
+#     {'model': 'Wolksvagen', 'price': 21300},
+#
+# ]
+# lst = [1, 2, 3, 4, 5, 6]
+# # tpl = "{{ cs | sum(attribute = 'price') }}"
+# tpl = "{{ cs | sum }}"
+# tm = Template(tpl)
+# # msg = tm.render(cs=car)
+# msg = tm.render(cs=lst)
+#
+# print(msg)
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"e403a2d5-0e7f-4fa8-9a51-ea28c3b7f334\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/.name\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/.name\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/data.csv\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/data.csv\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/data.json\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/data.json\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/db_3.db\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/db_3.db\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/db_4.db\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/db_4.db\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/db_7.db\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/db_7.db\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/db_9.db\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/db_9.db\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/filtered.json\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/filtered.json\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/group.json\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/group.json\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/index.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/index.html\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/main.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/main.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/parse.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/parse.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/person.json\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/person.json\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/plugins.csv\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/plugins.csv\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/plugins1.csv\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/plugins1.csv\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/profile.db\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/profile.db\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/readme.md\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/readme.md\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/student.json\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/student.json\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/users.db\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/users.db\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2NdML6z0rZCpMdpIn7IORDJh1Tz\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"run.code.analysis.last.selected.profile\": \"aDefault\",\r\n    \"settings.editor.selected.configurable\": \"com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\" selected=\"Python.main\">\r\n    <configuration name=\"create_database\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"212\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/create_database.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"group\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"212\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/models\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/models/group.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"lesson\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"212\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/models\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/models/lesson.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"212\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"student\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"212\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/models\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/models/student.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.main\" />\r\n        <item itemvalue=\"Python.create_database\" />\r\n        <item itemvalue=\"Python.student\" />\r\n        <item itemvalue=\"Python.lesson\" />\r\n        <item itemvalue=\"Python.group\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"e403a2d5-0e7f-4fa8-9a51-ea28c3b7f334\" name=\"Changes\" comment=\"\" />\r\n      <created>1679989447024</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1679989447024</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 1ccbd4ef7ba2d9549c5fd80fc942f89a2e243eac)
+++ b/.idea/workspace.xml	(date 1682852753319)
@@ -2,26 +2,7 @@
 <project version="4">
   <component name="ChangeListManager">
     <list default="true" id="e403a2d5-0e7f-4fa8-9a51-ea28c3b7f334" name="Changes" comment="">
-      <change beforePath="$PROJECT_DIR$/.idea/.name" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/.name" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/data.csv" beforeDir="false" afterPath="$PROJECT_DIR$/data.csv" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/data.json" beforeDir="false" afterPath="$PROJECT_DIR$/data.json" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/db_3.db" beforeDir="false" afterPath="$PROJECT_DIR$/db_3.db" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/db_4.db" beforeDir="false" afterPath="$PROJECT_DIR$/db_4.db" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/db_7.db" beforeDir="false" afterPath="$PROJECT_DIR$/db_7.db" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/db_9.db" beforeDir="false" afterPath="$PROJECT_DIR$/db_9.db" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/filtered.json" beforeDir="false" afterPath="$PROJECT_DIR$/filtered.json" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/group.json" beforeDir="false" afterPath="$PROJECT_DIR$/group.json" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/index.html" beforeDir="false" afterPath="$PROJECT_DIR$/index.html" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/main.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/parse.py" beforeDir="false" afterPath="$PROJECT_DIR$/parse.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/person.json" beforeDir="false" afterPath="$PROJECT_DIR$/person.json" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/plugins.csv" beforeDir="false" afterPath="$PROJECT_DIR$/plugins.csv" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/plugins1.csv" beforeDir="false" afterPath="$PROJECT_DIR$/plugins1.csv" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/profile.db" beforeDir="false" afterPath="$PROJECT_DIR$/profile.db" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/readme.md" beforeDir="false" afterPath="$PROJECT_DIR$/readme.md" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/student.json" beforeDir="false" afterPath="$PROJECT_DIR$/student.json" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/users.db" beforeDir="false" afterPath="$PROJECT_DIR$/users.db" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -52,7 +33,7 @@
     "RunOnceActivity.OpenProjectViewOnStart": "true",
     "RunOnceActivity.ShowReadmeOnStart": "true",
     "run.code.analysis.last.selected.profile": "aDefault",
-    "settings.editor.selected.configurable": "com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable"
+    "settings.editor.selected.configurable": "org.jetbrains.plugins.github.ui.GithubSettingsConfigurable"
   }
 }]]></component>
   <component name="RunManager" selected="Python.main">
